Knoten clonebar
Netzwerk clonebar
Wurzelknoten als Repräsentant des Netzwerks
Speicher im Knoten
	bildet transparent Indizes
	dummy Speicher -> virtueller Knoten
Knoten sollten Statistiken führen
	evtl exponentiell gewichtetes moving average
	keine Zeitrelation, sondern Frequenz des Wurzelknotens (evtl Token)
Veränderbarkeit des Netzwerks im Betrieb
neue Filter

Durchlauf wie Breitensuche => Schlange für Tokens

RootNode:
   Verteilung entsprechend der FactTemplates über Map (Template -> NodeInputs)

Memory:
   Speichert Fakttupelmengen
   Verfügt ggf. über verschiedene Indizes <- Entscheidung bei Netzkonstruktion
   Nutzt Indizes bei entsprechenden Anfragen

Token: immutable (insb. die Menge)
   Menge von Fakttupeln
   + oder -

Message:
   Token
   NodeInput

NodeInput: Innere Klasse von Node

Interface NodeInput runtime:
   Message[] acceptToken(Token t)

Interface NodeInput compiletime:
   connectTo(Node parent)
   connectToNew(Node parent)

Node:
   long id

Interface für Node DN runtime:
   Memory getMemory()
   void flush

Interface für Node DN compiletime:
   NodeInput getInput(int id)
   Node()