<?xml version="1.0"?>
<project name="Jamocha" basedir="." default="jars">

	<target name="init" description="sets properties and creates some paths">
		
		<property environment="env"/>
		
		<property name="releasever" value="beta.2152"/>
		
		<property name="lib.home" value="lib" />
		<property name="app.name" value="Jamocha" />
		
		<property name="core.src" value="${basedir}/src" />
		<property name="gui.src" value ="${basedir}/src-gui" />
		<property name="unittests.src" value="${basedir}/tests" />
			
		<property name="bin" value="${basedir}/dist/bin" />
		
		<property name="packages" value="${basedir}/packages/" />
		
		<property name="dist" value="${basedir}/dist" />
		
		<!-- create some dirs -->
		<mkdir dir="${bin}" />
		<mkdir dir="${dist}" />
		
		<!-- set the classpath -->
		<path id="classpath">
			<pathelement path="${bin}" />
			<fileset dir="${lib.home}">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</fileset>
		</path>
		
	</target>

	<target name="parser" depends="init" description="Generate parser description for javacc">
		<echo message="INFORMATION: You need to set up the property javacc.home in your Ant Environment!">
		</echo>
		<!-- sl parser -->
		<jjtree javacchome="${javacc.home}"  target="${src}/org/jamocha/languages/sl/parser/SL.jjt" outputdirectory="${src}/org/jamocha/languages/sl/parser/" nodeusesparser="true" />
		<javacc javacchome="${javacc.home}" target="${src}/org/jamocha/languages/sl/parser/SL.jj" outputdirectory="${src}/org/jamocha/languages/sl/parser/"/>
		<!-- sfp parser -->
		<jjtree javacchome="${javacc.home}" target="${src}/org/jamocha/languages/clips/parser/SFP.jjt" outputdirectory="${src}/org/jamocha/languages/clips/parser/" nodeusesparser="true" />
		<javacc javacchome="${javacc.home}" target="${src}/org/jamocha/languages/clips/parser/SFP.jj" outputdirectory="${src}/org/jamocha/languages/clips/parser/" />
	</target>

	<target name="run-gui" depends="jars-core, jars-gui">
		<java jar="${dist}/jamocha-gui.jar" fork="true">
            <jvmarg value="-Djava.util.logging.config.file=src/org/jamocha/communication/logging/logging.properties" />
            <classpath>
                <path refid="classpath"/>
                <path location="${dist}/jamocha.jar"/>
            </classpath>
		</java>
	</target>
	
	<target name="run-shell" depends="jars-core">
        <java jar="${dist}/jamocha.jar" fork="true">
        	<jvmarg value="-Djava.util.logging.config.file=src/org/jamocha/communication/logging/logging.properties" />
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </java>
	</target>

	<target name="compile-core" depends="init" description="Compile the jamocha main sources">
		<javac srcdir="${core.src}" destdir="${bin}" encoding="UTF-8" classpathref="classpath" debug="yes" />
		<!-- copy all files within the source directory (except the sources themselves)
			to the bin directory. This is e.g. mandatory for the icons in the gui -->
		<copy todir="${bin}">
			<fileset dir="${core.src}" excludes="**/*.java" />
		</copy>
	</target>
	
   <target name="compile-gui" depends="init" description="Compile the jamocha gui sources">
        <javac srcdir="${gui.src}" destdir="${bin}" encoding="UTF-8" debug="yes">
            <classpath>
                <path refid="classpath"/>
                <path location="${dist}/jamocha.jar"/>
            </classpath>
        </javac>
        <!-- copy all files within the source directory (except the sources themselves)
            to the bin directory. This is e.g. mandatory for the icons in the gui -->
        <copy todir="${bin}">
            <fileset dir="${gui.src}" excludes="**/*.java" />
        </copy>
    </target>

    <target name="compile" depends="compile-core, compile-gui" description="Compile jamocha" />

	<target name="jars-core" depends="compile-core">
        <pathconvert property="libs.project" pathsep=" ">
            <mapper>
                <chainedmapper>
                    <!-- remove absolute path -->
                    <flattenmapper />
                    <!-- add lib/ prefix -->
                    <globmapper from="*" to="lib/*" />
                </chainedmapper>
            </mapper>
            <path>
                <!-- lib.home contains all jar files, in several subdirectories -->
                <fileset dir="${lib.home}">
                    <include name="**/*.jar" />
                </fileset>
            </path>
        </pathconvert>

        <jar jarfile="${dist}/jamocha.jar" basedir="${bin}" excludes="org/jamocha/application/gui/**">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="org.jamocha.application.Jamocha" />
            </manifest>
        </jar>
	</target>
	
	<target name="jars-gui" depends="compile-gui">
	    <pathconvert property="libs.project" pathsep=" ">
	        <mapper>
	            <chainedmapper>
	                <!-- remove absolute path -->
	                <flattenmapper />
	                 <!-- add lib/ prefix -->
	                 <globmapper from="*" to="lib/*" />
	            </chainedmapper>
	        </mapper>
	        <path>
	            <!-- lib.home contains all jar files, in several subdirectories -->
	            <fileset dir="${lib.home}">
	                <include name="**/*.jar" />
	            </fileset>
	        </path>
	    </pathconvert>
	    <jar jarfile="${dist}/jamocha-gui.jar" basedir="${bin}" excludes="*" includes="org/jamocha/application/gui/**" >
	        <manifest>
	            <attribute name="Built-By" value="${user.name}" />
	            <attribute name="Main-Class" value="org.jamocha.application.gui.JamochaGui" />
	        	<attribute name="Class-Path" value=". ./jamocha.jar" />
	        </manifest>
	    </jar>
	</target>

	<target name="jars" depends="jars-core, jars-gui" />
	
	<target name="clean" depends="init" description="Clean the binary output directories.">
		<delete dir="${bin}" />
	</target>

	<target name="distclean" depends="init" description="Clean the binary output directories, the created jars and the junit report directory.">
		<delete dir="${bin}" />
		<delete dir="${dist}" />
	</target>

	<target name="generate-doc" depends="jars">
		<java jar="dist/jamocha.jar" fork="true" inputstring="(functions-description doc/functions.xml)(exit)">
			<arg value="-shell"/>
		</java>

		<xslt style="doc/stylesheets/latex.xslt" out="doc/functions-documentation.tex" in="doc/functions.xml"/>
		<xslt style="doc/stylesheets/pmwiki.xslt" out="doc/pmwiki.out" in="doc/functions.xml"/>

		<exec executable="latex" searchpath="true">
			<arg value="-output-directory=doc"/>
			<arg value="doc/documentation.tex"/>
		</exec>
		<exec executable="makeindex" searchpath="true">
			<arg value="doc/documentation.idx"/>
		</exec>
		<exec executable="latex" searchpath="true">
			<arg value="-output-directory=doc"/>
			<arg value="doc/documentation.tex"/>
		</exec>
		<exec executable="latex" searchpath="true">
			<arg value="-output-directory=doc"/>
			<arg value="doc/documentation.tex"/>
		</exec>

	</target>

	<target name="compile-tests" depends="compile">
		<javac srcdir="${unittests.src}" destdir="${bin}" encoding="UTF-8" classpathref="classpath" />
	</target>

	<target name="run-junit-tests" depends="jars,compile-tests">
		<mkdir dir="tests/reports" />
		<junit printsummary="yes" fork="yes" haltonfailure="no">
			<classpath refid="classpath">
			</classpath>
			<formatter type="plain" />
			<batchtest fork="yes" todir="tests/reports">
				<fileset dir="tests">
					<include name="**/JTC*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name ="packages-src" depends="init">
	    <copy todir="${packages}/src/jamocha-src-${releasever}/src">
		<fileset dir="${core.src}}"/>
	    </copy>
	    <copy todir="${packages}/src/jamocha-src-${releasever}/license">
		<fileset file="LICENSE"/>
	    <fileset dir="lib/licenses"/>	    	
	    </copy>
	    <copy todir="${packages}/src/jamocha-src-${releasever}">
		<fileset file="build.xml"/>
		<fileset file="README"/>
	    </copy>
	    <tar destfile="${packages}/jamocha-src-${releasever}.tar.gz"
		compression="gzip"
		basedir="${packages}/src"
	    />
	    <zip destfile="${packages}/jamocha-src-${releasever}.zip"
		basedir="${packages}/src/"
	    />
	    <delete dir="${packages}/src" />
	</target>

	<target name="packages-bin" depends="jars">
	<!-- This target builds a tar.gz with the compiled tree and startup scripts -->
	    <copy todir="${packages}/bin/jamocha-bin-${releasever}">
		<fileset file="${dist}/jamocha.jar"/>
		<fileset file="README"/>
	    </copy>
	    <copy todir="${packages}/bin/jamocha-bin-${releasever}/license">
			<fileset file="LICENSE"/>
		    <fileset dir="lib/licenses"/>	 
	    </copy>
	    <tar destfile="${packages}/jamocha-bin-${releasever}.tar.gz"
		compression="gzip"
		basedir="${packages}/bin/"
	    />
	    <zip destfile="${packages}/jamocha-bin-${releasever}.zip"
		basedir="${packages}/bin/"
	    />
	    <delete dir="${packages}/bin" />
	</target>

	<target name="packages-all" depends="jars">
	    <copy todir="${packages}/all/jamocha-all-${releasever}">
		<fileset file="${dist}/jamocha.jar"/>
	    <fileset file="build.xml"/>
	    </copy>
	    <copy todir="${packages}/all/jamocha-all-${releasever}/src">
		<fileset dir="${core.src}"/>
	    </copy>
	    <copy todir="${packages}/all/jamocha-all-${releasever}/license">
			<fileset file="LICENSE"/>
		    <fileset dir="lib/licenses"/>	 
	    </copy>
	    <tar destfile="${packages}/jamocha-all-${releasever}.tar.gz"
		compression="gzip"
		basedir="${packages}/all/"
	    />
	    <zip destfile="${packages}/jamocha-all-${releasever}.zip"
		basedir="${packages}/all/"
	    />
	    <delete dir="${packages}/all" />
	</target>

	<target name="packages" depends="packages-bin, packages-src, packages-all">
		<mkdir dir="${packages}" />
	</target>


</project>
