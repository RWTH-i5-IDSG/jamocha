<?xml version="1.0" encoding="utf-8" ?> <functiongroups><functiongroup name="JavaFunctions"><function fixedParameterCount="true" description="Tests whether an object given as first argument is of a certain type, specified in the second argument. Returns true if this is the case, false otherwise." name="instanceof" returnType="BOOLEAN"><parameter description="Object to test." optional="false" name="object" type="OBJECT"/><parameter description="Name of the class to test for." optional="false" name="class" type="STRING"/></function><function fixedParameterCount="true" description="Creates a Java object and returns true on success." name="load-package" returnType="BOOLEAN"><parameter description="Classname of the object to create." optional="false" name="className" type="STRING"/></function><function fixedParameterCount="false" description="Calls a method of a specified object. Returns the resulting value of the method or false." name="member" returnType="unknown"><parameter description="Object to call the method of." optional="false" name="object" type="OBJECT"/><parameter description="Method to call." optional="false" name="method" type="STRING"/><parameter description="One or more parameters for the method." optional="true" name="parameter" type="OBJECT"/></function><function fixedParameterCount="false" description="Creates a Java object and returns it. Searches for the constructor that accepts the appropriate number of parameters." name="new" returnType="OBJECT"><parameter description="Object to instantiate." optional="false" name="object" type="OBJECT"/><parameter description="One or more parameters for the constructor." optional="true" name="parameter" type="OBJECT"/><parameter description="One or more parameters for the constructor." optional="true" name="parameter" type="OBJECT"/></function></functiongroup><functiongroup name="StringFunctions"><function fixedParameterCount="false" description="Concatenates two or more strings into one string and returns the new string." name="str-cat" returnType="STRING"><example>Jamocha&gt; (str-cat 'Jamocha ' 'rulez' '!!!')
Jamocha 'rulez'!!!
</example><parameter description="String to be concatenated with the strings from the other arguments." optional="false" name="string" type="STRING"/></function><function fixedParameterCount="true" description="Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence of the first argument is compared to the character sequence of thesecond argument. Returns a negative integer if the first string lexicographically precedes the second string. Returns a positive integer if the first string lexicographically follows the second string. Returns 0 if the strings are equal.

(Definition of lexicographic ordering: Two strings are different, when they have eitherdifferent characters at some index, or their lengths differ, or both. If they have different characters at one or more index positions, then the string whose character at the smallest differing index position k has the smaller value, as determined by using the &lt; operator, lexicographically precedes the other string. If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string.) " name="str-compare" returnType="LONG"><example>Jamocha&gt; (str-compare 'Jamocha' 'Jamocha')
0
Jamocha&gt; (str-compare 'Jamocha' 'Jamocho')
-14
Jamocha&gt; (str-compare 'Jamocha' 'Jamicha')
6
Jamocha&gt; (str-compare 'Jamocha' 'Jamochaaaa')
-3
Jamocha&gt; (str-compare 'Jamochaaaa' 'Jamocha')
3
</example><parameter description="String to compare to the second string." optional="false" name="firstString" type="STRING"/><parameter description="String to compare to the first string." optional="false" name="secondString" type="STRING"/></function><function fixedParameterCount="true" description="Returns the position index of the first occurrence of the second string inside the first string. This function is case sensitive. Returns -1 if no such substring is found in the first argument.
Index positions in a string start with 0." name="str-index" returnType="STRING"><example>Jamocha&gt; (str-index 'Jamocha' 'mocha')
2
Jamocha&gt; (str-index 'Jamocha' 'Jam')
0
Jamocha&gt; (str-index 'Jamocha' 'Mocha')
-1
</example><parameter description="String to search in." optional="false" name="firstString" type="STRING"/><parameter description="Substring to search for." optional="false" name="secondString" type="STRING"/></function><function fixedParameterCount="true" description="Returns the length of a string as a long." name="str-length" returnType="LONG"><example>Jamocha&gt; (str-length 'Jamocha really ruleZ!!!')
23
</example><parameter description="String to get its length from." optional="false" name="string" type="STRING"/></function><function fixedParameterCount="true" description="Returns the given string in lowercase alphabetic characters." name="str-lower" returnType="STRING"><example>Jamocha&gt; (str-lower 'JaMoChA')
jamocha
</example><parameter description="String to transform to lowercase." optional="false" name="string" type="STRING"/></function><function fixedParameterCount="true" description="Replaces the first substring of the target string, given as first argument, that matches the regular expression given as second argument with the replacement from thethird argument." name="str-replace" returnType="STRING"><example>Jamocha&gt; (str-replace 'Jamocha' 'm[^io]ch' 'maic')
Jamocha
</example><parameter description="String where the replacement takes place." optional="false" name="targetString" type="STRING"/><parameter description="Substring to search for (as regular expression)." optional="false" name="searchString" type="STRING"/><parameter description="Replacement string." optional="false" name="replString" type="STRING"/></function><function fixedParameterCount="true" description="Replaces the all substrings of the target string, given as first argument, that match the regular expression given as second argument with the replacement from the third argument." name="str-replace-all" returnType="STRING"><example>Jamocha&gt; (str-replace-all 'Jamocha' 'm[^io]ch' 'maic')
Jamocha
</example><parameter description="String where the replacement takes place." optional="false" name="targetString" type="STRING"/><parameter description="Substring to search for (as regular expression)." optional="false" name="searchString" type="STRING"/><parameter description="Replacement string." optional="false" name="replString" type="STRING"/></function><function fixedParameterCount="true" description="Returns a copy of the given string where leading and following blanks are omitted." name="str-trim" returnType="STRING"><example>Jamocha&gt; (str-trim '   Ja mo cha      ')
Ja mo cha
</example><parameter description="String to trim." optional="false" name="string" type="STRING"/></function><function fixedParameterCount="true" description="Returns the given string in uppercase alphabetic characters." name="str-upper" returnType="STRING"><example>Jamocha&gt; (str-upper 'JaMoChA')
JAMOCHA
</example><parameter description="String to transform to uppercase." optional="false" name="string" type="STRING"/></function><function fixedParameterCount="true" description="Returns a new string that is a substring of the string given as third argument. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex.
Index positions in a string start with 0." name="sub-string" returnType="STRING"><example>Jamocha&gt; (sub-string 0 2 'Jamocha')
Ja
Jamocha&gt; (sub-string 2 7 'Jamocha')
mocha
</example><parameter description="First index of the substring. Has to be smaller to endIndex and within the bounds of the string." optional="false" name="beginIndex" type="LONG"/><parameter description="Last +1 index of the substring. Has to be greater to endIndex and within the bounds of the string (max: last position of the string +1)." optional="false" name="endIndex" type="LONG"/><parameter description="String to get the substring from." optional="false" name="string" type="STRING"/></function></functiongroup><functiongroup name="MathFunctions"><function fixedParameterCount="true" description="Returns the absolute value of its numeric argument. The return type depends on the type of the argument." name="abs" returnType="NUMBER"><example>Jamocha&gt; (abs -57.39)
57.39
</example><parameter description="Numeric value to get the absolute value from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the arc cosine of its numeric argument. The return value is an angle expressed in radians in the range of 0.0 through pi (3.141592653589793..)" name="acos" returnType="DOUBLE"><example>Jamocha&gt; (acos -0.7563654)
2.4285352259830364
</example><parameter description="Numeric value in the range of -1.0 through 1.0." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="false" description="Returns the sum of its numeric arguments. This function can be called with the identifier 'add' or '+'. Each argument has to be a numeric expression. The return type depends on the types of the arguments, it returns a double if any of its arguments is a double, otherwise it returns a long." name="add" returnType="NUMBER"><example>Jamocha&gt; (+ 7 8.56 -4.3)
11.260000000000002
</example><parameter description="Numeric values (at least one) to be added up." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the arc sine of its numeric argument. The return value is an angle expressed in radians in the range of -pi/2 through pi/2." name="asin" returnType="DOUBLE"><example>Jamocha&gt; (asin -0.7563654)
-0.8577388991881397
</example><parameter description="Numeric value in the range of -1.0 through 1.0." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the arc tangent of its numeric argument. The return value is an angle expressed in radians in the range of -pi/2 through pi/2." name="atan" returnType="DOUBLE"><example>Jamocha&gt; (atan -3.14)
-1.2624806645994682
</example><parameter description="Numeric value to get the arc tangent from (no restrictions in the domain range)." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and equal to a mathematical integer." name="ceil" returnType="DOUBLE"><example>Jamocha&gt; (ceil 2.379079)
3.0
</example><parameter description="Numeric value to get the ceiling from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the trigonometric cosine of an angle." name="cos" returnType="DOUBLE"><example>Jamocha&gt; (cos -1.5567)
0.014095859961074654
</example><parameter description="Angle, in radians." optional="false" name="angle" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the hyperbolic cosine of a numeric argument. The hyperbolic cosine of x is defined to be (e^x + e^(-x))/2 where e is Euler's number." name="cosh" returnType="DOUBLE"><example>Jamocha&gt; (cosh -.08646678676)
1.0037405822755834
</example><parameter description="Numeric value to get the hyperbolic cosine from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Converts an angle measured in degrees to an approximately equivalent angle measured in radians." name="deg-rad" returnType="DOUBLE"><example>Jamocha&gt; (deg-rad 180)
3.141592653589793
</example><parameter description="Angle, in degrees." optional="false" name="angle" type="NUMBER"/></function><function fixedParameterCount="false" description="Returns the value of the first argument divided by each of the subsequent arguments. This function can be called with the identifier 'divide' or '/'." name="divide" returnType="NUMBER"><example>Jamocha&gt; (/ 27 3 -4.5)
-2.0
</example><parameter description="Numeric value which is divided by the following arguments." optional="false" name="dividend" type="NUMBER"/><parameter description="Numeric values which divide the first argument or the result of the previous divisions respectively." optional="false" name="divisor" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns e, the base of the natural logarithm." name="e" returnType="DOUBLE"><example>Jamocha&gt; (log (e))
1.0
</example></function><function fixedParameterCount="true" description="Returns true, if the argument is an even number, otherwise returns false." name="evenp" returnType="BOOLEAN"><example>Jamocha&gt; (evenp 42)
true
</example><parameter description="Numeric value to test." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns Euler's number e raised to the power its numeric argument." name="exp" returnType="DOUBLE"><example>Jamocha&gt; (exp -2)
0.1353352832366127
</example><parameter description="Exponent" optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and equal to a mathematical integer." name="floor" returnType="DOUBLE"><example>Jamocha&gt; (floor 6.7496)
6.0
</example><parameter description="Numeric value to get the floor from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the natural logarithm (base e) of its numeric argument." name="log" returnType="DOUBLE"><example>Jamocha&gt; (log 2.7)
0.9932517730102834
</example><parameter description="Numeric value to get the natural logarithm from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the base 10 logarithm of its numeric argument." name="log10" returnType="DOUBLE"><example>Jamocha&gt; (log10 10)
1.0
</example><parameter description="Numeric value to get the base 10 logarithm from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="false" description="Returns the value of its greatest numeric argument. Each argument has to be a numeric expression. The return type is either an integer or float depending on the type of the greatest argument." name="max" returnType="NUMBER"><example>Jamocha&gt; (max 87 -.3 777 445 9023 -75555)
9023
</example><parameter description="Numeric values (at least one) to get the maximum from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="false" description="Returns the value of its smallest numeric argument. Each argument has to be a numeric expression. The return type is either an integer or float depending on the type of the smallest argument." name="min" returnType="NUMBER"><example>Jamocha&gt; (min 7834 -1 23 80.87583)
-1
</example><parameter description="Numeric values (at least one) to get the minimum from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the remainder of an integer division." name="mod" returnType="DOUBLE"><example>Jamocha&gt; (mod 17 3)
2
</example><parameter description="Numeric value which is divided by the following argument." optional="false" name="dividend" type="NUMBER"/><parameter description="Numeric value which divides the first argument." optional="false" name="divisor" type="NUMBER"/></function><function fixedParameterCount="false" description="Returns the product of its numeric arguments. Each argument has to be a numeric expression. The return type is a double if any of its arguments is a double, otherwise it is a long." name="multiply" returnType="NUMBER"><example>Jamocha&gt; (multiply 11 7 -3)
-231
</example><parameter description="Numeric values (at least one) to multiply with each other." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns true, if the argument is an odd number, otherwise returns false." name="oddp" returnType="BOOLEAN"><example>Jamocha&gt; (oddp 77.0)
true
</example><parameter description="Numeric value to test." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns pi, the ratio of the circumference of a circle to its diameter." name="pi" returnType="DOUBLE"><example>Jamocha&gt; (rad-deg (pi))
180.0
</example></function><function fixedParameterCount="true" description="Returns the value of the first mumeric argument raised to the power of the following numeric arguments." name="pow" returnType="DOUBLE"><example>Jamocha&gt; (pow 2 3 2 0.5)
8.0
</example><parameter description="Numeric value, base for the calculation." optional="false" name="base" type="NUMBER"/><parameter description="Numeric values, exponent(s) for the calculation" optional="false" name="exponent(s)" type="NUMBER"/></function><function fixedParameterCount="true" description="Converts an angle measured in radians to an approximately equivalent angle measured in degrees." name="rad-deg" returnType="DOUBLE"><example>Jamocha&gt; (rad-deg -0.7853981633974483)
-45.0
</example><parameter description="Angle, in radians." optional="false" name="angle" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range." name="random" returnType="DOUBLE"><example>Jamocha&gt; (asin (random))
0.8677457331434435
</example></function><function fixedParameterCount="true" description="Returns the double value closest to the numeric argument." name="rint" returnType="DOUBLE"><example>Jamocha&gt; (rint .50000001)
1.0
</example><parameter description="Numeric value to get closest double value for." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the closest int to the numeric argument." name="round" returnType="DOUBLE"><example>Jamocha&gt; (round 0.752343)
1.0
</example><parameter description="Numeric value to round." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns -1.0 if the argument is negative, 1.0 if the argument is positive and 0 if the argument is 0." name="signum" returnType="DOUBLE"><example>Jamocha&gt; (signum 7)
1.0
</example><parameter description="Numeric value to get the signum from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the trigonometric sine of an angle." name="sin" returnType="DOUBLE"><example>Jamocha&gt; (sin -1.567)
-0.9999927939600877
</example><parameter description="Angle, in radians." optional="false" name="angle" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the hyperbolic sine of a numeric argument. The hyperbolic sine of x is defined to be (e^x - e^(-x))/2 where e is Euler's number." name="sinh" returnType="DOUBLE"><example>Jamocha&gt; (sinh 9.820345)
9202.199554641053
</example><parameter description="Numeric value to get the hyperbolic sine from." optional="false" name="angle" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the positive square root value of its numeric argument." name="sqrt" returnType="DOUBLE"><example>Jamocha&gt; (sqrt 169)
13.0
</example><parameter description="Numeric value, positive or equal to +/-0.0, to get the square root value from." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="false" description="Returns the value of the first numeric argument minus the sum of all subsequent numeric arguments. This function can be called with the identifier 'subtract' or '-'" name="subtract" returnType="NUMBER"><example>Jamocha&gt; (subtract 15 4 3 -6)
14
Jamocha&gt; (- 15 4 3 -6)
14
</example><parameter description="Numeric value from which to subtract all subsequent arguments." optional="false" name="number" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the trigonometric tangent of an angle." name="tan" returnType="DOUBLE"><example>Jamocha&gt; (tan (/ (pi) 2))
1.633123935319537E16
</example><parameter description="Angle, in radians." optional="false" name="angle" type="NUMBER"/></function><function fixedParameterCount="true" description="Returns the hyperbolic tangent of a numeric argument. The hyperbolic tangent of x is defined to be sinh(x)/cosh(x)." name="tanh" returnType="DOUBLE"><example>Jamocha&gt; (tan -6.98263)
-0.8413395544584249
</example><parameter description="Numeric value to get the hyperbolic tangent from." optional="false" name="angle" type="NUMBER"/></function></functiongroup><functiongroup name="HelpFunctions"><function fixedParameterCount="false" description="Prints out an example for the function given as argument and executes it in the rule engine. Note: Don't use this function in your production environment as templates, rules and facts might be added, removed or modified." name="example" returnType="NONE"><example>Jamocha&gt; (example add)
NIL
</example><parameter description="Name of the function to show an example for." optional="true" name="function" type="IDENTIFIER"/></function><function fixedParameterCount="false" description="Prints out a short usage for a function name passed as argument. If no argument is passed the usage of this usage function itself is printed." name="usage" returnType="NONE"><example>Jamocha&gt; (usage)
(usage)
Jamocha&gt; (usage member$)
(member$)
</example><parameter description="Name of the function to show the usage of." optional="true" name="function" type="IDENTIFIER"/></function></functiongroup><functiongroup name="AdaptorFunctions"><function fixedParameterCount="true" description="Imports or exports facts to and from a database via a jdbc link.
On import for each line of the DB-table a fact of a corresponding Jamocha template is asserted. Therefore an adequate template has to be defined before an import can take place.
On export for each fact in a fact-list a new record is inserted into the DB-table or an existing record is updated (according to the contents of the primary key). The facts have to be based on a well-defined template. Exporting incomplete templates may cause inconsistencies.Returns true on success" name="jdbclink" returnType="BOOLEAN"><example>(deftemplate templ (slot a) (slot b) (slot c) (slot foo) )
(jdbclink-init)
(bind ?mylink
	(assert
		(jdbclink
			(JDBCdriver 'com.mysql.jdbc.Driver')
			(ConnectionName 'db')
			(TableName 'test')
			(TemplateName 'templ')
			(Username 'jamocha')
			(Password 'geheim')
			(JDBCurl 'jdbc:mysql://134.130.113.67:3306/jamocha')
		)
	)
)
(bind ?myfilter
	(assert
		(jdbccondition
			(SlotName 'foo')
			(BooleanOperator '&gt;')
			(Value 2007-04-27 19:00+1)
		)
	)
)
(jdbclink ?mylink 'import' (create$ ?myfilter))

(deftemplate templ2 (slot a) (slot b) (slot c) )
(jdbclink-init)
(bind ?mylink
	(assert
		(jdbclink
				(JDBCdriver 'com.mysql.jdbc.Driver')
				(ConnectionName 'db')
				(TableName 'test')
				(TemplateName 'templ2')
				(Username 'jamocha')
				(Password 'geheim')
				(JDBCurl 'jdbc:mysql://134.130.113.67:65306/jamocha')
		)
	)
)
(assert (templ2 (a 99) (b 99) (c 'neunviermal')) )
(jdbclink ?mylink 'export' '3'  )</example><parameter description="Fact describing the jdbc link connection to use." optional="false" name="jdbclink" type="FACT_ID"/><parameter description="Operation is either 'import' or 'export'." optional="false" name="operation" type="STRING"/><parameter description="On export: fact-list to export. On import: list of jdbccondition-facts for filtering." optional="false" name="facts" type="LIST"/></function><function fixedParameterCount="true" description="Initializes the JDBC adaptor by defining the jdbclink and jdbccondition template. Returns true on success." name="jdbclink-init" returnType="BOOLEAN"><example>(deftemplate templ (slot a) (slot b) (slot c) (slot foo) )
(jdbclink-init)
(assert
	(jdbclink
		(JDBCdriver 'com.mysql.jdbc.Driver')
		(ConnectionName 'db')
		(TableName 'test')
		(TemplateName 'templ')
		(Username 'jamocha')
		(Password 'secret')
		(JDBCurl 'jdbc:mysql://134.130.113.67:3306/jamocha')
	)
)
(assert
	(jdbccondition
		(SlotName 'foo')
		(BooleanOperator '&gt;')
		(Value 2007-04-27 19:00+1)
	)
)</example></function><function fixedParameterCount="true" description="Imports facts from an external, user-defined iterator to the rete engine. The external iterator isspecified in the first argument and needs to be a user-implementation of a subclass of org.jamocha.rete.util.DeffactIterator.  The function generates a mapping from the config-fact given in the second argument. After that itasserts a fact from each deffact the iterator returns. Returns true, iff everything went fine." name="iteratorimporter" returnType="LONG"><example>Jamocha&gt; (deftemplate fibonacciconfig (slot max))
true
Jamocha&gt; (bind ?config	(assert	(fibonacciconfig (max '1000'))))
true
Jamocha&gt; (iteratorimporter 'org.jamocha.sampleimplementations.DeffactFibonacciIterator' ?config)
true
Jamocha&gt; (facts)
(fibonacciconfig
    (max '1000')
)
for a total of 1
</example><parameter description="User-defined iterator, class name of a subclass of org.jamocha.rete.util.DeffactIterator." optional="false" name="DeffactIteratorClass" type="STRING"/><parameter description="Config-fact, to generate a mapping for the import from." optional="false" name="ConfigFact" type="FACT_ID"/></function><function fixedParameterCount="true" description="Exports facts from the rete engine to an external location. The external location is specified in the first argument and needs to be an user-implementation of a subclass of org.jamocha.rete.util.ExportHandler. The function first generates a mapping from the config-fact given in the second argument. After that it exports all facts from the fact-list given as third argument via the iterator." name="iteratorexporter" returnType="LONG"><example>Jamocha&gt; (deftemplate a 	(slot horst))
true
Jamocha&gt; (deftemplate b	(slot heiner))
true
Jamocha&gt; (deftemplate c	(slot ory))
true
Jamocha&gt; (deftemplate d	(slot krautsalat))
true
Jamocha&gt; (bind ?horst (assert (a (horst 1))))
true
Jamocha&gt; (bind ?heiner1 (assert	(b (heiner 13))))
true
Jamocha&gt; (bind ?heiner2	(assert	(b (heiner 1))))
true
Jamocha&gt; (bind ?ory	(assert	(c (ory 4711))))
true
Jamocha&gt; (bind ?krautsalat (assert (d (krautsalat 11))))
true
Jamocha&gt; (deftemplate config (slot removeSlot))
true
Jamocha&gt; (bind ?config (assert (config (removeSlot 'heiner'))))
true
Jamocha&gt; (iteratorexporter 'org.jamocha.sampleimplementations.SampleExportHandler'  ?config (create$ ?horst ?heiner1 ?ory ?krautsalat))
1
</example><parameter description="External location, class name of a subclass of org.jamocha.rete.util.ExportHandler." optional="false" name="ExportHandlerClass" type="STRING"/><parameter description="Config-fact, to generate the mapping for the export from." optional="false" name="ConfigFact" type="FACT_ID"/><parameter description="Fact-list to export via the iterator." optional="false" name="FactsToExport" type="LIST"/></function></functiongroup><functiongroup name="DateTimeFunctions"><function fixedParameterCount="false" description="Returns true if the given DateTime arguments are in increasing chronological order." name="between" returnType="BOOLEAN"><example>Jamocha&gt; (between 2007-06-04 16:01:21 2007-07-07 19:07:49 (now))
true
</example><parameter description="DateTime to compare to the other parameters." optional="false" name="datetime" type="DATETIME"/></function><function fixedParameterCount="true" description="Returns the Timestamp in milliseconds of the given DateTime argument." name="datetime2timestamp" returnType="LONG"><example>Jamocha&gt; (datetime2timestamp 2007-06-04 16:01:21)
1180972881000
</example><parameter description="DateTime to convert into milliseconds (Timestamp)." optional="false" name="datetime" type="DATETIME"/></function><function fixedParameterCount="true" description="Returns the day-field from the given DateTime argument." name="getday" returnType="LONG"><example>Jamocha&gt; (getday 2007-06-04 17:10:47)
4
</example><parameter description="DateTime to get the day from." optional="false" name="datetime" type="DATETIME"/></function><function fixedParameterCount="true" description="Returns the GMT Offset-field from the given DateTime argument." name="getgmtoffset" returnType="LONG"><example>Jamocha&gt; (getgmtoffset 2007-06-04 17:14:06+5)
5
</example><parameter description="DateTime to get the GMT Offset from." optional="false" name="datetime" type="DATETIME"/></function><function fixedParameterCount="true" description="Returns the hours-field from the given DateTime argument." name="gethours" returnType="LONG"><example>Jamocha&gt; (gethours 2007-06-04 17:14:06)
17
</example><parameter description="DateTime to get the hours from." optional="false" name="datetime" type="DATETIME"/></function><function fixedParameterCount="true" description="Returns the minutes-field from the given DateTime argument." name="getminutes" returnType="LONG"><example>Jamocha&gt; (getminutes 2007-06-04 17:14:06)
14
</example><parameter description="DateTime to get the minutes from." optional="false" name="datetime" type="DATETIME"/></function><function fixedParameterCount="true" description="Returns the month-field from the given DateTime argument." name="getmonth" returnType="LONG"><example>Jamocha&gt; (getmonth 2007-06-04 17:14:06)
6
</example><parameter description="DateTime to get the month from." optional="false" name="datetime" type="DATETIME"/></function><function fixedParameterCount="true" description="Returns the seconds-field from the given DateTime argument." name="getseconds" returnType="LONG"><example>Jamocha&gt; (getseconds 2007-06-04 17:14:06)
6
</example><parameter description="DateTime to get the seconds from." optional="false" name="datetime" type="DATETIME"/></function><function fixedParameterCount="true" description="Returns the year-field from the given DateTime argument." name="getyear" returnType="LONG"><example>Jamocha&gt; (getyear 2007-06-04 17:14:06)
2007
</example><parameter description="DateTime to get the year from." optional="false" name="datetime" type="DATETIME"/></function><function fixedParameterCount="true" description="Returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC." name="ms-time" returnType="LONG"><example>Jamocha&gt; (ms-time)
1200500285218
</example></function><function fixedParameterCount="true" description="Returns the DateTime-Object from the current date and time." name="now" returnType="DATETIME"><example>Jamocha&gt; (now)
2008-01-16 17:18:05+01
Jamocha&gt; (getseconds (now))
5
</example></function><function fixedParameterCount="true" description="Returns the DateTime-Object of the given Timestamp argument." name="timestamp2datetime" returnType="DATETIME"><example>Jamocha&gt; (timestamp2datetime 293196017000)
1979-04-17 11:20:17+00
</example><parameter description="Timestamp to convert into a Datetime-Object." optional="false" name="timestamp" type="LONG"/></function></functiongroup><functiongroup name="ListFunctions"><function fixedParameterCount="true" description="Returns a new list containing all elements of the second list that are not also elements of the first list." name="complement$" returnType="LIST"><example>Jamocha&gt; (complement$  (create$ sausage milk eggs) (create$ cheese milk eggs bread))
[cheese, bread]
</example><parameter description="List acting as a filter for list two." optional="false" name="listOne" type="LIST"/><parameter description="List that is filtered by list one." optional="false" name="listTwo" type="LIST"/></function><function fixedParameterCount="false" description="Creates a list of the given arguments." name="create$" returnType="LIST"><example>Jamocha&gt; (create$ cheese milk eggs)
[cheese, milk, eggs]
</example><parameter description="Any value to be part of the list." optional="true" name="someValue" type="unknown"/></function><function fixedParameterCount="true" description="Deletes a specified number of items from a list and returns the remaining values in a new list. The first integer defines the index of the first item to be removed and the second integer defines the index of the last item to be removed. Attention: Lists in Jamocha start with index 1." name="delete$" returnType="LIST"><example>Jamocha&gt; (delete$ (create$ cheese milk eggs bread sausages) 2 4)
[cheese, sausages]
</example><parameter description="List to delete items from." optional="false" name="someList" type="LIST"/><parameter description="First item to delete from the List. Has to be smaller or equal to endIndex and within the bounds of the list." optional="false" name="startIndex" type="LONG"/><parameter description="Last item to delete from the List. Has to be greater or equal to startIndex and within the bounds of list." optional="false" name="endIndex" type="LONG"/></function><function fixedParameterCount="false" description="Deletes specific items from a list. Arguments can either be single items or lists of items.
In case of a list to be deleted, items are only removed if they appear in identical (correct and coherent) order in the first list. The function walks through the first list and tries to match each position to any of the arguments that are to be deleted. After deleting items from the list, it starts anew to walk through the remaining list and tries again to find a match to any of the arguments that are to be deleted. Therefore the arguments are not necessarily processed in the order they are given and also deleted repeatedly if the remaining list can be matched again.
Returns a new list consisting of the remaining items." name="delete-member$" returnType="LIST"><example>Jamocha&gt; (delete-member$ (create$ 1 2 3 4 5) 2)
[1, 3, 4, 5]
Jamocha&gt; (delete-member$ (create$ 1 2 3 4 5) (create$ 3 4) 1)
[2, 5]
Jamocha&gt; (delete-member$ (create$ 1 2 3 4 5) (create$ 3 4) (create$ 2 5))
[1]
</example><parameter description="List to delete items from." optional="false" name="someList" type="LIST"/><parameter description="Item(s) to delete from the list." optional="false" name="deleteItem" type="unknown"/></function><function fixedParameterCount="false" description="Creates a list of a given string. Optionally a separator where to split the string can be provided. Default separator is the space character." name="explode$" returnType="LIST"><example>Jamocha&gt; (explode$ 'A horse has about four legs')
['A', 'horse', 'has', 'about', 'four', 'legs']
Jamocha&gt; (explode$ 'A horse has about four legs' ' about ')
['A horse has', 'four legs']
</example><parameter description="String to be exploded." optional="false" name="string" type="STRING"/><parameter description="Optional separator, default: space character." optional="true" name="separator" type="STRING"/></function><function fixedParameterCount="true" description="Returns the first item of a list. Nil if the list is empty." name="first$" returnType="unknown"><example>Jamocha&gt; (first$ (create$ cheese milk eggs bread))
cheese
</example><parameter description="List to get the first item from." optional="false" name="someList" type="LIST"/></function><function fixedParameterCount="false" description="Evaluates expressions for all items in a list." name="foreach" returnType="unknown"><example>Jamocha&gt; (bind ?x (create$ cheese milk eggs bread))
true
Jamocha&gt; (bind ?res 'We need: ')
true
Jamocha&gt; (foreach ?item ?x (bind ?res (str-cat ?res ?item ', ')))
true
Jamocha&gt; (return ?res)
We need: cheese, milk, eggs, bread, 
</example><parameter description="Name of the variable for each list item." optional="false" name="variableName" type="IDENTIFIER"/><parameter description="List to work on." optional="false" name="list" type="LIST"/></function><function fixedParameterCount="false" description="Creates and returns a string of a given list. Optionally a separator to put in-between the itemscan be provided. Default separator is the space character." name="implode$" returnType="STRING"><example>Jamocha&gt; (implode$ (create$ We need beer))
We need beer
Jamocha&gt; (implode$ (create$ We need beer) ' -STOP- ')
We -STOP- need -STOP- beer
</example><parameter description="List to be imploded." optional="false" name="list" type="LIST"/><parameter description="Optional separator, default: space character." optional="true" name="separator" type="STRING"/></function><function fixedParameterCount="false" description="Inserts one or more items into an existing list at a specific position and returns the extended list. If a list of items is inserted each item of it is inserted separately, so there are no nested lists.
Attention: Lists in Jamocha start with index 1." name="insert$" returnType="LIST"><example>Jamocha&gt; (insert$ (create$ cheese milk bread sausages) 3 eggs)
[cheese, milk, eggs, bread, sausages]
</example><parameter description="List to insert one or more items into." optional="false" name="someList" type="LIST"/><parameter description="Position where the new item(s) should be added at." optional="false" name="index" type="LONG"/><parameter description="Item(s) to insert into the List." optional="false" name="item" type="unknown"/></function><function fixedParameterCount="false" description="Inserts one or more items into an existing list at a specific position and returns the extended list. If a list of items is inserted each item of it is inserted separately, so there are no nested lists.
Attention: Lists in Jamocha start with index 1." name="insert-list$" returnType="LIST"><example>Jamocha&gt; (insert-list$ (create$ cheese milk bread sausages) 3 (create$ eggs butter))
[cheese, milk, [eggs, butter], bread, sausages]
Jamocha&gt; (insert-list$ (create$ cheese milk bread sausages) 3 eggs butter)
[cheese, milk, eggs, butter, bread, sausages]
</example><parameter description="List to insert one or more items into." optional="false" name="someList" type="LIST"/><parameter description="Position where the new item(s) should be added at." optional="false" name="index" type="LONG"/><parameter description="Item(s) to insert into the List." optional="false" name="item" type="unknown"/></function><function fixedParameterCount="false" description="Returns the intersection of its two arguments without duplicates. The order of returned items corresponds to the one in the first list. " name="intersection$" returnType="LIST"><example>Jamocha&gt; (intersection$ (create$ 3 a b 1 c) (create$ e 1 d a f c))
[a, 1, c]
</example><parameter description="First list for intersection." optional="false" name="firstList" type="LIST"/><parameter description="Second list for intersection." optional="false" name="secondList" type="LIST"/></function><function fixedParameterCount="true" description="Returns the number of items of a list." name="length$" returnType="LONG"><example>Jamocha&gt; (length$ (create$ cheese milk eggs bread))
4
</example><parameter description="List to get the length from." optional="false" name="list" type="LIST"/></function><function fixedParameterCount="true" description="Compares if the first argument is a member of the list given in the second argument. If the the first argument is a list it is compared if there exists a subset of the second argument which is in the same order.
Returns the position index of the element or the starting index of the subset in the second argument, if the first argument is a member.
Otherwise returns -1." name="member$" returnType="LONG"><example>Jamocha&gt; (member$ 5 (create$ 1 2 3 4 5 6))
5
Jamocha&gt; (member$ (create$ 3 4) (create$ 1 2 3 4 5 6))
3
</example><parameter description="Value to search for in the list." optional="false" name="value" type="unknown"/><parameter description="List to search in." optional="false" name="list" type="LIST"/></function><function fixedParameterCount="true" description="Returns the item of a list at the specified index. Attention: Lists in Jamocha start with index 1." name="nth$" returnType="unknown"><example>Jamocha&gt; (nth$ 3 (create$ cheese milk eggs bread sausages))
eggs
</example><parameter description="Index of the item in the list to return. Needs to be in the bounds of someList." optional="false" name="index" type="LONG"/><parameter description="List to return the specified item from." optional="false" name="someList" type="LIST"/></function><function fixedParameterCount="false" description="Replaces a specified range in a list with (a) given value(s) and returns the modified list. The first integer defines the index of the first item to replace and the second integer defines the index of the last item to replace. The following arguments are inserted into the list, starting at the index of the first replaced item. If a list is given as replacement each item is inserted separately.
Attention: Lists in Jamocha start with index 1." name="replace$" returnType="LIST"><example>Jamocha&gt; (replace$ (create$ 42 123 911 4711 1) 2 4 112)
[42, 112, 1]
Jamocha&gt; (replace$ (create$ cheese eggs milk sausages) 3 4 (create$ bread ham))
[cheese, eggs, bread, ham]
</example><parameter description="List to replace a specific range in." optional="false" name="someList" type="LIST"/><parameter description="First item to replace in the List. Has to be smaller or equal to endIndex and within the bounds of the list." optional="false" name="startIndex" type="LONG"/><parameter description="Last item to replace in the List. Has to be greater or equal to startIndex and within the bounds of the list." optional="false" name="endIndex" type="LONG"/><parameter description="Value(s) used as replacement." optional="false" name="replacement" type="unknown"/></function><function fixedParameterCount="false" description="Replaces specific items in a list with a given replacement. Arguments can either be single items or lists of items.
If a list is given to be replaced, the items are only replaced if they appear in identical (correct and coherent) order in the first list.
The function walks through the first list and tries to match each position to any of the arguments that are to be replaced. If it finds a match it replaces the item(s) at the current position. Afterwards it moves on to the next position after the replacement and tries to match this position anew to any of the arguments that are to replaced.
Therefore the arguments are not necessarily processed in the order they are given, but replacements will not be matched recursively.
Returns a new list consisting of untouched and replaced items." name="replace-member$" returnType="LIST"><example>Jamocha&gt; (replace-member$ (create$ a b a b) (create$ a b a) a b)
[a, b, a, a, b, a, a, b, a, a, b, a]
Jamocha&gt; (replace-member$ (create$ a b a b) (create$ a b a) (create$ a b))
[a, b, a, a, b, a]
</example><parameter description="List to replace items in." optional="false" name="someList" type="LIST"/><parameter description="Replacement for the searchValue in the list." optional="false" name="replacement" type="unknown"/><parameter description="Value to search for and replace in the list." optional="false" name="searchValue" type="unknown"/></function><function fixedParameterCount="true" description="Returns all elements of a list except for the first one." name="rest$" returnType="LIST"><example>Jamocha&gt; (rest$ (create$ cheese milk eggs bread))
[milk, eggs, bread]
</example><parameter description="List to return rest from." optional="false" name="someList" type="LIST"/></function><function fixedParameterCount="true" description="Extracts a specified range from a list and returns a new list containing just the sub-sequence. The first integer defines the index of the first item to return and the second integer defines the index of the last item to return.
Attention: Lists in Jamocha start with index 1." name="subseq$" returnType="LIST"><example>Jamocha&gt; (subseq$ (create$ 42 123 911 4711 1) 2 4)
[123, 911, 4711]
</example><parameter description="List to return the subsequence from." optional="false" name="someList" type="LIST"/><parameter description="First item to return from the list. Has to be smaller or equal to endIndex and within the bounds of the list." optional="false" name="startIndex" type="LONG"/><parameter description="Last item to return from the list. Has to be greater or equal to startIndex and within the bounds of the list." optional="false" name="endIndex" type="LONG"/></function><function fixedParameterCount="true" description="Returns true if the first list is a subset of the second list, false otherwise. The order of the lists is not considered." name="subsetp" returnType="BOOLEAN"><example>Jamocha&gt; (subsetp (create$ 3 4) (create$ 1 2 3 4 5 6))
true
</example><parameter description="Subset to test for." optional="false" name="listOne" type="LIST"/><parameter description="List to search in." optional="false" name="listTwo" type="LIST"/></function><function fixedParameterCount="false" description="Returns the union of its arguments without duplicates." name="union$" returnType="LIST"><example>Jamocha&gt; (union$ (create$ a b c) (create$ e d a f) (create$ 1 2 d))
[a, b, c, e, d, f, 1, 2]
</example><parameter description="List to unify with the other arguments." optional="false" name="list" type="LIST"/></function></functiongroup><functiongroup name="IOFunctions"><function fixedParameterCount="false" description="Loads and executes one or more given files. Multiple arguments are separated by a blank. Files can be located on a local drive or on a remote machine accessible via http or some other protocol. Returns true on success." name="batch" returnType="BOOLEAN"><example>(batch samples/view-test.clp)</example><parameter description="File(s) to load and execute." optional="false" name="fileName" type="STRING"/></function><function fixedParameterCount="false" description="Loads and executes one or more given files. Multiple arguments are separated by a blank. Files can be located on a local drive or on a remote machine accessible via http or some other protocol. Returns true on success. In contrast to batch this function removes all activations after it finished reading the file(s)." name="load" returnType="BOOLEAN"><example>(batch samples/view-test.clp)</example><parameter description="File(s) to load and execute." optional="false" name="fileName" type="STRING"/></function><function fixedParameterCount="false" description="Reads a file from the given location and surrounds the content with (assert ... ). So a list of facts can be asserted into the rule engine with one single call. The result is true if any of the given files could be parsed successfully.Attention a corresponding Jamocha template must be defined in order to actually import thefacts into the engine." name="load-facts" returnType="BOOLEAN"><example>(deftemplate transaction
  (slot accountId (type STRING))
  (slot countryCode (type STRING))
  (slot cusip (type INTEGER))
  (slot issuer (type STRING))
  (slot total (type DOUBLE))
)
(load-facts samples/data.clp)
</example><parameter description="Path(s) to one or more file(s) containing facts without assert-call to be asserted." optional="false" name="fileName" type="STRING"/></function><function fixedParameterCount="false" description="Writes any number and type of arguments to the channel specified in the first argument. 't' indicates to send the output to the standard output device of the computer. Generally, this is the terminal. Printout concatenates all arguments after the channel without separation marks. A string, enclosed in double quotes, is handled as one single argument." name="printout" returnType="NONE"><example>Jamocha&gt; (printout t 'Jamocha rul' e z !)
NIL
</example><parameter description="Any value to print out." optional="false" name="value" type="unknown"/></function><function fixedParameterCount="false" description="Writes engine's deftemplates, defrules and facts into a file, which is compatible to the format expected by the batch function. Returns true iff everything could be dumped." name="dump" returnType="BOOLEAN"><example>(dump /tmp/jamochadump.clp)</example><parameter description="Output-file where to write the dump of the module." optional="false" name="output-file" type="STRING"/><parameter description="Module to be safed." optional="true" name="module" type="STRING"/></function></functiongroup><functiongroup name="RuleEngineFunctions"><function fixedParameterCount="false" description="Applies a given function to one or more given arguments." name="apply" returnType="unknown"><example>Jamocha&gt; (apply add 17 4)
21
Jamocha&gt; (apply explode$ 'My name is not earl.' ' not ')
['My name is not earl.']
</example><parameter description="Name of the function to apply." optional="false" name="functionName" type="IDENTIFIER"/><parameter description="Optional parameters for the function." optional="true" name="functionParameter" type="unknown"/></function><function fixedParameterCount="false" description="Allows the user to add a fact to the fact-list. Multiple facts may be asserted with each call. If the fact-list is being watched, an inform message is printed each time a fact is asserted.
Attention: In Jamocha there has to exist a corresponding template in order to assert a fact. " name="assert" returnType="FACT_ID"><example>Jamocha&gt; (deftemplate car (slot color)(slot speed))
true
Jamocha&gt; (assert (car (color 'red')(speed 200)))
f-1
Jamocha&gt; (facts)
(car
    (color 'red')
    (speed 200)
)
for a total of 1
</example><parameter description="Fact(s) to be asserted." optional="false" name="fact" type="unknown"/></function><function fixedParameterCount="false" description="Allows the user to add a temporal fact to the fact-list. If the fact-list is being watched, an inform message is printed each time a fact is asserted." name="assert-temporal" returnType="FACT_ID"><parameter description="Temporal fact(s) to be asserted." optional="false" name="temporalFact" type="unknown"/></function><function fixedParameterCount="true" description="Binds any value to a variable visible in the scope the bind takes place." name="bind" returnType="BOOLEAN"><example>Jamocha&gt; (bind ?helo 'Jamocha rulez!')
true
Jamocha&gt; (printout t ?helo)
NIL
</example><parameter description="Variable to bind the value to. Name should start with a '?': ?variableName ." optional="false" name="variable" type="IDENTIFIER"/><parameter description="Value to bind to the variable." optional="false" name="value" type="unknown"/></function><function fixedParameterCount="false" description="Clears the Rete engine. Removes all constructs and all associated data structures (such as facts and objects) from the Rete environment.
In case of a given argument it is parsed as identifier and only the constructs that are identified by it are removed.
Returns true on success." name="clear" returnType="BOOLEAN"><example>Jamocha&gt; (clear)
true
</example><parameter description="Optional identifier saying what to clear ('deffacts' or 'objects'), if not specified: all is cleared." optional="true" name="what" type="IDENTIFIER"/></function><function fixedParameterCount="false" description="TODO" name="defclass" returnType="BOOLEAN"><parameter description="Classname TODO." optional="false" name="classname" type="IDENTIFIER"/><parameter description="Template TODO." optional="true" name="template" type="IDENTIFIER"/><parameter description="Parent Template TODO." optional="true" name="parentTemplate" type="IDENTIFIER"/></function><function fixedParameterCount="false" description="Used to declare new functions in the shell. Deffunctions run interpreted and are mapped to existing functions. Returns true if the function could be declared. Returns false if the functioncould not be declared or already existed.Deffunction is used for functions that are declared in the shell. It is different than a function written in java. Deffunctions run interpreted and are mapped to existing functions. Returns true if the Function could be declared and false if not or if it already existed." name="deffunction" returnType="BOOLEAN"><example>Jamocha&gt; (deffunction minute-hand 'Returns the minutes of the actual time.' () (printout t 'The minute hand is pointing to ' (getminutes (now)) ' right now.'))
true
Jamocha&gt; (minute-hand)
NIL
Jamocha&gt; (deffunction is-hello (?x1) (eq 'hello' ?x1))
true
</example><parameter description="Name of the new function." optional="false" name="functionName" type="IDENTIFIER"/><parameter description="Optional Description of the new Function." optional="true" name="description" type="STRING"/><parameter description="Parameters for the Function." optional="false" name="parameters" type="IDENTIFIER"/><parameter description="Actions for the Function." optional="false" name="actions" type="unknown"/></function><function fixedParameterCount="false" description="Definstance asserts an object instance." name="definstance" returnType="BOOLEAN"><parameter description="Object to assert." optional="false" name="object" type="OBJECT"/><parameter description="Template for the object." optional="true" name="template" type="NONE"/></function><function fixedParameterCount="true" description="Defines a new module in the engine.
Defmodule enables the division of rules and facts into distinct groups called modules. Modules help to physically organize large numbers of rules into logical groups. Furthermore modules provide a control mechanism: The rules in a module fire only when that module has the focus, and only one module can be in focus at a time." name="defmodule" returnType="BOOLEAN"><example>Jamocha&gt; (defmodule PIZZAENV)
true
Jamocha&gt; (get-current-module)
PIZZAENV
</example><parameter description="Name for the new module" optional="false" name="name" type="IDENTIFIER"/></function><function fixedParameterCount="true" description="Defines a new rule in the currently focused module of the engine.
defrule has the following syntax:
(defrule rule_name 'optional_comment'
	(pattern_1)     ; Left-Hand Side (LHS)
	(pattern_2)     ; of the rule consisting of elements
		.           ; before the '=&gt;'
		.
		.
	(pattern_N)
=&gt;                 ; THEN arrow
	(action_1)      ; Right-Hand Side (RHS)
	(action_2)      ; of the rule consisting of elements
		.           ; after the '=&gt;'
		.
	(action_M)
)                  ; close defrule" name="defrule" returnType="BOOLEAN"><example>Jamocha&gt; (deftemplate customer
  (slot first)
  (slot last)
  (slot title)
  (slot address)
)
true
Jamocha&gt; (defrule rule
  (customer
    (first 'john')
  )
  =&gt;
  (printout t 'rule0 was fired' )
)
true
Jamocha&gt; (assert (customer (first 'john')(last 'doe')(address 'moon') ) )
f-1
Jamocha&gt; (fire)
1
</example><parameter description="Rule to be defined." optional="false" name="rule" type="OBJECT"/></function><function fixedParameterCount="true" description="Defines a new template in the currently focused module of the engine.
A template has the following syntax:
(deftemplate templ		;name of deftemplate relation
	'comment'			;optional comment in quotes
	(slot slot1name		;name of 1st field
	(type STRING)		;type of field (optional)
	(default ?someVar))	;default value of 1st field (optional)
	(slot slot2name		;name of 2nd field
	(type SYMBOL))		;type of field
		...
)						;close deftemplate" name="deftemplate" returnType="BOOLEAN"><example>Jamocha&gt; (deftemplate transact
  (slot accountId (type STRING))
  (slot countryCode (type STRING))
  (slot currentPrice (type DOUBLE))
  (slot issuer (type STRING))
  (slot lastPrice (type DOUBLE))
  (slot purchaseDate (type STRING))
  (slot total (type DOUBLE))
)
true
</example><parameter description="Template to be defined." optional="false" name="template" type="OBJECT"/></function><function fixedParameterCount="false" description="Used to echo variable bindings in the shell. Prints out one binding per line." name="echo" returnType="STRING"><example>Jamocha&gt; (bind ?testbind 'This is an echo and the binding of the variable ?testbind')
true
Jamocha&gt; (echo ?testbind)
This is an echo and the binding of the variable ?testbind

</example><parameter description="Binding to echo." optional="true" name="value" type="IDENTIFIER"/></function><function fixedParameterCount="false" description="Evaluates the string given in the first argument as though it was entered at the command prompt and returns the last result of the expression(s) (if any). An optional binding as second argument can be used to catch an exception and hold the error message." name="eval" returnType="unknown"><example>Jamocha&gt; (eval '(printout t BlackJack)' ?catchErr)
NIL
Jamocha&gt; (eval '(printout t \'This is BlackJack.\')')
NIL
Jamocha&gt; (bind ?x '(+ 17 4)')
true
Jamocha&gt; (eval ?x)
21
</example><parameter description="One or more commands in one string." optional="false" name="command" type="STRING"/><parameter description="Optional binding to hold the error message if an exception occurres." optional="true" name="errorBinding" type="IDENTIFIER"/></function><function fixedParameterCount="false" description="Evaluates the string given in the first argument as though it was entered at the command prompt and returns the last result of the expression(s) (if any). An optional binding as second argument can be used to catch an exception and hold the error message." name="eval-blocking" returnType="unknown"><example>Jamocha&gt; (eval-blocking '(printout t BlackJack)' ?catchErr)
NIL
Jamocha&gt; (eval-blocking '(printout t \'This is BlackJack.\')')
NIL
Jamocha&gt; (bind ?x '(+ 17 4)')
true
Jamocha&gt; (eval-blocking ?x)
21
</example><parameter description="One or more commands in one string." optional="false" name="command" type="STRING"/><parameter description="Optional binding to hold the error message if an exception occurres." optional="true" name="errorBinding" type="IDENTIFIER"/></function><function fixedParameterCount="true" description="Closes the engine." name="exit" returnType="NONE"><example>(exit)</example></function><function fixedParameterCount="true" description="Returns the value (fact) of the given fact-id or NIL if the given id doesn't exist." name="fact-id" returnType="FACT"><example>Jamocha&gt; (deftemplate car (slot color)(slot speed))
true
Jamocha&gt; (assert (car (color 'red')(speed 200)))
f-1
Jamocha&gt; (assert (car (color 'blue')(speed 150)))
f-2
Jamocha&gt; (assert (car (color 'green')(speed 100)))
f-3
Jamocha&gt; (fact-id 2)
(car
(color 'blue')
(speed 150)
)
</example><parameter description="Fact-Id to get fact from." optional="false" name="factId" type="unknown"/></function><function fixedParameterCount="true" description="Prints out all the facts which are currently asserted to the rule engine." name="facts" returnType="NONE"><example>Jamocha&gt; (facts)
for a total of 0
</example></function><function fixedParameterCount="true" description="Returns the value of a slot of a specific fact." name="fact-slot-value" returnType="unknown"><example>Jamocha&gt; (deftemplate car (slot color)(slot speed))
true
Jamocha&gt; (assert (car (color 'red')(speed 200)))
f-1
Jamocha&gt; (assert (car (color 'blue')(speed 150)))
f-2
Jamocha&gt; (assert (car (color 'green')(speed 100)))
f-3
Jamocha&gt; (fact-slot-value 1 color)
red
Jamocha&gt; (fact-slot-value 3 speed)
100
</example><parameter description="Fact to return the slot value from." optional="false" name="fact" type="unknown"/><parameter description="Name of the slot to get the value from." optional="false" name="slotName" type="IDENTIFIER"/></function><function fixedParameterCount="true" description="Returns the ID of the given fact or NIL if it wasn't found." name="find-fact-by-fact" returnType="FACT"><example>Jamocha&gt; (deftemplate car (slot color)(slot speed))
true
Jamocha&gt; (assert (car (color 'red')(speed 200)))
f-1
Jamocha&gt; (assert (car (color 'blue')(speed 150)))
f-2
Jamocha&gt; (assert (car (color 'green')(speed 100)))
f-3
Jamocha&gt; (find-fact-by-fact (car (color 'green') (speed 100)))
f-3
</example><parameter description="Fact to search for." optional="false" name="fact" type="FACT"/></function><function fixedParameterCount="false" description="Starts the execution of rules. If the optional argument is positive, execution will cease after the specified number of rule firings or when the agenda contains no more rule activations. If there are no arguments or the argument is a negative integer, execution will cease when the agenda contains no more rule activations. If the focus stack is empty the MAIN module is automatically in the current focus. Returns the number of rules fired." name="fire" returnType="LONG"><example>(fire)
(fire 7)</example><parameter description="Number of rules to fire at most." optional="true" name="ruleCount" type="LONG"/></function><function fixedParameterCount="true" description="Takes a CLIPS string as argument and uses the default parser to parse it. If the first statement is a function call, the FunctionMemory is checked wether a function with this name exists. If it does it returns true otherwise (or if the first statement is no function call) it returns false." name="function-exists" returnType="unknown"><example>Jamocha&gt; (function-exists '(cos)')
true
Jamocha&gt; (function-exists '(i-dont-exist)')
false
</example><parameter description="One command as one single string." optional="false" name="command" type="STRING"/></function><function fixedParameterCount="true" description="This function generates a XML-document, which describes the declared functions. If a filename is given, it only prints that to file and returns an empty string." name="functions-description" returnType="STRING"><parameter description="" optional="false" name="" type="NONE"/></function><function fixedParameterCount="true" description="Runs the Java garbage collector." name="gc" returnType="NONE"><example>Jamocha&gt; (gc)
NIL
</example></function><function fixedParameterCount="false" description="Generate facts will call the utility class with the Rule object and return an Object[] array of facts. Depending on the rule, there should be one or more deffacts or object instances. The way to use this is to bind the result or add it to a list." name="generate-facts" returnType="OBJECT"><parameter description="Name of the rule to generate facts from." optional="false" name="ruleName" type="IDENTIFIER"/><parameter description="If true the results are printed out." optional="true" name="echo" type="BOOLEAN"/></function><function fixedParameterCount="true" description="Returns the name of the module which is currently focused." name="get-current-module" returnType="IDENTIFIER"><example>Jamocha&gt; (get-current-module)
MAIN
</example></function><function fixedParameterCount="true" description="Returns the fact-ID of the given fact." name="get-fact-id" returnType="FACT_ID"><parameter description="Fact to return the ID of." optional="false" name="fact" type="FACT"/></function><function fixedParameterCount="true" description="Returns the Strategy of the current focus as String." name="get-strategy" returnType="STRING"><example>Jamocha&gt; (get-strategy)
DepthStrategy
</example></function><function fixedParameterCount="true" description="Used to turn on/off lazy agenda. That means the activations are not sorted when added to the agenda. Instead it is sorted when they are removed." name="lazy-agenda" returnType="NONE"><example>Jamocha&gt; (lazy-agenda)
NIL
</example><parameter description="If true lazy agenda is turned on." optional="false" name="lazy" type="BOOLEAN"/></function><function fixedParameterCount="true" description="Prints out a list of all bindings and defglobals defined in the current scope. The return value is NIL." name="list-bindings" returnType="NONE"><example>Jamocha&gt; (bind ?helo 'Jamocha rulez!')
true
Jamocha&gt; (list-bindings)
NIL
</example></function><function fixedParameterCount="true" description="Prints out the files and folders of a given directory. It is the same command asdir in DOS and ls in Unix. The return value is NIL." name="list-dir" returnType="NONE"><example>Jamocha&gt; (list-dir examples)
NIL
Jamocha&gt; (list-dir /var/tmp)
NIL
</example><parameter description="Directory to list files and folders of." optional="false" name="dir" type="STRING"/></function><function fixedParameterCount="true" description="Prints out a list of all defined functions. The return value is NIL." name="list-functions" returnType="NONE"><example>Jamocha&gt; (list-functions)
NIL
</example></function><function fixedParameterCount="true" description="Prints out the names of the rules and their comments. Returns NIL." name="list-rules" returnType="NONE"><example>Jamocha&gt; (list-rules)
NIL
</example></function><function fixedParameterCount="true" description="Prints out all defined templates in no specific order. The return value is NIL." name="list-templates" returnType="NONE"><example>Jamocha&gt; (list-templates)
NIL
</example></function><function fixedParameterCount="false" description="Loads one or more complete functiongroups into the engine. Returns true on success." name="load-function-group" returnType="BOOLEAN"><example>Jamocha&gt; (load-function-group adaptor datetime)
true
</example><parameter description="Functiongroup(s) to be loaded." optional="false" name="functionGroups" type="STRING"/></function><function fixedParameterCount="false" description="Loads one or more functions into the engine. Returns true on success." name="load-function" returnType="BOOLEAN"><parameter description="Function(s) to be be loaded." optional="false" name="function" type="STRING"/></function><function fixedParameterCount="false" description="MatchesFunction will print out all partial matches including alpha and beta nodes. If the function is called without any parameters, it prints out all the memories. If parameters are passed, the output will be filtered. Returns NIL." name="matches" returnType="NONE"><parameter description="Filter to apply to the output." optional="true" name="filter" type="STRING"/></function><function fixedParameterCount="true" description="Prints out the free memory currently available to the Java VM. Returns NIL." name="mem-free" returnType="NONE"><example>Jamocha&gt; (mem-free)
NIL
</example></function><function fixedParameterCount="true" description="Prints out the total memory currently available to the Java VM. Returns NIL." name="mem-total" returnType="NONE"><example>Jamocha&gt; (mem-total)
NIL
</example></function><function fixedParameterCount="true" description="Prints out the memory space currently in  use. Returns NIL." name="mem-used" returnType="NONE"><example>Jamocha&gt; (mem-used)
NIL
</example></function><function fixedParameterCount="false" description="Allows the user to modify template facts on the fact-list. Only one fact may be modified with a single modify statement. The modification of a fact is equivalent to retracting the present fact and asserting the modified fact. Returns true on success." name="modify" returnType="BOOLEAN"><example>Jamocha&gt; (deftemplate car (slot color)(slot speed))
true
Jamocha&gt; (assert (car (color 'red')(speed 200)))
f-1
Jamocha&gt; (assert (car (color 'blue')(speed 150)))
f-2
Jamocha&gt; (assert (car (color 'green')(speed 100)))
f-3
Jamocha&gt; (bind ?fact (fact-id 2))
true
Jamocha&gt; (echo ?fact)
(car
(color 'blue')
(speed 150)
)

Jamocha&gt; (modify ?fact (speed 500))
true
Jamocha&gt; (facts)
(car
    (color 'red')
    (speed 200)
)
(car
    (color 'blue')
    (speed 500)
)
(car
    (color 'green')
    (speed 100)
)
for a total of 3
</example><parameter description="Fact to modify." optional="false" name="fact" type="FACT"/><parameter description="Slot and new value which is changed in the given fact." optional="false" name="slot" type="SLOT"/></function><function fixedParameterCount="true" description="Prints out all the modules which are currently defined in the rule engine." name="modules" returnType="NONE"><example>Jamocha&gt; (defmodule TESTMODUL)
true
Jamocha&gt; (modules)
TESTMODUL
MAIN
for a total of 2

</example></function><function fixedParameterCount="false" description="Prints out one or more rules in a pretty format. Note the format may not be identical to what the user wrote. It is a normalized and cleaned up format." name="ppdefrule" returnType="NONE"><example>(deftemplate customer
  (slot first)
  (slot last)
  (slot title)
  (slot address)
)
(defrule rule
  (customer
    (first 'john')
  )
  =&gt;
  (printout t 'rule0 was fired' )
)
(ppdefrule rule)</example><parameter description="One or more rules to print out in a pretty format." optional="false" name="ruleName" type="IDENTIFIER"/></function><function fixedParameterCount="false" description="Prints out one or more templates of the module currently in focus in a pretty format. Note the format may not be identical to what the user wrote. It is a normalized and cleaned up format." name="ppdeftemplate" returnType="NONE"><example>Jamocha&gt; (deftemplate car (slot color)(slot speed))
true
Jamocha&gt; (ppdeftemplate car)
NIL
</example><parameter description="One or more templates to print out in a pretty format." optional="false" name="templateName" type="IDENTIFIER"/></function><function fixedParameterCount="true" description="Prints out the current profile information." name="print-profile" returnType="NONE"><example>Jamocha&gt; (print-profile)
NIL
</example></function><function fixedParameterCount="false" description="Turns on profiling. Provides basic profiling of assert, retract, add activation, remove activation, and fire. Returns NIL." name="profile" returnType="NONE"><example>(profile assert-fact fire)</example><parameter description="What to profile. One or several of: all, assert-fact, add-activation, fire, retract-fact or remove-activation." optional="false" name="profile" type="IDENTIFIER"/></function><function fixedParameterCount="true" description="Resets all facts and objects. Meaning that they are retracted and asserted anew." name="reset" returnType="NONE"><example>Jamocha&gt; (reset)
NIL
</example></function><function fixedParameterCount="true" description="Resets all facts only. Meaning that they are retracted and asserted again." name="reset-facts" returnType="NONE"><example>(reset-facts)</example></function><function fixedParameterCount="true" description="Resets all objects only. Meaning that they are retracted and asserted again." name="reset-objects" returnType="NONE"><example>(reset-objects)</example></function><function fixedParameterCount="false" description="Allows the user to remove facts from the fact-list. Multiple facts may be retracted with a single retract statement. The retraction of a fact also removes all rules that depend upon that fact for activation from the agenda. Retraction of a fact may also cause the retraction of other facts which receive logical support from the retracted fact. If the facts item is being watched, then an informational message will be printed each time a fact is retracted." name="retract" returnType="BOOLEAN"><example>Jamocha&gt; (clear)
true
Jamocha&gt; (deftemplate car (slot color)(slot speed))
true
Jamocha&gt; (assert (car (color 'red')(speed 200)))
f-1
Jamocha&gt; (assert (car (color 'blue')(speed 150)))
f-2
Jamocha&gt; (assert (car (color 'green')(speed 100)))
f-3
Jamocha&gt; (facts)
(car
    (color 'red')
    (speed 200)
)
(car
    (color 'blue')
    (speed 150)
)
(car
    (color 'green')
    (speed 100)
)
for a total of 3
Jamocha&gt; (retract 2)
true
Jamocha&gt; (facts)
(car
    (color 'red')
    (speed 200)
)
(car
    (color 'green')
    (speed 100)
)
for a total of 2
</example><parameter description="Fact-ID or fact to be retracted." optional="false" name="fact" type="unknown"/></function><function fixedParameterCount="true" description="Prints out the names of the rules and their comments. Returns NIL." name="list-rules" returnType="NONE"><example>Jamocha&gt; (list-rules)
NIL
</example></function><function fixedParameterCount="false" description="Saves all facts in the engine to a file, specified in the first argument.Facts can be sorted according to their deftemplates or fact-ids." name="save-facts" returnType="BOOLEAN"><example>(deftemplate car (slot color)(slot speed))
(assert (car (color 'red')(speed 200)))
(assert (car (color 'blue')(speed 150)))
(assert (car (color 'green')(speed 100)))
(save-facts /var/tmp/savetest.clp)
(save-facts /var/tmp/savetest2.clp template)</example><parameter description="Name of the file to store the facts in." optional="false" name="fileName" type="STRING"/><parameter description="If equal to 'template' the facts are sorted by their deftemplate otherwise by their fact-ids." optional="true" name="sorting" type="IDENTIFIER"/></function><function fixedParameterCount="true" description="A given Jamocha setting will be set to its default value." name="set-default" returnType="STRING"><example>(set-default watch-activations)</example><parameter description="Name of property to be reset" optional="false" name="property name" type="STRING"/></function><function fixedParameterCount="false" description="Sets the focus to the given module. If no argument is given the focus doesn't change. In either case the identifier of the current focus is returned." name="set-focus" returnType="IDENTIFIER"><example>Jamocha&gt; (defmodule MOCHA)
true
Jamocha&gt; (modules)
MAIN
MOCHA
for a total of 2

Jamocha&gt; (get-current-module)
MOCHA
Jamocha&gt; (set-focus MAIN)
MAIN
Jamocha&gt; (get-current-module)
MAIN
</example><parameter description="Focus to set in the engine." optional="true" name="focus" type="IDENTIFIER"/></function><function fixedParameterCount="false" description="Sets the default parser to the one given as first argument or prints out the current default parser, if no argument is given.
Note: Changing the parser during runtime only makes sense for StringChannels. StreamChannels must be reinitalized after changing the parser." name="set-parser" returnType="STRING"><example>(set-parser)</example><parameter description="New default parser to use." optional="true" name="parser" type="STRING"/></function><function fixedParameterCount="true" description="Jamocha settings can be set by this function." name="set-settings" returnType="STRING"><example>(set watch-activations true)</example><parameter description="Name of property to be set" optional="false" name="property name" type="STRING"/><parameter description="Property value" optional="false" name="property value" type="STRING"/></function><function fixedParameterCount="false" description="Sets the strategy of the current focus to the given argument. If no argument is provided a list of all available strategies is printed out. Returns true if the given strategy is found or no argument was provided and false if the strategy was not found." name="set-strategy" returnType="BOOLEAN"><example>Jamocha&gt; (set-strategy)
true
</example><parameter description="The Strategy to use" optional="true" name="strategy" type="STRING"/></function><function fixedParameterCount="true" description="Lets the CommandThread of the MessageRouter sleep for a given amount of time." name="sleep" returnType="NONE"><example>(sleep 1000)</example><parameter description="Time to sleep (in milliseconds)." optional="false" name="sleepTime" type="LONG"/></function><function fixedParameterCount="false" description="Captures the output to a file, and makes it easier to record what happens. This is inspired by Oracle SqlPlus spool function." name="spool" returnType="BOOLEAN"><example>(spool on /var/tmp/spool.clp)</example><parameter description="Use 'on' or 'off' for spooling." optional="false" name="switch" type="STRING"/><parameter description="Filename to spool to, if switch is 'on'." optional="true" name="fileName" type="STRING"/></function><function fixedParameterCount="true" description="Generates the facts for a rule, asserts them and calls (fire)." name="test-rule" returnType="BOOLEAN"><parameter description="Rule that will be tested." optional="false" name="ruleName" type="STRING"/></function><function fixedParameterCount="true" description="Removes a rule in the engine. Returns true on success." name="undefrule" returnType="BOOLEAN"><example>Jamocha&gt; (deftemplate customer
  (slot first)
  (slot last)
  (slot title)
  (slot address)
)
true
Jamocha&gt; (defrule rule
  (customer
    (first 'john')
  )
=&gt;
  (printout t 'rule was fired' )
)
true
Jamocha&gt; (assert (customer (first 'john')(last 'doe')(address 'moon') ) )
f-1
Jamocha&gt; (fire)
1
Jamocha&gt; (rules)
NIL
Jamocha&gt; (undefrule rule)
true
Jamocha&gt; (rules)
NIL
</example><parameter description="Rule that will be removed." optional="false" name="ruleName" type="STRING"/></function><function fixedParameterCount="true" description="Removes a template wich is currentlich not in use from the engine. Returns true on success and false otherwise (e.g. if the template is still in use by a fact or a rule)." name="undeftemplate" returnType="BOOLEAN"><example>Jamocha&gt; (deftemplate transact
  (slot accountId (type STRING))
  (slot countryCode (type STRING))
  (slot currentPrice (type DOUBLE))
  (slot issuer (type STRING))
  (slot lastPrice (type DOUBLE)
)  (slot purchaseDate (type STRING))
  (slot total (type DOUBLE))
)
true
Jamocha&gt; (templates)
NIL
Jamocha&gt; (undeftemplate transact)
false
Jamocha&gt; (templates)
NIL
</example><parameter description="Template to be removed." optional="false" name="templateName" type="STRING"/></function><function fixedParameterCount="false" description="Turns off profiling. There is the choice to turn off profiling of assert, retract, add activation, remove activation, and fire. Returns NIL." name="unprofile" returnType="NONE"><example>(profile all)
(deftemplate templ1 (slot name))
(print-profile)
(unprofile assert-fact)</example><parameter description="What to unprofile. One or several of: all, assert-fact, add-activation, fire, retract-fact or remove-activation." optional="false" name="unprofile" type="IDENTIFIER"/></function><function fixedParameterCount="false" description="Allows users to remove the watch of different engine processes, like activations, facts and rules." name="unwatch" returnType="NONE"><example>Jamocha&gt; (watch facts)
NIL
Jamocha&gt; (deftemplate templ2 (slot name))
true
Jamocha&gt; (assert (templ2 (name test1)) (templ2 (name test2)))
f-2
Jamocha&gt; (unwatch facts)
NIL
Jamocha&gt; (assert (templ2 (name test3)))
f-3
</example><parameter description="What to unwatch. One or several of: all, facts, activations or rules." optional="false" name="unwatch" type="IDENTIFIER"/></function><function fixedParameterCount="true" description="Sets rule validation to true or false. Returns true on success." name="validate-rule" returnType="BOOLEAN"><example>Jamocha&gt; (validate-rule true)
true
Jamocha&gt; (deftemplate customer
  (slot first)
  (slot last)
  (slot title)
  (slot address)
)
true
Jamocha&gt; (defrule rule
  (customer
    (first 'john')
  )
  =&gt;
  (printout t 'rule0 was fired' )
)
true
Jamocha&gt; (assert (customer (first 'john')(last 'doe')(address 'moon') ) )
f-1
Jamocha&gt; (fire)
1
</example><parameter description="'true' or 'false'" optional="false" name="switch" type="BOOLEAN"/></function><function fixedParameterCount="true" description="Prints out the version of Jamocha. Returns NIL." name="version" returnType="NONE"><example>Jamocha&gt; (version)
NIL
</example></function><function fixedParameterCount="true" description="Prints the rete network in text mode" name="view" returnType="NONE"><example>(view)</example></function><function fixedParameterCount="true" description="Prints the rete network in text view" name="text-view" returnType="NONE"><example>(text-view)</example></function><function fixedParameterCount="false" description="Allows users to watch different engine processes, likes activations, facts and rules." name="watch" returnType="NONE"><example>Jamocha&gt; (watch facts)
NIL
Jamocha&gt; (deftemplate templ2 (slot name))
true
Jamocha&gt; (assert (templ2 (name test1)) (templ2 (name test2)))
f-2
</example><parameter description="What to watch. One or several of: all, facts, activations, rules or none.Value is not stored. If you want to do so use (set) function or GUI settings instead." optional="false" name="watch" type="IDENTIFIER"/></function></functiongroup><functiongroup name="CompareFunctions"><function fixedParameterCount="false" description="Any-eq is used to compare a literal value against one or more bindings. If any of the bindings is equal to the constant value, the function returns true." name="any-eq" returnType="BOOLEAN"><parameter description="Literal value that should be compared to the other parameters." optional="false" name="value" type="unknown"/><parameter description="Value that should be compared to the first parameter." optional="true" name="value" type="unknown"/></function><function fixedParameterCount="false" description="Eq is used to compare a literal value against one or more other values. If all of the other values are equal, the function returns true. Eq should be used if the type of its arguments is not known in adavance." name="eq" returnType="BOOLEAN"><parameter description="Literal value to be compared to all other parameters." optional="false" name="value" type="unknown"/><parameter description="Value to be compared to the first parameter." optional="true" name="value" type="unknown"/></function><function fixedParameterCount="false" description="Greater will compare two or more numeric values and return true, if the (n-1)th value is greater than the nth value." name="greater" returnType="BOOLEAN"><example>Jamocha&gt; (greater 84 22 1)
true
</example><parameter description="Number that will be compared to the other parameters." optional="false" name="number" type="NUMBER"/><parameter description="Number that will be compared to the other parameters." optional="true" name="number" type="NUMBER"/></function><function fixedParameterCount="false" description="GreaterOrEqual will compare two or more numeric values and return true, if the (n-1)th value is greater than or equal to the nth value." name="greaterOrEqual" returnType="BOOLEAN"><example>Jamocha&gt; (greaterOrEqual 84 2 2 1)
true
</example><parameter description="Number that will be compared to the other parameters." optional="false" name="number" type="NUMBER"/><parameter description="Number that will be compared to the other parameters." optional="true" name="number" type="NUMBER"/></function><function fixedParameterCount="false" description="Less will compare two or more numeric values and return true, if the (n-1)th value is less than the nth value." name="less" returnType="BOOLEAN"><example>Jamocha&gt; (less 1 22 84)
true
</example><parameter description="Number that will be compared to the other parameters." optional="false" name="number" type="NUMBER"/><parameter description="Number that will be compared to the other parameters." optional="true" name="number" type="NUMBER"/></function><function fixedParameterCount="false" description="LessOrEqual will compare two or more numeric values and return true, if the (n-1)th value is less than or equal to the nth value." name="lessOrEqual" returnType="BOOLEAN"><example>Jamocha&gt; (lessOrEqual 1 2 2 84)
true
</example><parameter description="Number that will be compared to the other parameters." optional="false" name="number" type="NUMBER"/><parameter description="Number that will be compared to the other parameters." optional="true" name="number" type="NUMBER"/></function><function fixedParameterCount="false" description="Neq is used to compare a literal value against one or more other values. If all of the other values are not equal, the function returns true. Neq should be used if the type of its arguments is not known in adavance." name="neq" returnType="BOOLEAN"><parameter description="Literal value to be compared to all other parameters." optional="false" name="value" type="unknown"/><parameter description="Value to be compared to the first parameter." optional="true" name="value" type="unknown"/></function></functiongroup></functiongroups>