
!List of functions

!!JavaFunctions
!!!instanceof
!!!!Description
Tests whether an object given as first argument is of a certain type, specified in the second argument. Returns true if this is the case, false otherwise.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<OBJECT>+] objectObject to test.\\

[+<STRING>+] className of the class to test for.\\

----

!!!load-package
!!!!Description
Creates a Java object and returns true on success.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] classNameClassname of the object to create.\\

----

!!!member
!!!!Description
Calls a method of a specified object. Returns the resulting value of the method or false.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<unknown>+]
!!!!Parameter

[+<OBJECT>+] objectObject to call the method of.\\

[+<STRING>+] methodMethod to call.\\

[+<OBJECT>+] parameterOne or more parameters for the method.\\

----

!!!new
!!!!Description
Creates a Java object and returns it. Searches for the constructor that accepts the appropriate number of parameters.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<OBJECT>+]
!!!!Parameter

[+<OBJECT>+] objectObject to instantiate.\\

[+<OBJECT>+] parameterOne or more parameters for the constructor.\\

[+<OBJECT>+] parameterOne or more parameters for the constructor.\\

----

!!StringFunctions
!!!str-cat
!!!!Description
Concatenates two or more strings into one string and returns the new string.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<STRING>+] stringString to be concatenated with the strings from the other arguments.\\

!!!!Example
@@Jamocha> (str-cat 'Jamocha ' 'rulez' '!!!')\\
Jamocha rulez!!!\\
@@

----

!!!str-compare
!!!!Description
Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence of the first argument is compared to the character sequence of thesecond argument. Returns a negative integer if the first string lexicographically precedes the second string. Returns a positive integer if the first string lexicographically follows the second string. Returns 0 if the strings are equal.  (Definition of lexicographic ordering: Two strings are different, when they have eitherdifferent characters at some index, or their lengths differ, or both. If they have different characters at one or more index positions, then the string whose character at the smallest differing index position k has the smaller value, as determined by using the < operator, lexicographically precedes the other string. If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string.) \\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<STRING>+] firstStringString to compare to the second string.\\

[+<STRING>+] secondStringString to compare to the first string.\\

!!!!Example
@@Jamocha> (str-compare 'Jamocha' 'Jamocha')\\
0\\
Jamocha> (str-compare 'Jamocha' 'Jamocho')\\
-14\\
Jamocha> (str-compare 'Jamocha' 'Jamicha')\\
6\\
Jamocha> (str-compare 'Jamocha' 'Jamochaaaa')\\
-3\\
Jamocha> (str-compare 'Jamochaaaa' 'Jamocha')\\
3\\
@@

----

!!!str-index
!!!!Description
Returns the position index of the first occurrence of the second string inside the first string. This function is case sensitive. Returns -1 if no such substring is found in the first argument. Index positions in a string start with 0.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<STRING>+] firstStringString to search in.\\

[+<STRING>+] secondStringSubstring to search for.\\

!!!!Example
@@Jamocha> (str-index 'Jamocha' 'Jam')\\
0\\
Jamocha> (str-index 'Jamocha' 'Mocha')\\
-1\\
Jamocha> (str-index 'Jamocha' 'mocha')\\
2\\
@@

----

!!!str-length
!!!!Description
Returns the length of a string as a long.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<STRING>+] stringString to get its length from.\\

!!!!Example
@@Jamocha> (str-length 'Jamocha really ruleZ!!!')\\
23\\
@@

----

!!!str-lower
!!!!Description
Returns the given string in lowercase alphabetic characters.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<STRING>+] stringString to transform to lowercase.\\

!!!!Example
@@Jamocha> (str-lower 'JaMoChA')\\
jamocha\\
@@

----

!!!str-replace
!!!!Description
Replaces the first substring of the target string, given as first argument, that matches the regular expression given as second argument with the replacement from thethird argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<STRING>+] targetStringString where the replacement takes place.\\

[+<STRING>+] searchStringSubstring to search for (as regular expression).\\

[+<STRING>+] replStringReplacement string.\\

!!!!Example
@@Jamocha> (str-replace 'Jamocha' 'm[io]ch' 'maic')\\
Jamaica\\
@@

----

!!!str-replace-all
!!!!Description
Replaces the all substrings of the target string, given as first argument, that match the regular expression given as second argument with the replacement from the third argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<STRING>+] targetStringString where the replacement takes place.\\

[+<STRING>+] searchStringSubstring to search for (as regular expression).\\

[+<STRING>+] replStringReplacement string.\\

!!!!Example
@@Jamocha> (str-replace-all 'Jamocha' 'm[^io]ch' 'maic')\\
Jamocha\\
@@

----

!!!str-trim
!!!!Description
Returns a copy of the given string where leading and following blanks are omitted.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<STRING>+] stringString to trim.\\

!!!!Example
@@Jamocha> (str-trim '   Ja mo cha      ')\\
Ja mo cha\\
@@

----

!!!str-upper
!!!!Description
Returns the given string in uppercase alphabetic characters.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<STRING>+] stringString to transform to uppercase.\\

!!!!Example
@@Jamocha> (str-upper 'JaMoChA')\\
JAMOCHA\\
@@

----

!!!sub-string
!!!!Description
Returns a new string that is a substring of the string given as third argument. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex. Index positions in a string start with 0.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<LONG>+] beginIndexFirst index of the substring. Has to be smaller to endIndex and within the bounds of the string.\\

[+<LONG>+] endIndexLast +1 index of the substring. Has to be greater to endIndex and within the bounds of the string (max: last position of the string +1).\\

[+<STRING>+] stringString to get the substring from.\\

!!!!Example
@@Jamocha> (sub-string 0 2 'Jamocha')\\
Ja\\
Jamocha> (sub-string 2 7 'Jamocha')\\
mocha\\
@@

----

!!MathFunctions
!!!abs
!!!!Description
Returns the absolute value of its numeric argument. The return type depends on the type of the argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NUMBER>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to get the absolute value from.\\

!!!!Example
@@Jamocha> (abs -57.39)\\
57.39\\
@@

----

!!!acos
!!!!Description
Returns the arc cosine of its numeric argument. The return value is an angle expressed in radians in the range of 0.0 through pi (3.141592653589793..)\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value in the range of -1.0 through 1.0.\\

!!!!Example
@@Jamocha> (acos -0.7563654)\\
2.4285352259830364\\
@@

----

!!!add
!!!!Description
Returns the sum of its numeric arguments. This function can be called with the identifier 'add' or '+'. Each argument has to be a numeric expression. The return type depends on the types of the arguments, it returns a double if any of its arguments is a double, otherwise it returns a long.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NUMBER>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric values (at least one) to be added up.\\

!!!!Example
@@Jamocha> (+ 7 8.56 -4.3)\\
11.260000000000002\\
@@

----

!!!asin
!!!!Description
Returns the arc sine of its numeric argument. The return value is an angle expressed in radians in the range of -pi/2 through pi/2.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value in the range of -1.0 through 1.0.\\

!!!!Example
@@Jamocha> (asin -0.7563654)\\
-0.8577388991881397\\
@@

----

!!!atan
!!!!Description
Returns the arc tangent of its numeric argument. The return value is an angle expressed in radians in the range of -pi/2 through pi/2.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to get the arc tangent from (no restrictions in the domain range).\\

!!!!Example
@@Jamocha> (atan -3.14)\\
-1.2624806645994682\\
@@

----

!!!ceil
!!!!Description
Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and equal to a mathematical integer.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to get the ceiling from.\\

!!!!Example
@@Jamocha> (ceil 2.379079)\\
3.0\\
@@

----

!!!cos
!!!!Description
Returns the trigonometric cosine of an angle.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] angleAngle, in radians.\\

!!!!Example
@@Jamocha> (cos 0)\\
1.0\\
@@

----

!!!cosh
!!!!Description
Returns the hyperbolic cosine of a numeric argument. The hyperbolic cosine of x is defined to be (e^x + e^(-x))/2 where e is Euler's number.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to get the hyperbolic cosine from.\\

!!!!Example
@@Jamocha> (cosh -0.08646678676)\\
1.0037405822755834\\
@@

----

!!!deg-rad
!!!!Description
Converts an angle measured in degrees to an approximately equivalent angle measured in radians.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] angleAngle, in degrees.\\

!!!!Example
@@Jamocha> (deg-rad 180)\\
3.141592653589793\\
@@

----

!!!divide
!!!!Description
Returns the value of the first argument divided by each of the subsequent arguments. This function can be called with the identifier 'divide' or '/'.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NUMBER>+]
!!!!Parameter

[+<NUMBER>+] dividendNumeric value which is divided by the following arguments.\\

[+<NUMBER>+] divisorNumeric values which divide the first argument or the result of the previous divisions respectively.\\

!!!!Example
@@Jamocha> (/ 27 3 -4.5)\\
-2.0\\
@@

----

!!!e
!!!!Description
Returns e, the base of the natural logarithm.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (e)\\
2.718281828459045\\
@@

----

!!!evenp
!!!!Description
Returns true, if the argument is an even number, otherwise returns false.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to test.\\

!!!!Example
@@Jamocha> (evenp 42)\\
true\\
@@

----

!!!exp
!!!!Description
Returns Euler's number e raised to the power its numeric argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberExponent\\

!!!!Example
@@Jamocha> (exp -2)\\
0.1353352832366127\\
@@

----

!!!floor
!!!!Description
Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and equal to a mathematical integer.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to get the floor from.\\

!!!!Example
@@Jamocha> (floor 6.7496)\\
6.0\\
@@

----

!!!log
!!!!Description
Returns the natural logarithm (base e) of its numeric argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to get the natural logarithm from.\\

!!!!Example
@@Jamocha> (log 2.7)\\
0.9932517730102834\\
@@

----

!!!log10
!!!!Description
Returns the base 10 logarithm of its numeric argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to get the base 10 logarithm from.\\

!!!!Example
@@Jamocha> (log10 10)\\
1.0\\
@@

----

!!!max
!!!!Description
Returns the value of its greatest numeric argument. Each argument has to be a numeric expression. The return type is either an integer or float depending on the type of the greatest argument.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NUMBER>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric values (at least one) to get the maximum from.\\

!!!!Example
@@Jamocha> (max 87 -.3 777 445 9023 -75555)\\
9023\\
@@

----

!!!min
!!!!Description
Returns the value of its smallest numeric argument. Each argument has to be a numeric expression. The return type is either an integer or float depending on the type of the smallest argument.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NUMBER>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric values (at least one) to get the minimum from.\\

!!!!Example
@@Jamocha> (min 7834 -1 23 80.87583)\\
-1\\
@@

----

!!!mod
!!!!Description
Returns the remainder of an integer division.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] dividendNumeric value which is divided by the following argument.\\

[+<NUMBER>+] divisorNumeric value which divides the first argument.\\

!!!!Example
@@Jamocha> (mod 17 3)\\
2\\
@@

----

!!!multiply
!!!!Description
Returns the product of its numeric arguments. Each argument has to be a numeric expression. The return type is a double if any of its arguments is a double, otherwise it is a long.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NUMBER>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric values (at least one) to multiply with each other.\\

!!!!Example
@@Jamocha> (multiply 11 7 -3)\\
-231\\
@@

----

!!!oddp
!!!!Description
Returns true, if the argument is an odd number, otherwise returns false.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to test.\\

!!!!Example
@@Jamocha> (oddp 77.0)\\
true\\
@@

----

!!!pi
!!!!Description
Returns pi, the ratio of the circumference of a circle to its diameter.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (rad-deg (pi))\\
180.0\\
@@

----

!!!pow
!!!!Description
Returns the value of the first mumeric argument raised to the power of the following numeric arguments.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] baseNumeric value, base for the calculation.\\

[+<NUMBER>+] exponent(s)Numeric values, exponent(s) for the calculation\\

!!!!Example
@@Jamocha> (pow 2 3 2 0.5)\\
8.0\\
@@

----

!!!rad-deg
!!!!Description
Converts an angle measured in radians to an approximately equivalent angle measured in degrees.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] angleAngle, in radians.\\

!!!!Example
@@Jamocha> (rad-deg -0.7853981633974483)\\
-45.0\\
@@

----

!!!random
!!!!Description
Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (asin (random))\\
0.7262562794088415\\
@@

----

!!!rint
!!!!Description
Returns the double value closest to the numeric argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to get closest double value for.\\

!!!!Example
@@Jamocha> (rint .50000001)\\
1.0\\
@@

----

!!!round
!!!!Description
Returns the closest int to the numeric argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to round.\\

!!!!Example
@@Jamocha> (round 0.752343)\\
1.0\\
@@

----

!!!signum
!!!!Description
Returns -1.0 if the argument is negative, 1.0 if the argument is positive and 0 if the argument is 0.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value to get the signum from.\\

!!!!Example
@@Jamocha> (signum 7)\\
1.0\\
@@

----

!!!sin
!!!!Description
Returns the trigonometric sine of an angle.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] angleAngle, in radians.\\

!!!!Example
@@Jamocha> (sin -1.567)\\
-0.9999927939600877\\
@@

----

!!!sinh
!!!!Description
Returns the hyperbolic sine of a numeric argument. The hyperbolic sine of x is defined to be (e^x - e^(-x))/2 where e is Euler's number.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] angleNumeric value to get the hyperbolic sine from.\\

!!!!Example
@@Jamocha> (sinh 9.820345)\\
9202.199554641053\\
@@

----

!!!sqrt
!!!!Description
Returns the positive square root value of its numeric argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value, positive or equal to +/-0.0, to get the square root value from.\\

!!!!Example
@@Jamocha> (sqrt 169)\\
13.0\\
@@

----

!!!subtract
!!!!Description
Returns the value of the first numeric argument minus the sum of all subsequent numeric arguments. This function can be called with the identifier 'subtract' or '-'\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NUMBER>+]
!!!!Parameter

[+<NUMBER>+] numberNumeric value from which to subtract all subsequent arguments.\\

!!!!Example
@@Jamocha> (subtract 15 4 3 -6)\\
14\\
Jamocha> (- 15 4 3 -6)\\
14\\
@@

----

!!!tan
!!!!Description
Returns the trigonometric tangent of an angle.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] angleAngle, in radians.\\

!!!!Example
@@Jamocha> (tan (/ (pi) 2))\\
1.633123935319537E16\\
@@

----

!!!tanh
!!!!Description
Returns the hyperbolic tangent of a numeric argument. The hyperbolic tangent of x is defined to be sinh(x)/cosh(x).\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] angleNumeric value to get the hyperbolic tangent from.\\

!!!!Example
@@Jamocha> (tanh -6.98263)\\
-0.999998278154161\\
@@

----

!!HelpFunctions
!!!example
!!!!Description
Prints out an example for the function given as argument and executes it in the rule engine. Note: Don't use this function in your production environment as templates, rules and facts might be added, removed or modified.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<IDENTIFIER>+] functionName of the function to show an example for.\\

!!!!Example
@@Jamocha> (example add)\\
NIL\\
@@

----

!!!usage
!!!!Description
Prints out a short usage for a function name passed as argument. If no argument is passed the usage of this usage function itself is printed.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<IDENTIFIER>+] functionName of the function to show the usage of.\\

!!!!Example
@@Jamocha> (usage)\\
(usage)\\
Jamocha> (usage member$)\\
(member$)\\
@@

----

!!AdaptorFunctions
!!!jdbclink
!!!!Description
Imports or exports facts to and from a database via a jdbc link. On import for each line of the DB-table a fact of a corresponding Jamocha template is asserted. Therefore an adequate template has to be defined before an import can take place. On export for each fact in a fact-list a new record is inserted into the DB-table or an existing record is updated (according to the contents of the primary key). The facts have to be based on a well-defined template. Exporting incomplete templates may cause inconsistencies.Returns true on success\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<FACT_ID>+] jdbclinkFact describing the jdbc link connection to use.\\

[+<STRING>+] operationOperation is either 'import' or 'export'.\\

[+<LIST>+] factsOn export: fact-list to export. On import: list of jdbccondition-facts for filtering.\\

!!!!Example
@@(deftemplate templ (slot a) (slot b) (slot c) (slot foo) )\\
(jdbclink-init)\\
(bind ?mylink\\
	(assert\\
		(jdbclink\\
			(JDBCdriver 'com.mysql.jdbc.Driver')\\
			(ConnectionName 'db')\\
			(TableName 'test')\\
			(TemplateName 'templ')\\
			(Username 'jamocha')\\
			(Password 'geheim')\\
			(JDBCurl 'jdbc:mysql://134.130.113.67:3306/jamocha')\\
		)\\
	)\\
)\\
(bind ?myfilter\\
	(assert\\
		(jdbccondition\\
			(SlotName 'foo')\\
			(BooleanOperator '>')\\
			(Value 2007-04-27 19:00+1)\\
		)\\
	)\\
)\\
(jdbclink ?mylink 'import' (create$ ?myfilter))\\
\\
(deftemplate templ2 (slot a) (slot b) (slot c) )\\
(jdbclink-init)\\
(bind ?mylink\\
	(assert\\
		(jdbclink\\
				(JDBCdriver 'com.mysql.jdbc.Driver')\\
				(ConnectionName 'db')\\
				(TableName 'test')\\
				(TemplateName 'templ2')\\
				(Username 'jamocha')\\
				(Password 'geheim')\\
				(JDBCurl 'jdbc:mysql://134.130.113.67:65306/jamocha')\\
		)\\
	)\\
)\\
(assert (templ2 (a 99) (b 99) (c 'neunviermal')) )\\
(jdbclink ?mylink 'export' '3'  )@@

----

!!!jdbclink-init
!!!!Description
Initializes the JDBC adaptor by defining the jdbclink and jdbccondition template. Returns true on success.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter
"none"
!!!!Example
@@(deftemplate templ (slot a) (slot b) (slot c) (slot foo) )\\
(jdbclink-init)\\
(assert\\
	(jdbclink\\
		(JDBCdriver 'com.mysql.jdbc.Driver')\\
		(ConnectionName 'db')\\
		(TableName 'test')\\
		(TemplateName 'templ')\\
		(Username 'jamocha')\\
		(Password 'secret')\\
		(JDBCurl 'jdbc:mysql://134.130.113.67:3306/jamocha')\\
	)\\
)\\
(assert\\
	(jdbccondition\\
		(SlotName 'foo')\\
		(BooleanOperator '>')\\
		(Value 2007-04-27 19:00+1)\\
	)\\
)@@

----

!!!iteratorimporter
!!!!Description
Imports facts from an external, user-defined iterator to the rete engine. The external iterator isspecified in the first argument and needs to be a user-implementation of a subclass of org.jamocha.rete.util.DeffactIterator.  The function generates a mapping from the config-fact given in the second argument. After that itasserts a fact from each deffact the iterator returns. Returns true, iff everything went fine.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<STRING>+] DeffactIteratorClassUser-defined iterator, class name of a subclass of org.jamocha.rete.util.DeffactIterator.\\

[+<FACT_ID>+] ConfigFactConfig-fact, to generate a mapping for the import from.\\

!!!!Example
@@Jamocha> (deftemplate fibonacciconfig (slot max))\\
true\\
Jamocha> (bind ?config	(assert	(fibonacciconfig (max '1000'))))\\
true\\
Jamocha> (iteratorimporter 'org.jamocha.sampleimplementations.DeffactFibonacciIterator' ?config)\\
false\\
Jamocha> (facts)\\
(_initialFact\\
)\\
(fibonacciconfig\\
    (max '1000')\\
)\\
for a total of 2\\
@@

----

!!!iteratorexporter
!!!!Description
Exports facts from the rete engine to an external location. The external location is specified in the first argument and needs to be an user-implementation of a subclass of org.jamocha.rete.util.ExportHandler. The function first generates a mapping from the config-fact given in the second argument. After that it exports all facts from the fact-list given as third argument via the iterator.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<STRING>+] ExportHandlerClassExternal location, class name of a subclass of org.jamocha.rete.util.ExportHandler.\\

[+<FACT_ID>+] ConfigFactConfig-fact, to generate the mapping for the export from.\\

[+<LIST>+] FactsToExportFact-list to export via the iterator.\\

!!!!Example
@@Jamocha> (deftemplate a 	(slot horst))\\
true\\
Jamocha> (deftemplate b	(slot heiner))\\
true\\
Jamocha> (deftemplate c	(slot ory))\\
true\\
Jamocha> (deftemplate d	(slot krautsalat))\\
true\\
Jamocha> (bind ?horst (assert (a (horst 1))))\\
true\\
Jamocha> (bind ?heiner1 (assert	(b (heiner 13))))\\
true\\
Jamocha> (bind ?heiner2	(assert	(b (heiner 1))))\\
true\\
Jamocha> (bind ?ory	(assert	(c (ory 4711))))\\
true\\
Jamocha> (bind ?krautsalat (assert (d (krautsalat 11))))\\
true\\
Jamocha> (deftemplate config (slot removeSlot))\\
true\\
Jamocha> (bind ?config (assert (config (removeSlot 'heiner'))))\\
true\\
Jamocha> (iteratorexporter 'org.jamocha.sampleimplementations.SampleExportHandler'  ?config (create$ ?horst ?heiner1 ?ory ?krautsalat))\\
-1\\
@@

----

!!DateTimeFunctions
!!!between
!!!!Description
Returns true if the given DateTime arguments are in increasing chronological order.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<DATETIME>+] datetimeDateTime to compare to the other parameters.\\

!!!!Example
@@Jamocha> (between 2007-06-04 16:01:21 2007-07-07 19:07:49 (now))\\
true\\
@@

----

!!!datetime2timestamp
!!!!Description
Returns the Timestamp in milliseconds of the given DateTime argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<DATETIME>+] datetimeDateTime to convert into milliseconds (Timestamp).\\

!!!!Example
@@Jamocha> (datetime2timestamp 2007-06-04 16:01:21)\\
1180972881000\\
@@

----

!!!getday
!!!!Description
Returns the day-field from the given DateTime argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<DATETIME>+] datetimeDateTime to get the day from.\\

!!!!Example
@@Jamocha> (getday 2007-06-04 17:10:47)\\
4\\
@@

----

!!!getgmtoffset
!!!!Description
Returns the GMT Offset-field from the given DateTime argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<DATETIME>+] datetimeDateTime to get the GMT Offset from.\\

!!!!Example
@@Jamocha> (getgmtoffset 2007-06-04 17:14:06+5)\\
5\\
@@

----

!!!gethours
!!!!Description
Returns the hours-field from the given DateTime argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<DATETIME>+] datetimeDateTime to get the hours from.\\

!!!!Example
@@Jamocha> (gethours 2007-06-04 17:14:06)\\
17\\
@@

----

!!!getminutes
!!!!Description
Returns the minutes-field from the given DateTime argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<DATETIME>+] datetimeDateTime to get the minutes from.\\

!!!!Example
@@Jamocha> (getminutes 2007-06-04 17:14:06)\\
14\\
@@

----

!!!getmonth
!!!!Description
Returns the month-field from the given DateTime argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<DATETIME>+] datetimeDateTime to get the month from.\\

!!!!Example
@@Jamocha> (getmonth 2007-06-04 17:14:06)\\
6\\
@@

----

!!!getseconds
!!!!Description
Returns the seconds-field from the given DateTime argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<DATETIME>+] datetimeDateTime to get the seconds from.\\

!!!!Example
@@Jamocha> (getseconds 2007-06-04 17:14:06)\\
6\\
@@

----

!!!getyear
!!!!Description
Returns the year-field from the given DateTime argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<DATETIME>+] datetimeDateTime to get the year from.\\

!!!!Example
@@Jamocha> (getyear 2007-06-04 17:14:06)\\
2007\\
@@

----

!!!ms-time
!!!!Description
Returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (ms-time)\\
1236164094771\\
@@

----

!!!now
!!!!Description
Returns the DateTime-Object from the current date and time.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DATETIME>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (now)\\
2009-03-04 11:54:54.773+01\\
Jamocha> (getseconds (now))\\
54\\
@@

----

!!!timestamp2datetime
!!!!Description
Returns the DateTime-Object of the given Timestamp argument.\\

This function [+has+] fixed parameter count.\\
Return type is [+<DATETIME>+]
!!!!Parameter

[+<LONG>+] timestampTimestamp to convert into a Datetime-Object.\\

!!!!Example
@@Jamocha> (timestamp2datetime 293196017000)\\
1979-04-17 11:20:17.000+00\\
@@

----

!!ListFunctions
!!!complement$
!!!!Description
Returns a new list containing all elements of the second list that are not also elements of the first list.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] listOneList acting as a filter for list two.\\

[+<LIST>+] listTwoList that is filtered by list one.\\

!!!!Example
@@Jamocha> (complement$  (create$ sausage milk eggs) (create$ cheese milk eggs bread))\\
[cheese, bread]\\
@@

----

!!!create$
!!!!Description
Creates a list of the given arguments.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<unknown>+] someValueAny value to be part of the list.\\

!!!!Example
@@Jamocha> (create$ cheese milk eggs)\\
[cheese, milk, eggs]\\
@@

----

!!!delete$
!!!!Description
Deletes a specified number of items from a list and returns the remaining values in a new list. The first integer defines the index of the first item to be removed and the second integer defines the index of the last item to be removed. Attention: Lists in Jamocha start with index 1.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] someListList to delete items from.\\

[+<LONG>+] startIndexFirst item to delete from the List. Has to be smaller or equal to endIndex and within the bounds of the list.\\

[+<LONG>+] endIndexLast item to delete from the List. Has to be greater or equal to startIndex and within the bounds of list.\\

!!!!Example
@@Jamocha> (delete$ (create$ cheese milk eggs bread sausages) 2 4)\\
[cheese, sausages]\\
@@

----

!!!delete-member$
!!!!Description
Deletes specific items from a list. Arguments can either be single items or lists of items. In case of a list to be deleted, items are only removed if they appear in identical (correct and coherent) order in the first list. The function walks through the first list and tries to match each position to any of the arguments that are to be deleted. After deleting items from the list, it starts anew to walk through the remaining list and tries again to find a match to any of the arguments that are to be deleted. Therefore the arguments are not necessarily processed in the order they are given and also deleted repeatedly if the remaining list can be matched again. Returns a new list consisting of the remaining items.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] someListList to delete items from.\\

[+<unknown>+] deleteItemItem(s) to delete from the list.\\

!!!!Example
@@Jamocha> (delete-member$ (create$ 1 2 3 4 5) 2)\\
[1, 3, 4, 5]\\
Jamocha> (delete-member$ (create$ 1 2 3 4 5) (create$ 3 4) 1)\\
[2, 5]\\
Jamocha> (delete-member$ (create$ 1 2 3 4 5) (create$ 3 4) (create$ 2 5))\\
[1]\\
@@

----

!!!explode$
!!!!Description
Creates a list of a given string. Optionally a separator where to split the string can be provided. Default separator is the space character.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<STRING>+] stringString to be exploded.\\

[+<STRING>+] separatorOptional separator, default: space character.\\

!!!!Example
@@Jamocha> (explode$ 'A horse has about four legs')\\
['A', 'horse', 'has', 'about', 'four', 'legs']\\
Jamocha> (explode$ 'A horse has about four legs' ' about ')\\
['A horse has', 'four legs']\\
@@

----

!!!first$
!!!!Description
Returns the first item of a list. Nil if the list is empty.\\

This function [+has+] fixed parameter count.\\
Return type is [+<unknown>+]
!!!!Parameter

[+<LIST>+] someListList to get the first item from.\\

!!!!Example
@@Jamocha> (first$ (create$ cheese milk eggs bread))\\
cheese\\
@@

----

!!!foreach
!!!!Description
Evaluates expressions for all items in a list.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<unknown>+]
!!!!Parameter

[+<IDENTIFIER>+] variableNameName of the variable for each list item.\\

[+<LIST>+] listList to work on.\\

!!!!Example
@@Jamocha> (bind ?x (create$ cheese milk eggs bread))\\
true\\
Jamocha> (bind ?res 'We need: ')\\
true\\
Jamocha> (foreach ?item ?x (bind ?res (str-cat ?res ?item ', ')))\\
true\\
Jamocha> (return ?res)\\
We need: cheese, milk, eggs, bread, \\
@@

----

!!!implode$
!!!!Description
Creates and returns a string of a given list. Optionally a separator to put in-between the itemscan be provided. Default separator is the space character.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<LIST>+] listList to be imploded.\\

[+<STRING>+] separatorOptional separator, default: space character.\\

!!!!Example
@@Jamocha> (implode$ (create$ We need beer))\\
We need beer\\
Jamocha> (implode$ (create$ We need beer) ' -STOP- ')\\
We -STOP- need -STOP- beer\\
@@

----

!!!insert$
!!!!Description
Inserts one or more items into an existing list at a specific position and returns the extended list. If a list of items is inserted each item of it is inserted separately, so there are no nested lists. Attention: Lists in Jamocha start with index 1.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] someListList to insert one or more items into.\\

[+<LONG>+] indexPosition where the new item(s) should be added at.\\

[+<unknown>+] itemItem(s) to insert into the List.\\

!!!!Example
@@Jamocha> (insert$ (create$ cheese milk bread sausages) 3 eggs)\\
[cheese, milk, eggs, bread, sausages]\\
@@

----

!!!insert-list$
!!!!Description
Inserts one or more items into an existing list at a specific position and returns the extended list. If a list of items is inserted each item of it is inserted separately, so there are no nested lists. Attention: Lists in Jamocha start with index 1.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] someListList to insert one or more items into.\\

[+<LONG>+] indexPosition where the new item(s) should be added at.\\

[+<unknown>+] itemItem(s) to insert into the List.\\

!!!!Example
@@Jamocha> (insert-list$ (create$ cheese milk bread sausages) 3 (create$ eggs butter))\\
[cheese, milk, [eggs, butter], bread, sausages]\\
Jamocha> (insert-list$ (create$ cheese milk bread sausages) 3 eggs butter)\\
[cheese, milk, eggs, butter, bread, sausages]\\
@@

----

!!!intersection$
!!!!Description
Returns the intersection of its two arguments without duplicates. The order of returned items corresponds to the one in the first list. \\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] firstListFirst list for intersection.\\

[+<LIST>+] secondListSecond list for intersection.\\

!!!!Example
@@Jamocha> (intersection$ (create$ 3 a b 1 c) (create$ e 1 d a f c))\\
[a, 1, c]\\
@@

----

!!!length$
!!!!Description
Returns the number of items of a list.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<LIST>+] listList to get the length from.\\

!!!!Example
@@Jamocha> (length$ (create$ cheese milk eggs bread))\\
4\\
@@

----

!!!member$
!!!!Description
Compares if the first argument is a member of the list given in the second argument. If the the first argument is a list it is compared if there exists a subset of the second argument which is in the same order. Returns the position index of the element or the starting index of the subset in the second argument, if the first argument is a member. Otherwise returns -1.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<unknown>+] valueValue to search for in the list.\\

[+<LIST>+] listList to search in.\\

!!!!Example
@@Jamocha> (member$ 5 (create$ 1 2 3 4 5 6))\\
5\\
Jamocha> (member$ (create$ 3 4) (create$ 1 2 3 4 5 6))\\
3\\
@@

----

!!!nth$
!!!!Description
Returns the item of a list at the specified index. Attention: Lists in Jamocha start with index 1.\\

This function [+has+] fixed parameter count.\\
Return type is [+<unknown>+]
!!!!Parameter

[+<LONG>+] indexIndex of the item in the list to return. Needs to be in the bounds of someList.\\

[+<LIST>+] someListList to return the specified item from.\\

!!!!Example
@@Jamocha> (nth$ 3 (create$ cheese milk eggs bread sausages))\\
eggs\\
@@

----

!!!replace$
!!!!Description
Replaces a specified range in a list with (a) given value(s) and returns the modified list. The first integer defines the index of the first item to replace and the second integer defines the index of the last item to replace. The following arguments are inserted into the list, starting at the index of the first replaced item. If a list is given as replacement each item is inserted separately. Attention: Lists in Jamocha start with index 1.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] someListList to replace a specific range in.\\

[+<LONG>+] startIndexFirst item to replace in the List. Has to be smaller or equal to endIndex and within the bounds of the list.\\

[+<LONG>+] endIndexLast item to replace in the List. Has to be greater or equal to startIndex and within the bounds of the list.\\

[+<unknown>+] replacementValue(s) used as replacement.\\

!!!!Example
@@Jamocha> (replace$ (create$ 42 123 911 4711 1) 2 4 112)\\
[42, 112, 1]\\
Jamocha> (replace$ (create$ cheese eggs milk sausages) 3 4 (create$ bread ham))\\
[cheese, eggs, bread, ham]\\
@@

----

!!!replace-member$
!!!!Description
Replaces specific items in a list with a given replacement. Arguments can either be single items or lists of items. If a list is given to be replaced, the items are only replaced if they appear in identical (correct and coherent) order in the first list. The function walks through the first list and tries to match each position to any of the arguments that are to be replaced. If it finds a match it replaces the item(s) at the current position. Afterwards it moves on to the next position after the replacement and tries to match this position anew to any of the arguments that are to replaced. Therefore the arguments are not necessarily processed in the order they are given, but replacements will not be matched recursively. Returns a new list consisting of untouched and replaced items.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] someListList to replace items in.\\

[+<unknown>+] replacementReplacement for the searchValue in the list.\\

[+<unknown>+] searchValueValue to search for and replace in the list.\\

!!!!Example
@@Jamocha> (replace-member$ (create$ a b a b) (create$ a b a) a b)\\
[a, b, a, a, b, a, a, b, a, a, b, a]\\
Jamocha> (replace-member$ (create$ a b a b) (create$ a b a) (create$ a b))\\
[a, b, a, a, b, a]\\
@@

----

!!!rest$
!!!!Description
Returns all elements of a list except for the first one.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] someListList to return rest from.\\

!!!!Example
@@Jamocha> (rest$ (create$ cheese milk eggs bread))\\
[milk, eggs, bread]\\
@@

----

!!!subseq$
!!!!Description
Extracts a specified range from a list and returns a new list containing just the sub-sequence. The first integer defines the index of the first item to return and the second integer defines the index of the last item to return. Attention: Lists in Jamocha start with index 1.\\

This function [+has+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] someListList to return the subsequence from.\\

[+<LONG>+] startIndexFirst item to return from the list. Has to be smaller or equal to endIndex and within the bounds of the list.\\

[+<LONG>+] endIndexLast item to return from the list. Has to be greater or equal to startIndex and within the bounds of the list.\\

!!!!Example
@@Jamocha> (subseq$ (create$ 42 123 911 4711 1) 2 4)\\
[123, 911, 4711]\\
@@

----

!!!subsetp
!!!!Description
Returns true if the first list is a subset of the second list, false otherwise. The order of the lists is not considered.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<LIST>+] listOneSubset to test for.\\

[+<LIST>+] listTwoList to search in.\\

!!!!Example
@@Jamocha> (subsetp (create$ 3 4) (create$ 1 2 3 4 5 6))\\
true\\
@@

----

!!!union$
!!!!Description
Returns the union of its arguments without duplicates.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LIST>+]
!!!!Parameter

[+<LIST>+] listList to unify with the other arguments.\\

!!!!Example
@@Jamocha> (union$ (create$ a b c) (create$ e d a f) (create$ 1 2 d))\\
[a, b, c, e, d, f, 1, 2]\\
@@

----

!!IOFunctions
!!!batch
!!!!Description
Loads and executes one or more given files. Multiple arguments are separated by a blank. Files can be located on a local drive or on a remote machine accessible via http or some other protocol. Returns true on success.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] fileNameFile(s) to load and execute.\\

!!!!Example
@@(batch samples/view-test.clp)@@

----

!!!load
!!!!Description
Loads and executes one or more given files. Multiple arguments are separated by a blank. Files can be located on a local drive or on a remote machine accessible via http or some other protocol. Returns true on success. In contrast to batch this function removes all activations after it finished reading the file(s).\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] fileNameFile(s) to load and execute.\\

!!!!Example
@@(batch samples/view-test.clp)@@

----

!!!load-facts
!!!!Description
Reads a file from the given location and surrounds the content with (assert ... ). So a list of facts can be asserted into the rule engine with one single call. The result is true if any of the given files could be parsed successfully.Attention a corresponding Jamocha template must be defined in order to actually import thefacts into the engine.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] fileNamePath(s) to one or more file(s) containing facts without assert-call to be asserted.\\

!!!!Example
@@(deftemplate transaction\\
  (slot accountId (type STRING))\\
  (slot countryCode (type STRING))\\
  (slot cusip (type INTEGER))\\
  (slot issuer (type STRING))\\
  (slot total (type DOUBLE))\\
)\\
(load-facts samples/data.clp)\\
@@

----

!!!printout
!!!!Description
Writes any number and type of arguments to the channel specified in the first argument. 't' indicates to send the output to the standard output device of the computer. Generally, this is the terminal. Printout concatenates all arguments after the channel without separation marks. A string, enclosed in double quotes, is handled as one single argument.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<unknown>+] valueAny value to print out.\\

!!!!Example
@@Jamocha> (printout t 'Jamocha rul' e z !)\\
NIL\\
@@

----

!!!dump
!!!!Description
Writes engine's deftemplates, defrules and facts into a file, which is compatible to the format expected by the batch function. Returns true iff everything could be dumped.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] output-fileOutput-file where to write the dump of the module.\\

[+<STRING>+] moduleModule to be safed.\\

!!!!Example
@@(dump /tmp/jamochadump.clp)@@

----

!!RuleEngineFunctions
!!!apply
!!!!Description
Applies a given function to one or more given arguments.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<unknown>+]
!!!!Parameter

[+<IDENTIFIER>+] functionNameName of the function to apply.\\

[+<unknown>+] functionParameterOptional parameters for the function.\\

!!!!Example
@@Jamocha> (apply add 17 4)\\
21\\
Jamocha> (apply explode$ 'My name is not earl.' ' not ')\\
['My name is not earl.']\\
@@

----

!!!assert
!!!!Description
Allows the user to add a fact to the fact-list. Multiple facts may be asserted with each call. If the fact-list is being watched, an inform message is printed each time a fact is asserted. Attention: In Jamocha there has to exist a corresponding template in order to assert a fact. \\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<FACT_ID>+]
!!!!Parameter

[+<unknown>+] factFact(s) to be asserted.\\

!!!!Example
@@Jamocha> (deftemplate car (slot color)(slot speed))\\
true\\
Jamocha> (assert (car (color 'red')(speed 200)))\\
f-2\\
Jamocha> (facts)\\
(_initialFact\\
)\\
(car\\
    (color 'red')\\
    (speed 200)\\
)\\
for a total of 2\\
@@

----

!!!assert-existing-fact
!!!!Description
Allows to assert facts, which already exist as java objects.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<unknown>+] factFact(s) to be asserted.\\

!!!!Example
@@(assert-existing-fact ?f)@@

----

!!!bind
!!!!Description
Binds any value to a variable visible in the scope the bind takes place.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<IDENTIFIER>+] variableVariable to bind the value to. Name should start with a '?': ?variableName .\\

[+<unknown>+] valueValue to bind to the variable.\\

!!!!Example
@@Jamocha> (bind ?helo 'Jamocha rulez!')\\
true\\
Jamocha> (printout t ?helo)\\
NIL\\
@@

----

!!!clear
!!!!Description
Clears the Rete engine. Removes all constructs and all associated data structures (such as facts and objects) from the Rete environment. In case of a given argument it is parsed as identifier and only the constructs that are identified by it are removed. Returns true on success.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<IDENTIFIER>+] whatOptional identifier saying what to clear ('deffacts' or 'objects'), if not specified: all is cleared.\\

!!!!Example
@@Jamocha> (clear)\\
true\\
@@

----

!!!deffunction
!!!!Description
Used to declare new functions in the shell. Deffunctions run interpreted and are mapped to existing functions. Returns true if the function could be declared. Returns false if the functioncould not be declared or already existed.Deffunction is used for functions that are declared in the shell. It is different than a function written in java. Deffunctions run interpreted and are mapped to existing functions. Returns true if the Function could be declared and false if not or if it already existed.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<IDENTIFIER>+] functionNameName of the new function.\\

[+<STRING>+] descriptionOptional Description of the new Function.\\

[+<IDENTIFIER>+] parametersParameters for the Function.\\

[+<unknown>+] actionsActions for the Function.\\

!!!!Example
@@Jamocha> (deffunction minute-hand 'Returns the minutes of the actual time.' () (printout t 'The minute hand is pointing to ' (getminutes (now)) ' right now.'))\\
true\\
Jamocha> (minute-hand)\\
NIL\\
Jamocha> (deffunction is-hello (?x1) (eq 'hello' ?x1))\\
true\\
@@

----

!!!defmodule
!!!!Description
Defines a new module in the engine. Defmodule enables the division of rules and facts into distinct groups called modules. Modules help to physically organize large numbers of rules into logical groups. Furthermore modules provide a control mechanism: The rules in a module fire only when that module has the focus, and only one module can be in focus at a time.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<IDENTIFIER>+] nameName for the new module\\

!!!!Example
@@Jamocha> (defmodule PIZZAENV)\\
true\\
Jamocha> (get-current-module)\\
PIZZAENV\\
@@

----

!!!defrule
!!!!Description
Defines a new rule in the currently focused module of the engine. defrule has the following syntax: (defrule rule_name 'optional_comment'  (pattern_1)     ; Left-Hand Side (LHS)  (pattern_2)     ; of the rule consisting of elements   .           ; before the '=>'   .   .  (pattern_N) =>                 ; THEN arrow  (action_1)      ; Right-Hand Side (RHS)  (action_2)      ; of the rule consisting of elements   .           ; after the '=>'   .  (action_M) )                  ; close defrule\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<OBJECT>+] ruleRule to be defined.\\

!!!!Example
@@Jamocha> (deftemplate customer\\
  (slot first)\\
  (slot last)\\
  (slot title)\\
  (slot address)\\
)\\
true\\
Jamocha> (defrule rule\\
  (customer\\
    (first 'john')\\
  )\\
  =>\\
  (printout t 'rule0 was fired' )\\
)\\
true\\
Jamocha> (assert (customer (first 'john')(last 'doe')(address 'moon') ) )\\
f-2\\
Jamocha> (fire)\\
1\\
@@

----

!!!deftemplate
!!!!Description
Defines a new template in the currently focused module of the engine. A template has the following syntax: (deftemplate templ  ;name of deftemplate relation  'comment'   ;optional comment in quotes  (slot slot1name  ;name of 1st field  (type STRING)  ;type of field (optional)  (default ?someVar)) ;default value of 1st field (optional)  (slot slot2name  ;name of 2nd field  (type SYMBOL))  ;type of field   ... )      ;close deftemplate  You can use (silent slot SLOTNAME) instead of (slot SLOTNAME). A so-called silent slot is not observed by the rete engine, i.e.a change in a silent slot will not lead to a new evaluation whether the fact matches to other rules now.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<OBJECT>+] templateTemplate to be defined.\\

!!!!Example
@@Jamocha> (deftemplate transact\\
  (slot accountId (type STRING))\\
  (slot countryCode (type STRING))\\
  (slot currentPrice (type DOUBLE))\\
  (slot issuer (type STRING))\\
  (slot lastPrice (type DOUBLE))\\
  (silent slot purchaseDate (type STRING))\\
  (slot total (type DOUBLE))\\
)\\
true\\
@@

----

!!!deftemplate-from-javaclass
!!!!Description
Defines a new template out of a Java class.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<BOOLEAN>+] bean-styleWhether this function should use the getter/setter-defined values (true) or simply the public attributes (false)\\

[+<STRING>+] classnameThe fully qualified java class name\\

!!!!Example
@@(deftemplate-from-javaclass true org.jamocha.jsr94.test.Wurst)@@

----

!!!echo
!!!!Description
Used to echo variable bindings in the shell. Prints out one binding per line.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<IDENTIFIER>+] valueBinding to echo.\\

!!!!Example
@@Jamocha> (bind ?testbind 'This is an echo and the binding of the variable ?testbind')\\
true\\
Jamocha> (echo ?testbind)\\
This is an echo and the binding of the variable ?testbind\\
\\
@@

----

!!!eval
!!!!Description
Evaluates the string given in the first argument as though it was entered at the command prompt and returns the last result of the expression(s) (if any). An optional binding as second argument can be used to catch an exception and hold the error message.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<unknown>+]
!!!!Parameter

[+<STRING>+] commandOne or more commands in one string.\\

[+<IDENTIFIER>+] errorBindingOptional binding to hold the error message if an exception occurres.\\

!!!!Example
@@Jamocha> (eval '(printout t BlackJack)' ?catchErr)\\
NIL\\
Jamocha> (eval '(printout t \'This is BlackJack.\')')\\
NIL\\
Jamocha> (bind ?x '(+ 17 4)')\\
true\\
Jamocha> (eval ?x)\\
21\\
@@

----

!!!eval-blocking
!!!!Description
Evaluates the string given in the first argument as though it was entered at the command prompt and returns the last result of the expression(s) (if any). An optional binding as second argument can be used to catch an exception and hold the error message.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<unknown>+]
!!!!Parameter

[+<STRING>+] commandOne or more commands in one string.\\

[+<IDENTIFIER>+] errorBindingOptional binding to hold the error message if an exception occurres.\\

!!!!Example
@@Jamocha> (eval-blocking '(printout t BlackJack)' ?catchErr)\\
NIL\\
Jamocha> (eval-blocking '(printout t \'This is BlackJack.\')')\\
NIL\\
Jamocha> (bind ?x '(+ 17 4)')\\
true\\
Jamocha> (eval-blocking ?x)\\
21\\
@@

----

!!!exit
!!!!Description
Closes the engine.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@(exit)@@

----

!!!fact-id
!!!!Description
Returns the value (fact) of the given fact-id or NIL if the given id doesn't exist.\\

This function [+has+] fixed parameter count.\\
Return type is [+<FACT>+]
!!!!Parameter

[+<unknown>+] factIdFact-Id to get fact from.\\

!!!!Example
@@Jamocha> (deftemplate car (slot color)(slot speed))\\
true\\
Jamocha> (assert (car (color 'red')(speed 200)))\\
f-2\\
Jamocha> (assert (car (color 'blue')(speed 150)))\\
f-3\\
Jamocha> (assert (car (color 'green')(speed 100)))\\
f-4\\
Jamocha> (fact-id 2)\\
(car\\
    (color 'red')\\
    (speed 200)\\
)\\
@@

----

!!!facts
!!!!Description
Prints out all the facts which are currently asserted to the rule engine.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (facts)\\
(_initialFact\\
)\\
for a total of 1\\
@@

----

!!!fact-slot-value
!!!!Description
Returns the value of a slot of a specific fact.\\

This function [+has+] fixed parameter count.\\
Return type is [+<unknown>+]
!!!!Parameter

[+<unknown>+] factFact to return the slot value from.\\

[+<IDENTIFIER>+] slotNameName of the slot to get the value from.\\

!!!!Example
@@Jamocha> (deftemplate car (slot color)(slot speed))\\
true\\
Jamocha> (assert (car (color 'red')(speed 200)))\\
f-2\\
Jamocha> (assert (car (color 'blue')(speed 150)))\\
f-3\\
Jamocha> (assert (car (color 'green')(speed 100)))\\
f-4\\
Jamocha> (fact-slot-value 3 color)\\
blue\\
@@

----

!!!find-fact-by-fact
!!!!Description
Returns the ID of the given fact or NIL if it wasn't found.\\

This function [+has+] fixed parameter count.\\
Return type is [+<FACT>+]
!!!!Parameter

[+<FACT>+] factFact to search for.\\

!!!!Example
@@Jamocha> (deftemplate car (slot color)(slot speed))\\
true\\
Jamocha> (assert (car (color 'red')(speed 200)))\\
f-2\\
Jamocha> (assert (car (color 'blue')(speed 150)))\\
f-3\\
Jamocha> (assert (car (color 'green')(speed 100)))\\
f-4\\
Jamocha> (find-fact-by-fact (car (color 'green') (speed 100)))\\
f-4\\
@@

----

!!!fire
!!!!Description
Starts the execution of rules. If the optional argument is positive, execution will cease after the specified number of rule firings or when the agenda contains no more rule activations. If there are no arguments or the argument is a negative integer, execution will cease when the agenda contains no more rule activations. If the focus stack is empty the MAIN module is automatically in the current focus. Returns the number of rules fired.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<LONG>+]
!!!!Parameter

[+<LONG>+] ruleCountNumber of rules to fire at most.\\

!!!!Example
@@(fire)\\
(fire 7)@@

----

!!!function-exists
!!!!Description
Takes a CLIPS string as argument and uses the default parser to parse it. If the first statement is a function call, the FunctionMemory is checked wether a function with this name exists. If it does it returns true otherwise (or if the first statement is no function call) it returns false.\\

This function [+has+] fixed parameter count.\\
Return type is [+<unknown>+]
!!!!Parameter

[+<STRING>+] commandOne command as one single string.\\

!!!!Example
@@Jamocha> (function-exists '(cos)')\\
true\\
Jamocha> (function-exists '(i-dont-exist)')\\
false\\
@@

----

!!!functions-description
!!!!Description
This function generates a XML-document, which describes the declared functions. If a filename is given, it only prints that to file and returns an empty string.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<NONE>+] \\

----

!!!get-next-eventpoint
!!!!Description
\\

This function [+has+] fixed parameter count.\\
Return type is [+<DOUBLE>+]
!!!!Parameter

[+<NUMBER>+] \\

!!!!Example
@@Jamocha> (tan (/ (pi) 2))\\
1.633123935319537E16\\
@@

----

!!!gc
!!!!Description
Runs the Java garbage collector.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (gc)\\
NIL\\
@@

----

!!!get-current-module
!!!!Description
Returns the name of the module which is currently focused.\\

This function [+has+] fixed parameter count.\\
Return type is [+<IDENTIFIER>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (get-current-module)\\
MAIN\\
@@

----

!!!get-fact-id
!!!!Description
Returns the fact-ID of the given fact.\\

This function [+has+] fixed parameter count.\\
Return type is [+<FACT_ID>+]
!!!!Parameter

[+<FACT>+] factFact to return the ID of.\\

----

!!!get-strategy
!!!!Description
Returns the Strategy of the current focus as String.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (get-strategy)\\
DepthStrategy\\
@@

----

!!!list-bindings
!!!!Description
Prints out a list of all bindings and defglobals defined in the current scope. The return value is NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (bind ?helo 'Jamocha rulez!')\\
true\\
Jamocha> (list-bindings)\\
NIL\\
@@

----

!!!list-dir
!!!!Description
Prints out the files and folders of a given directory. It is the same command asdir in DOS and ls in Unix. The return value is NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<STRING>+] dirDirectory to list files and folders of.\\

!!!!Example
@@Jamocha> (list-dir examples)\\
NIL\\
Jamocha> (list-dir /var/tmp)\\
NIL\\
@@

----

!!!list-functions
!!!!Description
Prints out a list of all defined functions. The return value is NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (list-functions)\\
NIL\\
@@

----

!!!list-rules
!!!!Description
Prints out the names of the rules and their comments. Returns NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (list-rules)\\
NIL\\
@@

----

!!!list-templates
!!!!Description
Prints out all defined templates in no specific order. The return value is NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (list-templates)\\
NIL\\
@@

----

!!!load-function-group
!!!!Description
Loads one or more complete functiongroups into the engine. Returns true on success.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] functionGroupsFunctiongroup(s) to be loaded.\\

!!!!Example
@@Jamocha> (load-function-group adaptor datetime)\\
true\\
@@

----

!!!load-function
!!!!Description
Loads one or more functions into the engine. Returns true on success.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] functionFunction(s) to be be loaded.\\

----

!!!matches
!!!!Description
MatchesFunction will print out all partial matches including alpha and beta nodes. If the function is called without any parameters, it prints out all the memories. If parameters are passed, the output will be filtered. Returns NIL.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<STRING>+] filterFilter to apply to the output.\\

----

!!!mem-free
!!!!Description
Prints out the free memory currently available to the Java VM. Returns NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (mem-free)\\
NIL\\
@@

----

!!!mem-total
!!!!Description
Prints out the total memory currently available to the Java VM. Returns NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (mem-total)\\
NIL\\
@@

----

!!!mem-used
!!!!Description
Prints out the memory space currently in  use. Returns NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (mem-used)\\
NIL\\
@@

----

!!!modify
!!!!Description
Allows the user to modify template facts on the fact-list. Only one fact may be modified with a single modify statement. The modification of a fact is equivalent to retracting the present fact and asserting the modified fact. Returns true on success.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<FACT_ID>+] factFact to modify.\\

[+<SLOT>+] slotSlot and new value which is changed in the given fact.\\

!!!!Example
@@(deftemplate car (slot color)(slot speed))\\
(assert (car (color 'red')(speed 200)))\\
(assert (car (color 'blue')(speed 150)))\\
(assert (car (color 'green')(speed 100)))\\
(bind ?fact (fact-id 2))\\
(echo ?fact)\\
(modify ?fact (speed 500))\\
(facts)@@

----

!!!modules
!!!!Description
Prints out all the modules which are currently defined in the rule engine.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (defmodule TESTMODUL)\\
true\\
Jamocha> (modules)\\
TESTMODUL\\
MAIN\\
for a total of 2\\
\\
@@

----

!!!node-memory
!!!!Description
Prints the memory content of a node. Returns 'True', iff there was a node with the given id.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<LONG>+] node-idThe node ID\\

!!!!Example
@@(node-memory 0)@@

----

!!!ppdefrule
!!!!Description
Prints out one or more rules in a pretty format. Note the format may not be identical to what the user wrote. It is a normalized and cleaned up format.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<IDENTIFIER>+] ruleNameOne or more rules to print out in a pretty format.\\

!!!!Example
@@(deftemplate customer\\
  (slot first)\\
  (slot last)\\
  (slot title)\\
  (slot address)\\
)\\
(defrule rule\\
  (customer\\
    (first 'john')\\
  )\\
  =>\\
  (printout t 'rule0 was fired' )\\
)\\
(ppdefrule rule)@@

----

!!!ppdeftemplate
!!!!Description
Prints out one or more templates of the module currently in focus in a pretty format. Note the format may not be identical to what the user wrote. It is a normalized and cleaned up format.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<IDENTIFIER>+] templateNameOne or more templates to print out in a pretty format.\\

!!!!Example
@@Jamocha> (deftemplate car (slot color)(slot speed))\\
true\\
Jamocha> (ppdeftemplate car)\\
NIL\\
@@

----

!!!print-profile
!!!!Description
Prints out the current profile information.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (print-profile)\\
NIL\\
@@

----

!!!profile
!!!!Description
Turns on profiling. Provides basic profiling of assert, retract, add activation, remove activation, and fire. Returns NIL.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<IDENTIFIER>+] profileWhat to profile. One or several of: all, assert-fact, add-activation, fire, retract-fact or remove-activation.\\

!!!!Example
@@(profile assert-fact fire)@@

----

!!!reset
!!!!Description
Resets all facts and objects. Meaning that they are retracted and asserted anew.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (reset)\\
NIL\\
@@

----

!!!reset-facts
!!!!Description
Resets all facts only. Meaning that they are retracted and asserted again.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@(reset-facts)@@

----

!!!retract
!!!!Description
Allows the user to remove facts from the fact-list. Multiple facts may be retracted with a single retract statement. The retraction of a fact also removes all rules that depend upon that fact for activation from the agenda. Retraction of a fact may also cause the retraction of other facts which receive logical support from the retracted fact. If the facts item is being watched, then an informational message will be printed each time a fact is retracted.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<unknown>+] factFact-ID or fact to be retracted.\\

!!!!Example
@@Jamocha> (clear)\\
true\\
Jamocha> (deftemplate car (slot color)(slot speed))\\
true\\
Jamocha> (assert (car (color 'red')(speed 200)))\\
f-1\\
Jamocha> (assert (car (color 'blue')(speed 150)))\\
f-2\\
Jamocha> (assert (car (color 'green')(speed 100)))\\
f-3\\
Jamocha> (facts)\\
(car\\
    (color 'red')\\
    (speed 200)\\
)\\
(car\\
    (color 'blue')\\
    (speed 150)\\
)\\
(car\\
    (color 'green')\\
    (speed 100)\\
)\\
for a total of 3\\
Jamocha> (retract 2)\\
true\\
Jamocha> (facts)\\
(car\\
    (color 'red')\\
    (speed 200)\\
)\\
(car\\
    (color 'green')\\
    (speed 100)\\
)\\
for a total of 2\\
@@

----

!!!list-rules
!!!!Description
Prints out the names of the rules and their comments. Returns NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (list-rules)\\
NIL\\
@@

----

!!!save-facts
!!!!Description
Saves all facts in the engine to a file, specified in the first argument.Facts can be sorted according to their deftemplates or fact-ids.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] fileNameName of the file to store the facts in.\\

[+<IDENTIFIER>+] sortingIf equal to 'template' the facts are sorted by their deftemplate otherwise by their fact-ids.\\

!!!!Example
@@(deftemplate car (slot color)(slot speed))\\
(assert (car (color 'red')(speed 200)))\\
(assert (car (color 'blue')(speed 150)))\\
(assert (car (color 'green')(speed 100)))\\
(save-facts /var/tmp/savetest.clp)\\
(save-facts /var/tmp/savetest2.clp template)@@

----

!!!set-default
!!!!Description
A given Jamocha setting will be set to its default value.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<STRING>+] property nameName of property to be reset\\

!!!!Example
@@(set-default watch-activations)@@

----

!!!set-focus
!!!!Description
Sets the focus to the given module. If no argument is given the focus doesn't change. In either case the identifier of the current focus is returned.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<IDENTIFIER>+]
!!!!Parameter

[+<IDENTIFIER>+] focusFocus to set in the engine.\\

!!!!Example
@@Jamocha> (defmodule MOCHA)\\
true\\
Jamocha> (modules)\\
MAIN\\
MOCHA\\
for a total of 2\\
\\
Jamocha> (get-current-module)\\
MOCHA\\
Jamocha> (set-focus MAIN)\\
MAIN\\
Jamocha> (get-current-module)\\
MAIN\\
@@

----

!!!set-settings
!!!!Description
Jamocha settings can be set by this function.\\

This function [+has+] fixed parameter count.\\
Return type is [+<STRING>+]
!!!!Parameter

[+<STRING>+] property nameName of property to be set\\

[+<STRING>+] property valueProperty value\\

!!!!Example
@@(set watch-activations true)@@

----

!!!set-strategy
!!!!Description
Sets the strategy of the current focus to the given argument. If no argument is provided a list of all available strategies is printed out. Returns true if the given strategy is found or no argument was provided and false if the strategy was not found.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] strategyThe Strategy to use\\

!!!!Example
@@Jamocha> (set-strategy)\\
true\\
@@

----

!!!sleep
!!!!Description
Lets the CommandThread of the MessageRouter sleep for a given amount of time.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<LONG>+] sleepTimeTime to sleep (in milliseconds).\\

!!!!Example
@@(sleep 1000)@@

----

!!!spool
!!!!Description
Captures the output to a file, and makes it easier to record what happens. This is inspired by Oracle SqlPlus spool function.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] switchUse 'on' or 'off' for spooling.\\

[+<STRING>+] fileNameFilename to spool to, if switch is 'on'.\\

!!!!Example
@@(spool on /var/tmp/spool.clp)@@

----

!!!undefrule
!!!!Description
Removes a rule in the engine. Returns true on success.\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] ruleNameRule that will be removed.\\

!!!!Example
@@Jamocha> (deftemplate customer\\
  (slot first)\\
  (slot last)\\
  (slot title)\\
  (slot address)\\
)\\
true\\
Jamocha> (defrule rule\\
  (customer\\
    (first 'john')\\
  )\\
=>\\
  (printout t 'rule was fired' )\\
)\\
true\\
Jamocha> (assert (customer (first 'john')(last 'doe')(address 'moon') ) )\\
f-2\\
Jamocha> (fire)\\
1\\
Jamocha> (rules)\\
NIL\\
Jamocha> (undefrule rule)\\
true\\
Jamocha> (rules)\\
NIL\\
@@

----

!!!undeftemplate
!!!!Description
Removes a template wich is currentlich not in use from the engine. Returns true on success and false otherwise (e.g. if the template is still in use by a fact or a rule).\\

This function [+has+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<STRING>+] templateNameTemplate to be removed.\\

!!!!Example
@@Jamocha> (deftemplate transact\\
  (slot accountId (type STRING))\\
  (slot countryCode (type STRING))\\
  (slot currentPrice (type DOUBLE))\\
  (slot issuer (type STRING))\\
  (slot lastPrice (type DOUBLE)\\
)  (slot purchaseDate (type STRING))\\
  (slot total (type DOUBLE))\\
)\\
true\\
Jamocha> (templates)\\
NIL\\
Jamocha> (undeftemplate transact)\\
false\\
Jamocha> (templates)\\
NIL\\
@@

----

!!!unprofile
!!!!Description
Turns off profiling. There is the choice to turn off profiling of assert, retract, add activation, remove activation, and fire. Returns NIL.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<IDENTIFIER>+] unprofileWhat to unprofile. One or several of: all, assert-fact, add-activation, fire, retract-fact or remove-activation.\\

!!!!Example
@@(profile all)\\
(deftemplate templ1 (slot name))\\
(print-profile)\\
(unprofile assert-fact)@@

----

!!!unwatch
!!!!Description
Allows users to remove the watch of different engine processes, like activations, facts and rules.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<IDENTIFIER>+] unwatchWhat to unwatch. One or several of: all, facts, activations or rules.\\

!!!!Example
@@Jamocha> (watch facts)\\
NIL\\
Jamocha> (deftemplate templ2 (slot name))\\
true\\
Jamocha> (assert (templ2 (name test1)) (templ2 (name test2)))\\
f-3\\
Jamocha> (unwatch facts)\\
NIL\\
Jamocha> (assert (templ2 (name test3)))\\
f-4\\
@@

----

!!!version
!!!!Description
Prints out the version of Jamocha. Returns NIL.\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@Jamocha> (version)\\
NIL\\
@@

----

!!!text-view
!!!!Description
Prints the rete network in text view\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@(text-view)@@

----

!!!watch
!!!!Description
Allows users to watch different engine processes, likes activations, facts and rules.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter

[+<IDENTIFIER>+] watchWhat to watch. One or several of: all, facts, activations, rules or none.Value is not stored. If you want to do so use (set) function or GUI settings instead.\\

!!!!Example
@@Jamocha> (watch facts)\\
NIL\\
Jamocha> (deftemplate templ2 (slot name))\\
true\\
Jamocha> (assert (templ2 (name test1)) (templ2 (name test2)))\\
f-3\\
@@

----

!!!jsr94-ruleset-description
!!!!Description
Sets the ruleset description inside a JSR-94 ruleset\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@(jsr94-ruleset-description)@@

----

!!!jsr94-ruleset-name
!!!!Description
Sets the ruleset name inside a JSR-94 ruleset\\

This function [+has+] fixed parameter count.\\
Return type is [+<NONE>+]
!!!!Parameter
"none"
!!!!Example
@@(jsr94-ruleset-name)@@

----

!!CompareFunctions
!!!any-eq
!!!!Description
Any-eq is used to compare a literal value against one or more bindings. If any of the bindings is equal to the constant value, the function returns true.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<unknown>+] valueLiteral value that should be compared to the other parameters.\\

[+<unknown>+] valueValue that should be compared to the first parameter.\\

----

!!!eq
!!!!Description
Eq is used to compare a literal value against one or more other values. If all of the other values are equal, the function returns true. Eq should be used if the type of its arguments is not known in adavance.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<unknown>+] valueLiteral value to be compared to all other parameters.\\

[+<unknown>+] valueValue to be compared to the first parameter.\\

!!!!Example
@@Jamocha> (eq 4 4)\\
true\\
@@

----

!!!greater
!!!!Description
Greater will compare two or more numeric values and return true, if the (n-1)th value is greater than the nth value.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<NUMBER>+] numberNumber that will be compared to the other parameters.\\

[+<NUMBER>+] numberNumber that will be compared to the other parameters.\\

!!!!Example
@@Jamocha> (greater 84 22 1)\\
true\\
@@

----

!!!greaterOrEqual
!!!!Description
GreaterOrEqual will compare two or more numeric values and return true, if the (n-1)th value is greater than or equal to the nth value.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<NUMBER>+] numberNumber that will be compared to the other parameters.\\

[+<NUMBER>+] numberNumber that will be compared to the other parameters.\\

!!!!Example
@@Jamocha> (greaterOrEqual 84 2 2 1)\\
true\\
@@

----

!!!less
!!!!Description
Less will compare two or more numeric values and return true, if the (n-1)th value is less than the nth value.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<NUMBER>+] numberNumber that will be compared to the other parameters.\\

[+<NUMBER>+] numberNumber that will be compared to the other parameters.\\

!!!!Example
@@Jamocha> (less 1 22 84)\\
true\\
@@

----

!!!lessOrEqual
!!!!Description
LessOrEqual will compare two or more numeric values and return true, if the (n-1)th value is less than or equal to the nth value.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<NUMBER>+] numberNumber that will be compared to the other parameters.\\

[+<NUMBER>+] numberNumber that will be compared to the other parameters.\\

!!!!Example
@@Jamocha> (lessOrEqual 1 2 2 84)\\
true\\
@@

----

!!!neq
!!!!Description
Neq is used to compare a literal value against one or more other values. If all of the other values are not equal, the function returns true. Neq should be used if the type of its arguments is not known in adavance.\\

This function [+hasn't+] fixed parameter count.\\
Return type is [+<BOOLEAN>+]
!!!!Parameter

[+<unknown>+] valueLiteral value to be compared to all other parameters.\\

[+<unknown>+] valueValue to be compared to the first parameter.\\

!!!!Example
@@Jamocha> (neq 47 11)\\
true\\
@@

----
