/* Generated By:JJTree&JavaCC: Do not edit this line. SFPParserConstants.java */
/*
 * Copyright 2007 Karl-Heinz Krempels, Sebastian Reinartz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.jamocha.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package org.jamocha.languages.clips.parser;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface SFPParserConstants {

	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int SINGLE_LINE_COMMENT = 5;
	/** RegularExpression Id. */
	int LBRACE = 6;
	/** RegularExpression Id. */
	int RBRACE = 7;
	/** RegularExpression Id. */
	int DIGIT = 8;
	/** RegularExpression Id. */
	int INTEGER = 9;
	/** RegularExpression Id. */
	int FLOAT = 10;
	/** RegularExpression Id. */
	int EXPONENT = 11;
	/** RegularExpression Id. */
	int GMT_OFFSET = 12;
	/** RegularExpression Id. */
	int DATE = 13;
	/** RegularExpression Id. */
	int TIME = 14;
	/** RegularExpression Id. */
	int DATETIME = 15;
	/** RegularExpression Id. */
	int SILENT = 16;
	/** RegularExpression Id. */
	int STRING = 17;
	/** RegularExpression Id. */
	int SFWILDCARD = 18;
	/** RegularExpression Id. */
	int MFWILDCARD = 19;
	/** RegularExpression Id. */
	int GLOBALVAR = 20;
	/** RegularExpression Id. */
	int DEFFACTS = 21;
	/** RegularExpression Id. */
	int DEFTEMPLATE = 22;
	/** RegularExpression Id. */
	int DEFTEMPLATE_CONSTRUCT = 23;
	/** RegularExpression Id. */
	int DEFRULE = 24;
	/** RegularExpression Id. */
	int DEFFUNCTION = 25;
	/** RegularExpression Id. */
	int FUNCTIONGROUP = 26;
	/** RegularExpression Id. */
	int DEFGENERIC = 27;
	/** RegularExpression Id. */
	int DEFMODULE = 28;
	/** RegularExpression Id. */
	int DEFGLOBAL = 29;
	/** RegularExpression Id. */
	int DEFAULT_ATR = 30;
	/** RegularExpression Id. */
	int DYNAMIC_ATR = 31;
	/** RegularExpression Id. */
	int ATR_DEFAULT = 32;
	/** RegularExpression Id. */
	int ATR_DERIVE = 33;
	/** RegularExpression Id. */
	int ATR_NONE = 34;
	/** RegularExpression Id. */
	int ATR_ALL = 35;
	/** RegularExpression Id. */
	int SLOT = 36;
	/** RegularExpression Id. */
	int SINGLE_SLOT = 37;
	/** RegularExpression Id. */
	int MULTISLOT = 38;
	/** RegularExpression Id. */
	int ARROW = 39;
	/** RegularExpression Id. */
	int SLOWCOMPILE = 40;
	/** RegularExpression Id. */
	int DECLARE = 41;
	/** RegularExpression Id. */
	int SALIENCE = 42;
	/** RegularExpression Id. */
	int TEMPORALVALIDITY = 43;
	/** RegularExpression Id. */
	int MILLISECOND = 44;
	/** RegularExpression Id. */
	int SECOND = 45;
	/** RegularExpression Id. */
	int MINUTE = 46;
	/** RegularExpression Id. */
	int HOUR = 47;
	/** RegularExpression Id. */
	int DAY = 48;
	/** RegularExpression Id. */
	int MONTH = 49;
	/** RegularExpression Id. */
	int YEAR = 50;
	/** RegularExpression Id. */
	int WEEKDAY = 51;
	/** RegularExpression Id. */
	int DURATION = 52;
	/** RegularExpression Id. */
	int AUTOFOCUS = 53;
	/** RegularExpression Id. */
	int RULEVERSION = 54;
	/** RegularExpression Id. */
	int TYPE = 55;
	/** RegularExpression Id. */
	int TRUE = 56;
	/** RegularExpression Id. */
	int FALSE = 57;
	/** RegularExpression Id. */
	int NIL = 58;
	/** RegularExpression Id. */
	int NOT = 59;
	/** RegularExpression Id. */
	int AND = 60;
	/** RegularExpression Id. */
	int OR = 61;
	/** RegularExpression Id. */
	int OF = 62;
	/** RegularExpression Id. */
	int LOGICAL = 63;
	/** RegularExpression Id. */
	int TEST = 64;
	/** RegularExpression Id. */
	int EXISTS = 65;
	/** RegularExpression Id. */
	int FORALL = 66;
	/** RegularExpression Id. */
	int OBJECT = 67;
	/** RegularExpression Id. */
	int ASSIGN = 68;
	/** RegularExpression Id. */
	int TILDE = 69;
	/** RegularExpression Id. */
	int AMPERSAND = 70;
	/** RegularExpression Id. */
	int LINE = 71;
	/** RegularExpression Id. */
	int COLON = 72;
	/** RegularExpression Id. */
	int EQUALS = 73;
	/** RegularExpression Id. */
	int VARIABLE_TYPE = 74;
	/** RegularExpression Id. */
	int SYMBOL_TYPE = 75;
	/** RegularExpression Id. */
	int STRING_TYPE = 76;
	/** RegularExpression Id. */
	int DATETIME_TYPE = 77;
	/** RegularExpression Id. */
	int LEXEME_TYPE = 78;
	/** RegularExpression Id. */
	int INTEGER_TYPE = 79;
	/** RegularExpression Id. */
	int SHORT_TYPE = 80;
	/** RegularExpression Id. */
	int LONG_TYPE = 81;
	/** RegularExpression Id. */
	int FLOAT_TYPE = 82;
	/** RegularExpression Id. */
	int DOUBLE_TYPE = 83;
	/** RegularExpression Id. */
	int NUMBER_TYPE = 84;
	/** RegularExpression Id. */
	int BOOLEAN_TYPE = 85;
	/** RegularExpression Id. */
	int EXTERNAL_ADDRESS_TYPE = 86;
	/** RegularExpression Id. */
	int FACT_ADDRESS_TYPE = 87;
	/** RegularExpression Id. */
	int ALLOWED_SYMBOLS = 88;
	/** RegularExpression Id. */
	int ALLOWED_STRINGS = 89;
	/** RegularExpression Id. */
	int ALLOWED_LEXEMES = 90;
	/** RegularExpression Id. */
	int ALLOWED_INTEGERS = 91;
	/** RegularExpression Id. */
	int ALLOWED_LONGS = 92;
	/** RegularExpression Id. */
	int ALLOWED_SHORTS = 93;
	/** RegularExpression Id. */
	int ALLOWED_FLOATS = 94;
	/** RegularExpression Id. */
	int ALLOWED_DOUBLES = 95;
	/** RegularExpression Id. */
	int ALLOWED_NUMBERS = 96;
	/** RegularExpression Id. */
	int ALLOWED_VALUES = 97;
	/** RegularExpression Id. */
	int RANGE = 98;
	/** RegularExpression Id. */
	int CARDINALITY = 99;
	/** RegularExpression Id. */
	int ACTIVE = 100;
	/** RegularExpression Id. */
	int ASSERT = 101;
	/** RegularExpression Id. */
	int RETRACT = 102;
	/** RegularExpression Id. */
	int FIND_FACT_BY_FACT = 103;
	/** RegularExpression Id. */
	int MODIFY = 104;
	/** RegularExpression Id. */
	int DUPLICATE = 105;
	/** RegularExpression Id. */
	int FACT_RELATION = 106;
	/** RegularExpression Id. */
	int IF = 107;
	/** RegularExpression Id. */
	int THEN = 108;
	/** RegularExpression Id. */
	int ELSE = 109;
	/** RegularExpression Id. */
	int WHILE = 110;
	/** RegularExpression Id. */
	int DO = 111;
	/** RegularExpression Id. */
	int LOOP_FOR_COUNT = 112;
	/** RegularExpression Id. */
	int SWITCH = 113;
	/** RegularExpression Id. */
	int CASE = 114;
	/** RegularExpression Id. */
	int VARSYMBOL = 115;
	/** RegularExpression Id. */
	int SINGLEVAR = 116;
	/** RegularExpression Id. */
	int MULTIVAR = 117;
	/** RegularExpression Id. */
	int SYMBOL = 118;

	/** Lexical state. */
	int DEFAULT = 0;

	/** Literal token values. */
	String[] tokenImage = { "<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"",
			"<SINGLE_LINE_COMMENT>", "\"(\"", "\")\"", "<DIGIT>", "<INTEGER>",
			"<FLOAT>", "<EXPONENT>", "<GMT_OFFSET>", "<DATE>", "<TIME>",
			"<DATETIME>", "\"silent\"", "<STRING>", "\"?\"", "\"$?\"",
			"<GLOBALVAR>", "\"deffacts\"", "\"deftemplate\"",
			"\"deftemplate_construct\"", "\"defrule\"", "\"deffunction\"",
			"\"functiongroup\"", "\"defgeneric\"", "\"defmodule\"",
			"\"defglobal\"", "\"default\"", "\"default-dynamic\"",
			"\"?DEFAULT\"", "\"?DERIVE\"", "\"?NONE\"", "\"?ALL\"", "\"slot\"",
			"\"single-slot\"", "\"multislot\"", "\"=>\"", "\"slow-compile\"",
			"\"declare\"", "\"salience\"", "\"temporal-validity\"",
			"\"millisecond\"", "\"second\"", "\"minute\"", "\"hour\"",
			"\"day\"", "\"month\"", "\"year\"", "\"weekday\"", "\"duration\"",
			"\"auto-focus\"", "\"rule-version\"", "\"type\"", "<TRUE>",
			"<FALSE>", "<NIL>", "\"not\"", "\"and\"", "\"or\"", "\"of\"",
			"\"logical\"", "\"test\"", "\"exists\"", "\"forall\"",
			"\"object\"", "\"<-\"", "\"~\"", "\"&\"", "\"|\"", "\":\"",
			"\"=\"", "\"?VARIABLE\"", "\"SYMBOL\"", "\"STRING\"",
			"\"DATETIME\"", "\"LEXEME\"", "\"INTEGER\"", "\"SHORT\"",
			"\"LONG\"", "\"FLOAT\"", "\"DOUBLE\"", "\"NUMBER\"", "\"BOOLEAN\"",
			"\"EXTERNAL-ADDRESS\"", "\"FACT-ADDRESS\"", "\"allowed-symbols\"",
			"\"allowed-strings\"", "\"allowed-lexemes\"",
			"\"allowed-integers\"", "\"allowed-longs\"", "\"allowed-shorts\"",
			"\"allowed-floats\"", "\"allowed-doubles\"", "\"allowed-numbers\"",
			"\"allowed-values\"", "\"range\"", "\"cardinality\"", "\"active\"",
			"\"assert\"", "\"retract\"", "\"find-fact-by-fact\"", "\"modify\"",
			"\"duplicate\"", "\"fact-relation\"", "\"if\"", "\"then\"",
			"\"else\"", "\"while\"", "\"do\"", "\"loop-for-count\"",
			"\"switch\"", "\"case\"", "<VARSYMBOL>", "<SINGLEVAR>",
			"<MULTIVAR>", "<SYMBOL>", };

}
