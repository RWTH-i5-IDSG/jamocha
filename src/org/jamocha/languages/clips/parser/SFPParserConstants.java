/* Generated By:JJTree&JavaCC: Do not edit this line. SFPParserConstants.java */
/*
 * Copyright 2007 Karl-Heinz Krempels, Sebastian Reinartz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.jamocha.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package org.jamocha.languages.clips.parser;

public interface SFPParserConstants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 5;
  int LBRACE = 6;
  int RBRACE = 7;
  int DIGIT = 8;
  int INTEGER = 9;
  int FLOAT = 10;
  int EXPONENT = 11;
  int GMT_OFFSET = 12;
  int DATE = 13;
  int TIME = 14;
  int DATETIME = 15;
  int SILENT = 16;
  int STRING = 17;
  int SFWILDCARD = 18;
  int MFWILDCARD = 19;
  int GLOBALVAR = 20;
  int DEFFACTS = 21;
  int DEFTEMPLATE = 22;
  int DEFTEMPLATE_CONSTRUCT = 23;
  int DEFRULE = 24;
  int DEFFUNCTION = 25;
  int FUNCTIONGROUP = 26;
  int DEFGENERIC = 27;
  int DEFMODULE = 28;
  int DEFGLOBAL = 29;
  int DEFAULT_ATR = 30;
  int DYNAMIC_ATR = 31;
  int ATR_DEFAULT = 32;
  int ATR_DERIVE = 33;
  int ATR_NONE = 34;
  int ATR_ALL = 35;
  int SLOT = 36;
  int SINGLE_SLOT = 37;
  int MULTISLOT = 38;
  int ARROW = 39;
  int SLOWCOMPILE = 40;
  int DECLARE = 41;
  int SALIENCE = 42;
  int TEMPORALVALIDITY = 43;
  int SECOND = 44;
  int MINUTE = 45;
  int HOUR = 46;
  int DAY = 47;
  int MONTH = 48;
  int YEAR = 49;
  int WEEKDAY = 50;
  int DURATION = 51;
  int AUTOFOCUS = 52;
  int RULEVERSION = 53;
  int TYPE = 54;
  int TRUE = 55;
  int FALSE = 56;
  int NIL = 57;
  int NOT = 58;
  int AND = 59;
  int OR = 60;
  int OF = 61;
  int LOGICAL = 62;
  int TEST = 63;
  int EXISTS = 64;
  int FORALL = 65;
  int OBJECT = 66;
  int ASSIGN = 67;
  int TILDE = 68;
  int AMPERSAND = 69;
  int LINE = 70;
  int COLON = 71;
  int EQUALS = 72;
  int VARIABLE_TYPE = 73;
  int SYMBOL_TYPE = 74;
  int STRING_TYPE = 75;
  int DATETIME_TYPE = 76;
  int LEXEME_TYPE = 77;
  int INTEGER_TYPE = 78;
  int SHORT_TYPE = 79;
  int LONG_TYPE = 80;
  int FLOAT_TYPE = 81;
  int DOUBLE_TYPE = 82;
  int NUMBER_TYPE = 83;
  int BOOLEAN_TYPE = 84;
  int EXTERNAL_ADDRESS_TYPE = 85;
  int FACT_ADDRESS_TYPE = 86;
  int ALLOWED_SYMBOLS = 87;
  int ALLOWED_STRINGS = 88;
  int ALLOWED_LEXEMES = 89;
  int ALLOWED_INTEGERS = 90;
  int ALLOWED_LONGS = 91;
  int ALLOWED_SHORTS = 92;
  int ALLOWED_FLOATS = 93;
  int ALLOWED_DOUBLES = 94;
  int ALLOWED_NUMBERS = 95;
  int ALLOWED_VALUES = 96;
  int RANGE = 97;
  int CARDINALITY = 98;
  int ACTIVE = 99;
  int ASSERT = 100;
  int RETRACT = 101;
  int FIND_FACT_BY_FACT = 102;
  int MODIFY = 103;
  int DUPLICATE = 104;
  int FACT_RELATION = 105;
  int IF = 106;
  int THEN = 107;
  int ELSE = 108;
  int WHILE = 109;
  int DO = 110;
  int LOOP_FOR_COUNT = 111;
  int SWITCH = 112;
  int CASE = 113;
  int VARSYMBOL = 114;
  int SINGLEVAR = 115;
  int MULTIVAR = 116;
  int SYMBOL = 117;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SINGLE_LINE_COMMENT>",
    "\"(\"",
    "\")\"",
    "<DIGIT>",
    "<INTEGER>",
    "<FLOAT>",
    "<EXPONENT>",
    "<GMT_OFFSET>",
    "<DATE>",
    "<TIME>",
    "<DATETIME>",
    "\"silent\"",
    "<STRING>",
    "\"?\"",
    "\"$?\"",
    "<GLOBALVAR>",
    "\"deffacts\"",
    "\"deftemplate\"",
    "\"deftemplate_construct\"",
    "\"defrule\"",
    "\"deffunction\"",
    "\"functiongroup\"",
    "\"defgeneric\"",
    "\"defmodule\"",
    "\"defglobal\"",
    "\"default\"",
    "\"default-dynamic\"",
    "\"?DEFAULT\"",
    "\"?DERIVE\"",
    "\"?NONE\"",
    "\"?ALL\"",
    "\"slot\"",
    "\"single-slot\"",
    "\"multislot\"",
    "\"=>\"",
    "\"slow-compile\"",
    "\"declare\"",
    "\"salience\"",
    "\"temporal-validity\"",
    "\"second\"",
    "\"minute\"",
    "\"hour\"",
    "\"day\"",
    "\"month\"",
    "\"year\"",
    "\"weekday\"",
    "\"duration\"",
    "\"auto-focus\"",
    "\"rule-version\"",
    "\"type\"",
    "<TRUE>",
    "<FALSE>",
    "<NIL>",
    "\"not\"",
    "\"and\"",
    "\"or\"",
    "\"of\"",
    "\"logical\"",
    "\"test\"",
    "\"exists\"",
    "\"forall\"",
    "\"object\"",
    "\"<-\"",
    "\"~\"",
    "\"&\"",
    "\"|\"",
    "\":\"",
    "\"=\"",
    "\"?VARIABLE\"",
    "\"SYMBOL\"",
    "\"STRING\"",
    "\"DATETIME\"",
    "\"LEXEME\"",
    "\"INTEGER\"",
    "\"SHORT\"",
    "\"LONG\"",
    "\"FLOAT\"",
    "\"DOUBLE\"",
    "\"NUMBER\"",
    "\"BOOLEAN\"",
    "\"EXTERNAL-ADDRESS\"",
    "\"FACT-ADDRESS\"",
    "\"allowed-symbols\"",
    "\"allowed-strings\"",
    "\"allowed-lexemes\"",
    "\"allowed-integers\"",
    "\"allowed-longs\"",
    "\"allowed-shorts\"",
    "\"allowed-floats\"",
    "\"allowed-doubles\"",
    "\"allowed-numbers\"",
    "\"allowed-values\"",
    "\"range\"",
    "\"cardinality\"",
    "\"active\"",
    "\"assert\"",
    "\"retract\"",
    "\"find-fact-by-fact\"",
    "\"modify\"",
    "\"duplicate\"",
    "\"fact-relation\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"loop-for-count\"",
    "\"switch\"",
    "\"case\"",
    "<VARSYMBOL>",
    "<SINGLEVAR>",
    "<MULTIVAR>",
    "<SYMBOL>",
  };

}
