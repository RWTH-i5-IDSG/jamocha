/* Generated By:JJTree&JavaCC: Do not edit this line. SFPParserTokenManager.java */
/*
 * Copyright 2007 Karl-Heinz Krempels, Sebastian Reinartz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.jamocha.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package org.jamocha.languages.clips.parser;

public class SFPParserTokenManager implements SFPParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000004000000L) != 0L || (active1 & 0x90000000L) != 0L)
         {
            jjmatchedKind = 107;
            return 39;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 107;
            return 42;
         }
         if ((active0 & 0x80000L) != 0L)
            return 47;
         if ((active0 & 0x20100000000000L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 107;
            return 34;
         }
         if ((active0 & 0x35e0f70fbe10000L) != 0L || (active1 & 0xfd6fffed7fL) != 0L)
         {
            jjmatchedKind = 107;
            return 112;
         }
         if ((active0 & 0x8000000f00040000L) != 0L)
            return 20;
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 107;
            return 62;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
            return 112;
         if ((active1 & 0x1080L) != 0L)
         {
            jjmatchedKind = 107;
            return 68;
         }
         return -1;
      case 1:
         if ((active0 & 0x80000L) != 0L)
            return 48;
         if ((active0 & 0x1f31f70ffe10000L) != 0L || (active1 & 0xee7fffefffL) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 1;
            return 112;
         }
         if ((active0 & 0x20c000000000000L) != 0L || (active1 & 0x1100000000L) != 0L)
            return 112;
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 1;
            return 67;
         }
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 1;
            return 38;
         }
         if ((active0 & 0x8000000f00000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 1;
            return 46;
         }
         return -1;
      case 2:
         if ((active0 & 0x3000000000000L) != 0L)
            return 112;
         if ((active0 & 0x8000000f00000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
            return 46;
         }
         if ((active0 & 0x1f01f70ffe10000L) != 0L || (active1 & 0xeeffffffffL) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
            return 112;
         }
         return -1;
      case 3:
         if ((active0 & 0x800000000L) != 0L)
            return 46;
         if ((active0 & 0x1d00f60ffe10000L) != 0L || (active1 & 0x68ffffffbfL) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
            return 112;
         }
         if ((active0 & 0x20101000000000L) != 0L || (active1 & 0x8600000040L) != 0L)
            return 112;
         if ((active0 & 0x8000000700000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 3;
            return 46;
         }
         return -1;
      case 4:
         if ((active0 & 0x400000000L) != 0L)
            return 46;
         if ((active1 & 0x8008000a0L) != 0L)
            return 112;
         if ((active0 & 0x1d00f60ffe10000L) != 0L || (active1 & 0x60ff7fff1fL) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 4;
            return 112;
         }
         if ((active0 & 0x8000000300000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 4;
            return 46;
         }
         return -1;
      case 5:
         if ((active0 & 0x1c0000000010000L) != 0L || (active1 & 0x402600030bL) != 0L)
            return 112;
         if ((active0 & 0x100f60ffe00000L) != 0L || (active1 & 0x20d97ffc14L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 5;
            return 112;
         }
         if ((active0 & 0x8000000300000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 5;
            return 46;
         }
         return -1;
      case 6:
         if ((active0 & 0x200000000L) != 0L)
            return 46;
         if ((active0 & 0x8000000100000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 105;
               jjmatchedPos = 6;
            }
            return 46;
         }
         if ((active0 & 0x100100c1000000L) != 0L || (active1 & 0x8000410L) != 0L)
            return 112;
         if ((active0 & 0xe603ee00000L) != 0L || (active1 & 0x20d17ff804L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 6;
            }
            return 112;
         }
         return -1;
      case 7:
         if ((active0 & 0x100000000L) != 0L)
            return 46;
         if ((active0 & 0x20000200000L) != 0L || (active1 & 0x4L) != 0L)
            return 112;
         if ((active0 & 0xc60bec00000L) != 0L || (active1 & 0x20d17ff800L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
            return 112;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 7;
            return 46;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000000000000000L) != 0L)
            return 46;
         if ((active0 & 0x4030000000L) != 0L || (active1 & 0x40000000L) != 0L)
            return 112;
         if ((active0 & 0xc208ec00000L) != 0L || (active1 & 0x20917ff800L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 8;
            return 112;
         }
         return -1;
      case 9:
         if ((active0 & 0x40008000000L) != 0L)
            return 112;
         if ((active0 & 0x82086c00000L) != 0L || (active1 & 0x20917ff800L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 9;
            return 112;
         }
         return -1;
      case 10:
         if ((active0 & 0x2002c00000L) != 0L || (active1 & 0x1000000L) != 0L)
            return 112;
         if ((active0 & 0x80084000000L) != 0L || (active1 & 0x20907ff800L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 10;
            }
            return 112;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x1000L) != 0L)
            return 112;
         if ((active0 & 0x84800000L) != 0L || (active1 & 0x20907fe800L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 11;
            return 112;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000L) != 0L || (active1 & 0x80020000L) != 0L)
            return 112;
         if ((active0 & 0x80800000L) != 0L || (active1 & 0x20107de800L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 12;
            return 112;
         }
         return -1;
      case 13:
         if ((active0 & 0x80800000L) != 0L || (active1 & 0x1031e800L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 13;
            return 112;
         }
         if ((active1 & 0x20004c0000L) != 0L)
            return 112;
         return -1;
      case 14:
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x30e000L) != 0L)
            return 112;
         if ((active0 & 0x800000L) != 0L || (active1 & 0x10010800L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 14;
            return 112;
         }
         return -1;
      case 15:
         if ((active1 & 0x10800L) != 0L)
            return 112;
         if ((active0 & 0x800000L) != 0L || (active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 15;
            return 112;
         }
         return -1;
      case 16:
         if ((active1 & 0x10000000L) != 0L)
            return 112;
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 16;
            return 112;
         }
         return -1;
      case 17:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 17;
            return 112;
         }
         return -1;
      case 18:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 18;
            return 112;
         }
         return -1;
      case 19:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 19;
            return 112;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 38:
         return jjStopAtPos(0, 59);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 58:
         return jjStartNfaWithStates_0(0, 61, 112);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 63:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x8000000f00000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x104L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1080L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x48L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x23L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2040000000000L, 0x67fe000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8001000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100fbe00000L, 0x1040000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x400000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000004000000L, 0x90000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x2000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10c000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x8800000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x23000010000L, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20100000000000L, 0x200000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 124:
         return jjStopAtPos(0, 60);
      case 126:
         return jjStopAtPos(0, 58);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 112);
         break;
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      case 63:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 48);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x1004L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x10L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x540L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x8081800000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200100fbe00000L, active1, 0x8000000L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 112);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 96, 112);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa00000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000010000L, active1, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x4007fe000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 111:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 100, 112);
         return jjMoveStringLiteralDfa2_0(active0, 0x91000000000000L, active1, 0x2020000000L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 112);
         break;
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xc4004000000L, active1, 0x40000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x201L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x4a0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x814L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x80000000L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 112);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0xfbe00000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x4800000000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xa4000010000L, active1, 0x7fe000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000L, active1, 0x10800000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x2000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x8404000000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 112);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0xa000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x301L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x81cL);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 71:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 112);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 76:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000200000000L, active1, 0x20L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000c0000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x11000000L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 112);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 112);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 112);
         return jjMoveStringLiteralDfa4_0(active0, 0x100080000010000L, active1, 0x4000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x2028000000L, active1, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10020000000000L, active1, 0x22000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x840000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L);
      case 110:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 112);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x7fe000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 112);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 112);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000c00000L, active1, 0x4080000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000L, active1, 0x2090001000L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 69:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x600L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000200000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 84:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 112);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 112);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000200000L, active1, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x110000000000000L, active1, 0x4000000000L);
      case 101:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 112);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 112);
         return jjMoveStringLiteralDfa5_0(active0, 0x20008c00000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x41000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x80002020000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000004000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0xc3000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x7fe000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x1400L);
      case 69:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 112);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 112);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 71:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 112);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 76:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 112);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 82:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 112);
         break;
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0x48000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
      case 101:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 112);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x7fe000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x2010000000L);
      case 104:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 112);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 112);
         return jjMoveStringLiteralDfa6_0(active0, 0xc1000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000a000000L, active1, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x80000000L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 112);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 112);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 112);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 112);
         break;
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 69:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 46);
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 78:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 112);
         break;
      case 82:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 112);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x51000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20002000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x7fe000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 112);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 112);
         return jjMoveStringLiteralDfa7_0(active0, 0x80008000000L, active1, 0x80000000L);
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 112);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40004000000L, active1, 0x2000000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 112);
         return jjMoveStringLiteralDfa7_0(active0, 0x80200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0x7fe000L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 69:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 112);
         break;
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x800L);
      case 84:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 46);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0x10000000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 112);
         break;
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x10c00000L, active1, 0x81000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x80008000000L, active1, 0x2000000000L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 112);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000800L);
      case 69:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 46);
         break;
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0xc00000L, active1, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0x100000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 112);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 94, 112);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0xa000000L, active1, 0x1010000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 112);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0x28000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0x46000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 112);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000L);
      case 99:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 112);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x2002000000L, active1, 0x120000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L, active1, 0L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 112);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0xc00000L, active1, 0x81004000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x202000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 25, 112);
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L, active1, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x80004000000L, active1, 0x20000c0000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 37, 112);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L);
      case 120:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000L);
      case 121:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 88, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800L);
      case 83:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 76, 112);
         break;
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000L, active1, 0x80000L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x302000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x18000L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 43, 112);
         break;
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L, active1, 0x2000400000L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000000L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x600000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000L, active1, 0x8000L);
      case 110:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(12, 95, 112);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000004000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L);
      case 112:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(12, 26, 112);
         break;
      case 115:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(12, 81, 112);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x118000L);
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10000000L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000L);
      case 115:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 82, 112);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 83, 112);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(13, 86, 112);
         break;
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 101, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10000000L);
      case 99:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(14, 31, 112);
         break;
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10000L);
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(14, 77, 112);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(14, 78, 112);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(14, 79, 112);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(14, 84, 112);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(14, 85, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 83:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(15, 75, 112);
         break;
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x10000000L);
      case 115:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(15, 80, 112);
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(16, 92, 112);
         return jjMoveStringLiteralDfa17_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(20, 23, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 112;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 39:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 112:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 34:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 0:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 59)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 45;
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 20;
                  if ((0x5400fc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(15, 20);
                  }
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 67:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 20:
                  if (curChar == 42)
                     jjAddStates(25, 27);
                  break;
               case 68:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 38:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 62:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(9);
                  break;
               case 10:
               case 13:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 14:
                  if (curChar == 34 && kind > 17)
                     kind = 17;
                  break;
               case 15:
               case 18:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 19:
                  if (curChar == 39 && kind > 17)
                     kind = 17;
                  break;
               case 21:
                  if ((0x5400fc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if (curChar == 42 && kind > 20)
                     kind = 20;
                  break;
               case 23:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 24:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 25:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 26:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 27:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 28:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 29:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 22);
                  break;
               case 31:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 44:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 46:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 49:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 50:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 51:
                  if ((0x5400fc2affffd9ffL & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 52:
                  if ((0x57fffc2affffd9ffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(3, 5);
                  break;
               case 53:
                  if ((0x7400fc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(3, 5);
                  break;
               case 54:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if ((0x77fffc2affffd9ffL & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 56:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 57:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 58:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if ((0x77fffc2affffd9ffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(59);
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(79);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if (curChar != 46)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 84:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(85);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 88:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(89);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(15, 20);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(106, 109);
                  break;
               case 106:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(109);
                  break;
               case 109:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 105)
                     jjCheckNAdd(41);
                  break;
               case 39:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 112:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  break;
               case 34:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 0:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0xaffffffff7ffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if (curChar == 84)
                     jjAddStates(38, 39);
                  else if (curChar == 70)
                     jjAddStates(40, 41);
                  else if (curChar == 78)
                     jjAddStates(42, 43);
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 67:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(46);
                  break;
               case 68:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 38:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 62:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 105)
                     jjCheckNAdd(41);
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 1:
                  jjAddStates(12, 14);
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 92)
                     jjCheckNAddStates(9, 11);
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 17:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddStates(6, 8);
                  break;
               case 21:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0xaffffffff7ffffffL & l) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 24:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 25:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 26:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 27:
               case 28:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 29:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 22);
                  break;
               case 32:
                  if (curChar == 101 && kind > 45)
                     kind = 45;
                  break;
               case 33:
               case 76:
                  if (curChar == 117)
                     jjCheckNAdd(32);
                  break;
               case 35:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 37:
               case 69:
                  if (curChar == 115)
                     jjCheckNAdd(36);
                  break;
               case 40:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 108 && kind > 47)
                     kind = 47;
                  break;
               case 43:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 46:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(46);
                  break;
               case 48:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(49);
                  break;
               case 51:
                  if ((0xafffffffffffffffL & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 52:
                  if ((0xaffffffff7ffffffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(3, 5);
                  break;
               case 53:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(3, 5);
                  break;
               case 54:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if ((0xafffffffdfffffffL & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 56:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 57:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 58:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if ((0xafffffffdfffffffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(59);
                  break;
               case 60:
                  if (curChar == 78)
                     jjAddStates(42, 43);
                  break;
               case 61:
                  if (curChar == 76 && kind > 47)
                     kind = 47;
                  break;
               case 63:
                  if (curChar == 105)
                     jjCheckNAdd(41);
                  break;
               case 64:
                  if (curChar == 70)
                     jjAddStates(40, 41);
                  break;
               case 65:
                  if (curChar == 69 && kind > 46)
                     kind = 46;
                  break;
               case 66:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 70:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 84)
                     jjAddStates(38, 39);
                  break;
               case 73:
                  if (curChar == 69 && kind > 45)
                     kind = 45;
                  break;
               case 74:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 77:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 87:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  break;
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  break;
               case 112:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  break;
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 67:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  break;
               case 68:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(54, 55);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(59);
                  }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 21:
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 23:
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 27:
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(30, 22);
                  break;
               case 46:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 49:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(3, 5);
                  break;
               case 53:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(3, 5);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 57:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 112 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   57, 58, 59, 53, 54, 55, 16, 17, 19, 11, 12, 14, 1, 2, 4, 79, 
   80, 81, 86, 87, 91, 79, 80, 5, 86, 21, 23, 27, 24, 25, 26, 22, 
   25, 26, 22, 28, 29, 30, 75, 77, 68, 71, 62, 63, 8, 9, 84, 85, 
   88, 89, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", null, null, null, null, null, 
null, null, null, "\163\151\154\145\156\164", null, "\77", "\44\77", null, 
"\144\145\146\146\141\143\164\163", "\144\145\146\164\145\155\160\154\141\164\145", 
"\144\145\146\164\145\155\160\154\141\164\145\137\143\157\156\163\164\162\165\143\164", "\144\145\146\162\165\154\145", 
"\144\145\146\146\165\156\143\164\151\157\156", "\146\165\156\143\164\151\157\156\147\162\157\165\160", 
"\144\145\146\147\145\156\145\162\151\143", "\144\145\146\155\157\144\165\154\145", 
"\144\145\146\147\154\157\142\141\154", "\144\145\146\141\165\154\164", 
"\144\145\146\141\165\154\164\55\144\171\156\141\155\151\143", "\77\104\105\106\101\125\114\124", "\77\104\105\122\111\126\105", 
"\77\116\117\116\105", "\77\101\114\114", "\163\154\157\164", 
"\163\151\156\147\154\145\55\163\154\157\164", "\155\165\154\164\151\163\154\157\164", "\75\76", 
"\144\145\143\154\141\162\145", "\163\141\154\151\145\156\143\145", "\141\165\164\157\55\146\157\143\165\163", 
"\162\165\154\145\55\166\145\162\163\151\157\156", "\164\171\160\145", null, null, null, "\156\157\164", "\141\156\144", 
"\157\162", "\157\146", "\154\157\147\151\143\141\154", "\164\145\163\164", 
"\145\170\151\163\164\163", "\146\157\162\141\154\154", "\157\142\152\145\143\164", "\74\55", "\176", 
"\46", "\174", "\72", "\75", "\77\126\101\122\111\101\102\114\105", 
"\123\131\115\102\117\114", "\123\124\122\111\116\107", "\104\101\124\105\124\111\115\105", 
"\114\105\130\105\115\105", "\111\116\124\105\107\105\122", "\123\110\117\122\124", "\114\117\116\107", 
"\106\114\117\101\124", "\104\117\125\102\114\105", "\116\125\115\102\105\122", 
"\102\117\117\114\105\101\116", "\105\130\124\105\122\116\101\114\55\101\104\104\122\105\123\123", 
"\106\101\103\124\55\101\104\104\122\105\123\123", "\141\154\154\157\167\145\144\55\163\171\155\142\157\154\163", 
"\141\154\154\157\167\145\144\55\163\164\162\151\156\147\163", "\141\154\154\157\167\145\144\55\154\145\170\145\155\145\163", 
"\141\154\154\157\167\145\144\55\151\156\164\145\147\145\162\163", "\141\154\154\157\167\145\144\55\154\157\156\147\163", 
"\141\154\154\157\167\145\144\55\163\150\157\162\164\163", "\141\154\154\157\167\145\144\55\146\154\157\141\164\163", 
"\141\154\154\157\167\145\144\55\144\157\165\142\154\145\163", "\141\154\154\157\167\145\144\55\156\165\155\142\145\162\163", 
"\141\154\154\157\167\145\144\55\166\141\154\165\145\163", "\162\141\156\147\145", "\143\141\162\144\151\156\141\154\151\164\171", 
"\141\143\164\151\166\145", "\141\163\163\145\162\164", "\162\145\164\162\141\143\164", 
"\146\151\156\144\55\146\141\143\164\55\142\171\55\146\141\143\164", "\155\157\144\151\146\171", "\144\165\160\154\151\143\141\164\145", 
"\146\141\143\164\55\162\145\154\141\164\151\157\156", "\151\146", "\164\150\145\156", "\145\154\163\145", "\167\150\151\154\145", 
"\144\157", "\154\157\157\160\55\146\157\162\55\143\157\165\156\164", 
"\163\167\151\164\143\150", "\143\141\163\145", null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffff86c1L, 0xeffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x20L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[112];
private final int[] jjstateSet = new int[224];
protected char curChar;
public SFPParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SFPParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 112; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
