/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /Users/alex/Documents/workspace/Jamocha/src/main/org/jamocha/parser/slp/SL.jj */
/*@egen*//*
 * Copyright 2007 Karl-Heinz Krempels, Alexander Wilden
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.jamocha.org/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 **/

/**
 * Further information regarding the FIPA SL Content Language described in this
 * file at http://fipa.org/specs/fipa00008/index.html
 */


options {             
	STATIC=false;                                                              // create Visitor interface
	ERROR_REPORTING = true;
}



PARSER_BEGIN(SLParser)
package org.jamocha.parser.slp;

import org.jamocha.parser.ParserUtils;
import org.jamocha.adapter.sl.configurations.*;
import java.io.InputStream;
import java.io.StringReader;

public class SLParser/*@bgen(jjtree)*/implements SLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSLParserState jjtree = new JJTSLParserState();

/*@egen*/
	
	public static ContentSLConfiguration parse(String string) throws ParseException {
		SLParser parser = new SLParser(new StringReader(string));
    	SimpleNode content = parser.Content();
        return (ContentSLConfiguration) content.jjtAccept(new SLInterpreter(), null);
	}
	
	public static ContentSLConfiguration parse(InputStream stream) throws ParseException {
		SLParser parser = new SLParser(stream);
    	SimpleNode content = parser.Content();
        return (ContentSLConfiguration) content.jjtAccept(new SLInterpreter(), null);
	}
	
	public static void main(String args[]){
        try{
        	System.out.print("SL> ");
            ContentSLConfiguration res = SLParser.parse(System.in);
            String result = res.compile(SLCompileType.ACTION_AND_ASSERT);
            System.out.println(result);
            System.out.println("Thank you.");
        }
        catch(ParseException e){
            System.out.println("parse(): an invalid expression!");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        catch (TokenMgrError e){
            System.out.println("a Token Manager error!");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(SLParser)


/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN :
{
	< TRUE: "true">
	|
	< FALSE: "false">
	|
	< NOT: "not">
	|
	< AND: "and">
	|
	< OR: "or">
	|
	< IMPLIES: "implies">
	|
	< EQUIV: "equiv">
	|
	< EQUAL: "=">
	|
	< RESULT: "result">
	|
	< FORALL: "forall">
	|
	< EXISTS: "exists">
	|
	< MODAL_B: "B">
	|
	< MODAL_U: "U">
	|
	< MODAL_PG: "PG">
	|
	< MODAL_I: "I">
	|
	< FEASIBLE: "feasible">
	|
	< DONE: "done">
	|
	< IOTA: "iota">
	|
	< ANY: "any">
	|
	< ALL: "all">
	|
	< SEQUENCE: "sequence">
	|
	< SET: "set">
	|
	< ACTION: "action">
	|
	< PIPE: "|">
	|
	< SEMICOLON: ";">
	|
	< LBRACE: "(" >
	| 
	< RBRACE: ")" >
	|
	< STRING: <WORD> | <STRING_LITERAL> >
	|
	< WORD: (~["\u0000"-" ","(",")","#","0"-"9",":","-","?"]) (~["\u0000"-" ","(",")"])* >
	|
	< PARAMETER_NAME: ":" <STRING> >
	|
	< VARIABLE_IDENTIFIER: "?" <STRING> >
	|
 	< #SIGN: ["+", "-"]>
	|
	< INTEGER: ( <SIGN> )?  ( <DIGIT> )+ | ( <SIGN> )?  "0" ["x", "X"] ( <HEXDIGIT> )+ >
	|
	< FLOAT: ( <SIGN> )? <FLOATMANTISSA> ( <FLOATEXPONENT> )? |  ( <SIGN> )? ( <DIGIT> )+ ( <FLOATEXPONENT> ) >
	|
 	< FLOATMANTISSA: ( <DIGIT> )+ "." ( <DIGIT> )* | ( <DIGIT> )* "." ( <DIGIT> )+ >
	|
 	< FLOATEXPONENT: ["e", "E"] ( <SIGN> )? ( <DIGIT> )+ >
	|
	< #DIGIT: ["0"-"9"] >
	|
	< #HEXDIGIT: ["0"-"9", "A"-"F", "a"-"f"]>
	|
	< STRING_LITERAL: "\"" ( (~["\""]) | "\\\"" )* "\"" >
	|
	< DATETIME :	( <SIGN> )? (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])
              		(["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) ["t","T"]
              		(["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])
              		(["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["a"-"z","A"-"Z"])? >
}

/* Content syntax follows */
SimpleNode Content() :
{/*@bgen(jjtree) Content */
  SLContent jjtn000 = new SLContent(this, JJTCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Content */
        try {
/*@egen*/
	<LBRACE>  
	( 
				ContentExpression() 
	)+ 
	<RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


SimpleNode ContentExpression() :
{/*@bgen(jjtree) ContentExpression */
  SLContentExpression jjtn000 = new SLContentExpression(this, JJTCONTENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContentExpression */
        try {
/*@egen*/
	(LOOKAHEAD(2)
		Proposition()
		|
		(
		<LBRACE>
			(
				IdentifyingExpression()
				|
				ActionExpression()
			)
		<RBRACE>
		)
  	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode Proposition() :
{/*@bgen(jjtree) Proposition */
  SLProposition jjtn000 = new SLProposition(this, JJTPROPOSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Proposition */
        try {
/*@egen*/
	Wff()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


SimpleNode Wff() :
{/*@bgen(jjtree) Wff */
  SLWff jjtn000 = new SLWff(this, JJTWFF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Wff */
        try {
/*@egen*/
	(
		<LBRACE>
		(
			UnaryLogicalOp() Wff()
			|
			BinaryLogicalOp() Wff() Wff()
			|
			Quantifier() Variable() Wff()
			|
			ModalOp() Agent() Wff()
			|
			ActionOp() <LBRACE> ActionExpression() <RBRACE> [Wff()]
			|
			BinaryTermOp() TermOrIE() TermOrIE()
			|
			PredicateSymbol() (TermOrIE())+
		)
		<RBRACE>
	)
	|
	(
		BooleanSymbol()
		|
		PropositionSymbol()
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TermOrIE()       :
{}
{
	Term()
	|
	IdentifyingExpression()
}

void Term()       :
{}
{
	(
		Variable()
		|
		Constant()
		|
		<LBRACE>
		(
			ActionExpression()
			|
			FunctionalTerm()
			|
			SetOrSequence()
		)
		<RBRACE>
	)
}

SimpleNode IdentifyingExpression() :
{/*@bgen(jjtree) IdentifyingExpression */
  SLIdentifyingExpression jjtn000 = new SLIdentifyingExpression(this, JJTIDENTIFYINGEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdentifyingExpression */
        try {
/*@egen*/
	ReferentialOp() TermOrIE() Wff()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FunctionalTerm()       :
{}
{
	(LOOKAHEAD(2)
		FunctionalTermWithTermOrIE()
		|
		FunctionalTermWithParameter()
	)
}

SimpleNode FunctionalTermWithTermOrIE() :
{/*@bgen(jjtree) FunctionalTermWithTermOrIE */
  SLFunctionalTermWithTermOrIE jjtn000 = new SLFunctionalTermWithTermOrIE(this, JJTFUNCTIONALTERMWITHTERMORIE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionalTermWithTermOrIE */
        try {
/*@egen*/
	FunctionSymbol()
	(TermOrIE())+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode FunctionalTermWithParameter() :
{/*@bgen(jjtree) FunctionalTermWithParameter */
  SLFunctionalTermWithParameter jjtn000 = new SLFunctionalTermWithParameter(this, JJTFUNCTIONALTERMWITHPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionalTermWithParameter */
        try {
/*@egen*/
	FunctionSymbol()
	(Parameter())+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode ActionExpression() :
{/*@bgen(jjtree) ActionExpression */
  SLActionExpression jjtn000 = new SLActionExpression(this, JJTACTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ActionExpression */
        try {
/*@egen*/
	(
		t=<ACTION> Agent() TermOrIE()
		|
		t=<PIPE> <LBRACE> ActionExpression() <RBRACE> <LBRACE> ActionExpression() <RBRACE>
		|
		t=<SEMICOLON> <LBRACE> ActionExpression() <RBRACE> <LBRACE> ActionExpression() <RBRACE>
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode Agent() :
{/*@bgen(jjtree) Agent */
  SLAgent jjtn000 = new SLAgent(this, JJTAGENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Agent */
        try {
/*@egen*/
	TermOrIE()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode SetOrSequence() :
{/*@bgen(jjtree) SetOrSequence */
  SLSetOrSequence jjtn000 = new SLSetOrSequence(this, JJTSETORSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetOrSequence */
        try {
/*@egen*/
	(
		<SET>
		|
		<SEQUENCE>
	)
	(TermOrIE())*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode Parameter() :
{/*@bgen(jjtree) Parameter */
  SLParameter jjtn000 = new SLParameter(this, JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parameter */
        try {
/*@egen*/
	ParameterName() TermOrIE()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Operators */

SimpleNode UnaryLogicalOp() : 
{/*@bgen(jjtree) UnaryLogicalOp */
  SLUnaryLogicalOp jjtn000 = new SLUnaryLogicalOp(this, JJTUNARYLOGICALOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) UnaryLogicalOp */
    try {
/*@egen*/
    t=<NOT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


SimpleNode BinaryLogicalOp() : 
{/*@bgen(jjtree) BinaryLogicalOp */
  SLBinaryLogicalOp jjtn000 = new SLBinaryLogicalOp(this, JJTBINARYLOGICALOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) BinaryLogicalOp */
        try {
/*@egen*/
	(
		t=<AND>
		|
		t=<OR>
		|
		t=<IMPLIES>
		|
		t=<EQUIV>
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode BinaryTermOp() : 
{/*@bgen(jjtree) BinaryTermOp */
  SLBinaryTermOp jjtn000 = new SLBinaryTermOp(this, JJTBINARYTERMOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) BinaryTermOp */
        try {
/*@egen*/
	(
		t=<EQUAL>
		|
		t=<RESULT>
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode Quantifier() : 
{/*@bgen(jjtree) Quantifier */
  SLQuantifier jjtn000 = new SLQuantifier(this, JJTQUANTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Quantifier */
        try {
/*@egen*/
	(
		t=<FORALL>
		|
		t=<EXISTS>
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode ModalOp() : 
{/*@bgen(jjtree) ModalOp */
  SLModalOp jjtn000 = new SLModalOp(this, JJTMODALOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ModalOp */
        try {
/*@egen*/
	(
		t=<MODAL_B>
		|
		t=<MODAL_U>
		|
		t=<MODAL_PG>
		|
		t=<MODAL_I>
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode ActionOp() : 
{/*@bgen(jjtree) ActionOp */
  SLActionOp jjtn000 = new SLActionOp(this, JJTACTIONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ActionOp */
        try {
/*@egen*/
	(
		t=<FEASIBLE>
		|
		t=<DONE>
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode ReferentialOp() : 
{/*@bgen(jjtree) ReferentialOp */
  SLReferentialOp jjtn000 = new SLReferentialOp(this, JJTREFERENTIALOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ReferentialOp */
        try {
/*@egen*/
	(
		t=<IOTA>
		|
		t=<ANY>
		|
		t=<ALL>
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Symbols */

SimpleNode PropositionSymbol() :
{/*@bgen(jjtree) PropositionSymbol */
  SLPropositionSymbol jjtn000 = new SLPropositionSymbol(this, JJTPROPOSITIONSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PropositionSymbol */
        try {
/*@egen*/
	String()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode PredicateSymbol() :
{/*@bgen(jjtree) PredicateSymbol */
  SLPredicateSymbol jjtn000 = new SLPredicateSymbol(this, JJTPREDICATESYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PredicateSymbol */
        try {
/*@egen*/
	String()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode FunctionSymbol() :
{/*@bgen(jjtree) FunctionSymbol */
  SLFunctionSymbol jjtn000 = new SLFunctionSymbol(this, JJTFUNCTIONSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionSymbol */
        try {
/*@egen*/
	String()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Constants */

SimpleNode BooleanSymbol() : 
{/*@bgen(jjtree) BooleanSymbol */
  SLBooleanSymbol jjtn000 = new SLBooleanSymbol(this, JJTBOOLEANSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) BooleanSymbol */
    try {
/*@egen*/
    (
    	t=<TRUE>
    |	t=<FALSE>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode String() : 
{/*@bgen(jjtree) String */
  SLString jjtn000 = new SLString(this, JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	t=<STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		//jjtThis.setName(ParserUtils.getStringLiteral(t.image)); 
		jjtn000.setName(t.image);
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void NumericalConstant()       :
{}
{
    Integer()
    |
    Float()
}

SimpleNode Integer() :
{/*@bgen(jjtree) Integer */
  SLInteger jjtn000 = new SLInteger(this, JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	t = <INTEGER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


SimpleNode Float() :
{/*@bgen(jjtree) Float */
  SLFloat jjtn000 = new SLFloat(this, JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Float */
    try {
/*@egen*/
    t = <FLOAT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


SimpleNode DateTime() :
{/*@bgen(jjtree) DateTime */
  SLDateTime jjtn000 = new SLDateTime(this, JJTDATETIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DateTime */
    try {
/*@egen*/
    t = <DATETIME>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Constant()      :
{}
{
  NumericalConstant()
  |
  String()
  |
  DateTime()
}

SimpleNode Variable() :
{/*@bgen(jjtree) Variable */
  SLVariable jjtn000 = new SLVariable(this, JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Variable */
        try {
/*@egen*/
	t=<VARIABLE_IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode ParameterName() :
{/*@bgen(jjtree) ParameterName */
  SLParameterName jjtn000 = new SLParameterName(this, JJTPARAMETERNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ParameterName */
        try {
/*@egen*/
	t=<PARAMETER_NAME>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}