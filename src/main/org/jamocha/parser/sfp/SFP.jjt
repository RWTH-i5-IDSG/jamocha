/** 
		
	2007-04-04 : Reducing COOL to Jamocha Slim Fast Parser (sfp) - Karl-Heinz Krempels.
	2006-11-08 : Implementing the COOL Parser - Ulrich Loup, Ory Chowow-Liebman

	The Grammar is based on the CLIPS Object Oriented Language (COOL) used by
	the CLIPS Production system
	
	@author Karl-Heinz Krempels
*/

options {
	MULTI=true;
	STATIC=false;
	NODE_PREFIX="SFP";
	NODE_USES_PARSER=true;
    ERROR_REPORTING = true;
}


/* Java code used for the Parser. */
PARSER_BEGIN(SFPParser)
package org.jamocha.parser.sfp;

import java.util.ArrayList;

import org.jamocha.parser.JamochaType;
import org.jamocha.parser.Parser;
import org.jamocha.parser.ParserUtils;
import org.jamocha.parser.Expression;

import org.jamocha.rete.Rete;
import org.jamocha.rete.AbstractSlot;
import org.jamocha.rete.Fact;
import org.jamocha.rete.TemplateSlot;
import org.jamocha.rule.*;

public class SFPParser implements Parser{

        public Expression nextExpression() throws ParseException {
                return Start().getExpression();
        }

        public static void main(String args[])
        {
                boolean verbose = (args != null && args.length == 1 && "verbose".equals(args[0]));
                if(!verbose)System.out.println("Note: For verbose output type \"java Main verbose\".\n");
                System.out.print("SFP> ");
                Rete engine = new Rete();
                SFPParser p = new SFPParser(System.in);
                try
                {
                while (true)
                        {
                                SFPStart n = p.Start();
                                if (n==null) System.exit(0);
                                n.dump(" ");
//                                System.out.println(n.getExpression().getValue(engine).toString());
                        }
                }
                catch (Exception e)
                {
                        System.err.println("ERROR: " + e.getMessage());
                        if(verbose)e.printStackTrace();
                }
        }



}

PARSER_END(SFPParser)

/**********************************************
 * Lexical Specs
 */


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: ";" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN :
{
  < LBRACE: "(" >
| < RBRACE: ")" >| < GE1: ">=" >
| < #DIGIT: ["0"-"9"] >
| < INTEGER: (["+","-"])? (<DIGIT>)+ >
|
  < FLOAT:
        (<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
      | "." (<DIGIT>)+ (<EXPONENT>)?
      | (<DIGIT>)+ <EXPONENT>
  >
  
| < #EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+ >
| < #GMT_OFFSET: ("+"|"-") ( <DIGIT> )? <DIGIT> >
| < #DATE: <DIGIT> <DIGIT> <DIGIT> <DIGIT> "-" <DIGIT> <DIGIT> "-" <DIGIT> <DIGIT> >
| < #TIME: <DIGIT> <DIGIT> ":" <DIGIT> <DIGIT> ( ":" <DIGIT> <DIGIT>)? >
| < DATETIME:  <DATE> ( " " <TIME> (<GMT_OFFSET>)? )? > 
|
  < STRING:
      ("\"" ((~["\"","\\"]) | ("\\" ( ["\\","\""] )))* "\"") |
      ("\'" ((~["\'","\\"]) | ("\\" ( ["\\","\'"] )))* "\'")
  >
| < SFWILDCARD: "?" >
| < MFWILDCARD: "$?" >
| < GLOBALVAR: "?*" <SYMBOL> "*" >
| < DEFFACTS: "deffacts" >
| < DEFTEMPLATE: "deftemplate" >
| < DEFTEMPLATE_CONSTRUCT: "deftemplate_construct" >
| < DEFRULE: "defrule" >
| < DEFFUNCTION: "deffunction" >
| < DEFGENERIC: "defgeneric" >
| < DEFMODULE: "defmodule" >
| < DEFGLOBAL: "defglobal" >
| < DEFAULT_ATR: "default" >
| < DYNAMIC_ATR: "default-dynamic" >
| < ATR_DEFAULT: "?DEFAULT" >
| < ATR_DERIVE: "?DERIVE" >
| < ATR_NONE: "?NONE" >
| < ATR_ALL: "?ALL" >
| < SLOT: "slot" >
| < SINGLE_SLOT: "single-slot" >
| < MULTISLOT: "multislot" >
| < ARROW: "=>">
| < DECLARE: "declare" >
| < SALIENCE: "salience" >
| < AUTOFOCUS: "auto-focus" >
| <	TYPE: "type" >
| < TRUE: "TRUE" | "true" | "True" >
| < FALSE: "FALSE" | "false" | "False" >
| < NOT: "not" >
| < AND: "and" >
| < OR: "or" >
| < OF: "of" >
| < LOGICAL: "logical" >
| < TEST: "test" >
| < EXISTS: "exists" >
| < FORALL: "forall">
| < OBJECT: "object" >
| < ASSIGN: "<-" >
| < TILDE: "~" >
| < AMPERSAND: "&" >
| < LINE: "|" >
| < COLON: ":" >
| < EQUALS: "=" >
| < VARIABLE_TYPE: "?VARIABLE" >
| < SYMBOL_TYPE: "SYMBOL" >
| < STRING_TYPE: "STRING" >
| < DATETIME_TYPE: "DATETIME" >
| < LEXEME_TYPE: "LEXEME" >
| < INTEGER_TYPE: "INTEGER" >
| < FLOAT_TYPE: "FLOAT" >
| < NUMBER_TYPE: "NUMBER" >
| < EXTERNAL_ADDRESS_TYPE: "EXTERNAL-ADDRESS" >
| < FACT_ADDRESS_TYPE: "FACT-ADDRESS" >
| < ALLOWED_SYMBOLS: "allowed-symbols" >
| < ALLOWED_STRINGS: "allowed-strings" >
| < ALLOWED_LEXEMES: "allowed-lexemes" >
| < ALLOWED_INTEGERS: "allowed-integers" >
| < ALLOWED_FLOATS: "allowed-floats" >
| < ALLOWED_NUMBERS: "allowed-numbers" >
| < ALLOWED_VALUES: "allowed-values" >
| < RANGE: "range" >
| < CARDINALITY: "cardinality" >
| < ACTIVE: "active" >
	// Special functions
| < ASSERT: "assert" >
| < RETRACT: "retract" >
| < FIND_FACT_BY_FACT: "find-fact-by-fact" >
| < MODIFY: "modify" >
| < DUPLICATE: "duplicate" >
| < FACT_RELATION: "fact-relation" >
| < FACT_SLOT_VALUE: "fact-slot-value" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < DO: "do" >
| < LOOP_FOR_COUNT: "loop-for-count" >
| < SWITCH: "switch" >
| < CASE: "case" >
| < STAR: "*">
  // If you think this is ugly, you are right. See CLIPS Basic Progrmmers Guide:
  // "Numbers are symbols, but treated different. Instances are symbols, but treated different." 
| < #VARSYMBOL:  ["a"-"z","A"-"Z"] (~[" ","\r","\n","\t","\"","\'","(",")","&","|","<","~",";"])* >
| < SINGLEVAR: ("?" <VARSYMBOL>) >
| < MULTIVAR: ("$?" <VARSYMBOL>) >
| < SYMBOL:  
	(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","0"-"9","="])
	|(
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","[","="])
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","?","~",";","0"-"9"])*
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","<","~",";" ])*
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","]"])? 
	)
	|(
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","="])
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","?","~",";","0"-"9"])*
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","<","~",";" ])*
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","]"])+ 
	)
  >

}

/* TODO (From Clips Manual):
Data Types:
<file-name> ::= A symbol or string which is a valid file name (including path information)
	for the operating system under which CLIPS is running
<slot-name> ::= A valid deftemplate_construct slot name
<...-name> ::= A <symbol> where the ellipsis indicate what the symbol represents.
	For example, <rule-name> is a symbol which represents the name of a rule.
*/

/**********************************************
 * Cool Grammar Specs.
 */

// Start rule is a construct at a time, the parser reads all the constructs into a list.
SFPStart Start() : 
{}
{
   ( LOOKAHEAD(2)
	Construct() | Expression()
	
	) { return jjtThis; }
	| <EOF> { return null; }
}


/*
<number> ::= <float> | <integer> 
<lexeme> ::= <symbol> | <string>
<constant> ::= <datetime> | <symbol> | <string> | <integer> | <float>
*/



/**
*		Float
**/

SimpleNode Float() : 
{ Token t; }
{
	t=<FLOAT>
	{
		jjtThis.setName(t.image); 
		return jjtThis;
	}
}



/**
*		Integer
**/

SimpleNode Integer() : 
{ Token t; }
{
	t=<INTEGER>
	{
		jjtThis.setName(t.image); 
		return jjtThis;
	}
}



/**
*		DateTime
**/

SimpleNode DateTime() : 
{ Token t; }
{
	t=<DATETIME>
	{
		jjtThis.setName(t.image);
		return jjtThis;
	}
}



/**
*		Number
**/

void Number() #void : 
{}
{	
	(	Float()
	|	Integer() 
	)
}



/**
*		Symbol
**/

SimpleNode Symbol() : 
{ Token t; }
{
	t=<SYMBOL>
	{
		jjtThis.setName(t.image); 
		return jjtThis;
	}
}



/**
*		String
**/

SimpleNode String() : 
{ Token t; }
{
	t=<STRING>
	{
		jjtThis.setName(ParserUtils.getStringLiteral(t.image)); 
		return jjtThis;
	}

}



/**
*		Lexeme
**/

void Lexeme() #void : 
{}
{	
	(	String()
	|	Symbol() 
	)
}



/**
*		Constant
**/

void Constant() #void :
{}
{ 	
	(
		DateTime()
	|   Symbol()
	|	String()
	|	Integer()
	|	Float()
	)
}



/**
*		Construct Description
**/

SimpleNode ConstructDescription() : 
{}
{	
    "\"" 
    String() 
    "\""
    {return jjtThis; }
}



/**
*		Single Variable
**/
// This is used exactly then when only the variables value is needed

SimpleNode SingleVariable() : 
{ Token t; } 
{
	t=<SINGLEVAR>
	{ jjtThis.setName(t.image); return jjtThis;}
}



/**
*		Global Variable
**/
// This is used exactly then when only the variables value is needed

SimpleNode GlobalVariable() : 
{ Token t; } 
{
	t=<GLOBALVAR>
	{ jjtThis.setName(t.image); return jjtThis;}
}



/**
*		Multi Variable
**/
// This is used exactly then when only the variables contents are needed

SimpleNode MultiVariable() : 
{ Token t; } 
{
	t=<MULTIVAR>
	{ jjtThis.setName(t.image); return jjtThis;}
}



/**
*		Variable
**/
// This is used exactly then when only the variables value is needed

SimpleNode Variable() : 
{}
{	
	(	
		SingleVariable()
	|	MultiVariable()
	|	GlobalVariable() 
	) 
	{ return jjtThis; }
}



/**
*		Variable Type
**/
// This is used exactly then when only the variables contents are needed

SimpleNode VariableType() : 
{ Token t; } 
{
	t=<VARIABLE_TYPE>
	{ 
		jjtThis.setName(t.image); 
		return jjtThis;
	}
}


/**
*		Function Call
**/

// <function-call> ::= (<function-name> <expression>*)

SimpleNode FunctionCall() : 
{}
{
	<LBRACE> 
		(
			AssertFunc()
		|	RetractFunc()
		|   FindFactByFactFunc()	
		|	IfElseFunc()
		|	AnyFunction()
	) 
	<RBRACE>
	{ return jjtThis; }
}



/**
*		Any Function
**/

SimpleNode AnyFunction() : 
{}
{
 	Symbol()
 	(
 		Expression()
 	)* 
	{ return jjtThis; }
}



/**
*		Expression
**/

SimpleNode Expression() : 
{} 
{	
	(	LOOKAHEAD(2)
		Constant()
	|	Variable()
	|	FunctionCall() 
	) 
	{ return jjtThis; }
}



/****
**		 Special functions wich are defined by CLIPS to have
**		a non-standart syntax (e.g. not all parameters are expressions)
****/

/**
*		Assert Function
**/

SimpleNode AssertFunc() : 
{}
{
	<ASSERT>
	(
		RHSPattern()
	)+
	{ return jjtThis; }
}



/**
*		FindFactByFact Function
**/

SimpleNode FindFactByFactFunc() : 
{}
{
	<FIND_FACT_BY_FACT>
	( 
		RHSPattern()
	)
	{ return jjtThis; }
}



/**
*		Retract Function
**/

SimpleNode RetractFunc() : 
{}
{
	<RETRACT>
	(
		<STAR>	// Retract all
	|	(
			(Expression())*		// Integers and 'retract-specifiers' see BPG
		)
	)
//	RHSPattern()+
	{ return jjtThis; }
}



/**
*		If Else Function
**/

SimpleNode IfElseFunc() : 
{}
{
	<IF>
	Expression()
	<THEN>
	ActionList()
	[
		<ELSE>
		ActionList()
	]
	{ return jjtThis; }
}



/**
*		While Function
**/

SimpleNode WhileFunc() : 
{}
{
	<WHILE>
	Expression()
	[<DO>]
	ActionList()
	{ return jjtThis; }
}



/**
*		Loop For Count Function
**/

SimpleNode LoopForCntFunc() : 
{}
{
	<LOOP_FOR_COUNT>
	(
		<LBRACE>
		SingleVariable()
		[
			Expression()
			[ 
				Expression()
			]
		]
		<RBRACE>
	)
	[<DO>]
	ActionList()
	{ return jjtThis; }
}



/**
*		Case Switch Function
**/

SimpleNode SwitchCaseFunc() : 
{}
{
	<SWITCH>
	Expression()	// Test Expression
	(	LOOKAHEAD(2)
		CaseStatement()
	)*
	[	
		"(" <DEFAULT_ATR> ActionList()
	]
	{ return jjtThis; }
}



/**
*		Case Statement Function
**/

SimpleNode CaseStatement() : 
{}
{
	<LBRACE> 
		<CASE> 
		Expression()	// Comparison Expression
		<THEN> 
		ActionList()
	<RBRACE>
}

/**
*		Default Statements for SwitchCaseFunc
**/
SimpleNode SwitchDefaults() : 
{}
{
	<LBRACE>
		<DEFAULT_ATR> 
		ActionList()
	<RBRACE>
	{ return jjtThis; }
}

/**
*		Construct - Definition Main Handler 
**/

void Construct() #void : {}
{
	<LBRACE>
		( LOOKAHEAD(2)
			DeftemplateConstruct()
		|	DefglobalConstruct()
		|	DefruleConstruct()
		|	DeffunctionConstruct()
		|	DefmoduleConstruct()
		)
	<RBRACE>
}



/**
*		Deftemplate Construct
**/  
// <deftemplate-construct> ::= (deftemplate <deftemplate-name> [<comment>] <slot-definition>*)

SimpleNode DeftemplateConstruct() :
{}
{
        <DEFTEMPLATE>
		Symbol()
	    [ 
		  ConstructDescription()
		]
        (
			SlotDefinition()
        )*
        { return jjtThis; }
}



/**
*		Slot Definition
**/  
//<slot-definition> ::= <single-slot-definition> | <multislot-definition>

void  SlotDefinition()  #void: 
{}
{
    ( 	
		<LBRACE> 
		(
					SingleSlotDefinition()
				| 	MultiSlotDefinition()
			)
		<RBRACE> 
    )
}



/**
*		Single Slot Definition
**/
//< single-slot-definition> ::= ( slot <slot-name> <template-attribute>*)

SimpleNode SingleSlotDefinition() :
{}
{
	<SLOT>
	(
		Symbol()
		(
			TemplateAttribute()
		)*
	)
	{ return jjtThis; }
}



/**
*		Multi Slot Definition
**/
//<multislot-definition> ::= ( multislot <slot-name> <template-attribute>*)

SimpleNode MultiSlotDefinition() :
{} 
{
        <MULTISLOT>
	(
		Symbol()
		(
			TemplateAttribute()
		)*
	)
	{ return jjtThis; }
}



/**
*		Template Attribute
**/
//<template-attribute> ::= <default-attribute> | <constraint-attribute>

SimpleNode TemplateAttribute() : 
{}
{
	<LBRACE>
	(	LOOKAHEAD(2)
	    DefaultAttribute() 
	| 	DynamicAttribute()
	|	ConstraintAttribute()
	) 
	<RBRACE>
	{ return jjtThis; }
}



/**
*		Attributes
**/
// A dummy node to have a list of attributes

SimpleNode Attributes() :
{} 
{ 
	(	LOOKAHEAD(3)
		Expression()
	)*
	{ return jjtThis; }
}



/**
*		Default Attribute
**/
//<default-attribute> ::= (default ?DERIVE | ?NONE | <expression>*) | (default-dynamic <expression>*)

SimpleNode DefaultAttribute() : 
{}
{
		<DEFAULT_ATR>
		(	
			DeriveAttribute()
		|	NoneAttribute() 
		|	Attributes() 
		)
		{ return jjtThis; }
}



/**
*		Derive Attribute
**/

SimpleNode DeriveAttribute() : 
{ Token t; }
{
	t = <ATR_DERIVE>
	{
		jjtThis.setName(t.image); 
		return jjtThis;
	}
}



/**
*		None Attribute
**/

SimpleNode NoneAttribute() : 
{ Token t; }
{
	t = <ATR_NONE>
	{
		jjtThis.setName(t.image); 
		return jjtThis;
	}
}



/**
*		Dynamic Attribute
**/

//<default-attribute> ::= (default ?DERIVE | ?NONE | <expression>*) | (default-dynamic <expression>*)

SimpleNode DynamicAttribute() : 
{}
{
	<DYNAMIC_ATR> 
	(	
		Attributes()
	)
	{ return jjtThis; }
}



/**
*		Fact Construct
**/

/* Fact Specification
<ordered-RHS-pattern> ::= ( <symbol> <RHS-field>+ )

<template-RHS-pattern> ::= ( <deftemplate-name> <RHS-slot>* )

<RHS-slot> ::= <single-field-RHS-slot> | <multifield-RHS-slot>

<single-field-RHS-slot> ::= (<slot-name> <RHS-field>)

<multifield-RHS-slot> ::= (<slot-name> <RHS-field>*)

<RHS-field> ::= <variable> | <constant> | <function-call>
*/



/**
*		Right Hand Site Pattern
**/
// <RHS-pattern> ::= <ordered-RHS-pattern> | <template-RHS-pattern>

void RHSPattern() #void : 
{}
{ 
	<LBRACE>
			TemplateRHSPattern()
	// currently ordered RHS aren't implemented
	//	| 	OrderedRHSPattern(t.image);
    <RBRACE> 
    
}



/**
*		Template Right Hand Site Pattern
**/
//<template-RHS-pattern> ::= (<deftemplate-name> <RHS-slot>*)

SimpleNode TemplateRHSPattern() :
{}
{
		Symbol()
        ( 
        	RHSSlot() 
        )*
		{ return jjtThis; }
}



/**
*		Right Hand Site Slot
**/
//<RHS-slot> ::= <single-field-RHS-slot> | <multifield-RHS-slot>
//<single-field-RHS-slot> ::= (<slot-name> <RHS-field>)
//<multifield-RHS-slot> ::= (<slot-name> <RHS-field>*)

SimpleNode RHSSlot() : 
{}
{
    <LBRACE> 
        Symbol() // slot-name
        ( 
        	RHSField() 
        )*
    <RBRACE>
}



/**
*		Right Hand Site Field
**/

//<RHS-field> ::= <variable> | <constant> | <function-call>

void RHSField() #void : 
{}
{
    	Variable() 
    |   Constant() 
    |   FunctionCall()
}



/**
*		Define Rule Construct
**/

/*
<defrule-construct> ::= (defrule <rule-name> [<comment>] [<declaration>] <conditional-element>* => <expression>*) 
<rule-property> ::= (salience <integer-expression>) | (auto-focus <boolean-symbol>)
<boolean-symbol> ::= TRUE | FALSE
<conditional-element> ::= <pattern-CE> | <assigned-pattern-CE> | <not-CE> | <and-CE> | <or-CE> |
	<logical-CE> | <test-CE> | <exists-CE> | <forall-CE>
<pattern-CE> ::= <ordered-pattern-CE> | <template-pattern-CE> | <object-pattern-CE>
<assigned-pattern-CE> ::= <single-field-variable> <- <pattern-CE>
<not-CE> ::= (not <conditional-element>)
<and-CE> ::= (and <conditional-element>+)
<or-CE> ::= (or <conditional-element>+)
<logical-CE> ::= (logical <conditional-element>+)
<test-CE> ::= (test <function-call>)
<exists-CE> ::= (exists <conditional-element>+)
<forall-CE> ::= (forall <conditional-element> <conditional-element>+)
<ordered-pattern-CE> ::= (<symbol> <constraint>*)
<template-pattern-CE> ::= (<deftemplate-name> <LHS-slot>*)
<object-pattern-CE> ::= (object <attribute-constraint>*)
<attribute-constraint> ::= (is-a <constraint>) | (name <constraint>) | (<slot-name> <constraint>*)
<LHS-slot> ::= <single-field-LHS-slot> | <multifield-LHS-slot>
<single-field-LHS-slot> ::= (<slot-name> <constraint>)
<multifield-LHS-slot> ::= (<slot-name> <constraint>*)
<constraint> ::= ? | $? | <connected-constraint>
<connected-constraint>::= <single-constraint> | <single-constraint> & <connected-constraint> |
	<single-constraint> | <connected-constraint>
<single-constraint> ::= <term> | ~<term>
<term> ::= <constant> | <single-field-variable> | <multifield-variable> | 
	:<function-call> | =<function-call>
*/





/**
*		Define Rule Construct
**/
// <defrule-construct> ::= (defrule <rule-name> [<comment>] [<declaration>] <conditional-element>* => <expression>*) 

SimpleNode DefruleConstruct() :{}
{
   	<DEFRULE>
		Symbol() //name

		(	
			( ConstructDescription() )?
			( Declaration() )?
			( ConditionalElement() )*
		)
		
		
	<ARROW>
		ActionList() 
	{ return jjtThis; }
}


// Create Dummy node to have fixed number of children in Defrule
SimpleNode ActionList():{} 
{ 
	(	LOOKAHEAD(2)
		Expression()
	)* 
	{ return jjtThis; }
}




/**
*		Declaration
**/
//<declaration> ::= (declare <rule-property>+)

SimpleNode Declaration(): 
{}
{
    <LBRACE>
        <DECLARE>
        (
        	RuleProperty()
        )+
    <RBRACE>
    { return jjtThis; }
}



/**
*		Rule Property
**/
// <rule-property> ::= (salience <integer-expression>) | (auto-focus <boolean-symbol>)

SimpleNode RuleProperty(): 
{}
{
    <LBRACE>
     	(
			Salience()		
     	| 	AutoFocus()
		)
	<RBRACE>
	{ return jjtThis; }
}

SimpleNode Salience() :
{}
{
	<SALIENCE>
	Expression()
	{ return jjtThis; }
}

SimpleNode AutoFocus(): 
{}
{
	<AUTOFOCUS>
	BooleanSymbol()
}


/**
*		Boolean Symbol
**/
//<boolean-symbol> ::= TRUE | FALSE

SimpleNode BooleanSymbol() : { Token t;}
{
    ( 
    	t=<TRUE> 
    ) { jjtThis.setName(t.image); jjtThis.setToTrue(); return jjtThis; }
    |
    ( 
    	t=<FALSE> 
    ) { jjtThis.setName(t.image); jjtThis.setToFalse(); return jjtThis; }
}


//<conditional-element> ::= <pattern-CE> | <assigned-pattern-CE> | <not-CE> | <and-CE> | <or-CE> |
//                          <logical-CE> | <test-CE> | <exists-CE> | <forall-CE>
SimpleNode ConditionalElement() :
{}
{
	<LBRACE>
		(
			PatternCE() 
		|	AssignedPatternCE() 
		|	BooleanFunction() 
		|	LogicalCE() 
		|	TestCE()
		|	ExistsCE()
		|	ForallCE()
		)
	<RBRACE>
	{ return jjtThis; }	
}



/**
*		Boolean Functions
**/

SimpleNode BooleanFunction(): 
{}
{
	(
		NotFunction()
	|	AndFunction()
	|	OrFunction()	
	)	
	{ return jjtThis; }
}

SimpleNode NotFunction():
{}
{
	<NOT>
		ConditionalElement()
	{ return jjtThis; }
}

SimpleNode AndFunction():
{}
{	
	<AND>
		ConditionalElement()
	{ return jjtThis; }
}

SimpleNode OrFunction():
{}
{	
	<OR>
		ConditionalElement()
	{ return jjtThis; }
}	


/**
*		Pattern Conditional Element
**/
//<pattern-CE> ::= <ordered-pattern-CE> | <template-pattern-CE> | <object-pattern-CE>
// Create and return conditions
SimpleNode  PatternCE() : 
{}
{
	( LOOKAHEAD(2) 
		OrderedPatternCE() 
	|	TemplatePatternCE() 
	) 
	{ return jjtThis; }
}

//<assigned-pattern-CE> ::= <single-field-variable> <- <pattern-CE>
// Create and return conditions
SimpleNode AssignedPatternCE():
{}
{
	(
		SingleVariable() 
		<ASSIGN>
		PatternCE()
    ) { return jjtThis; }
}


//<logical-CE> ::= (logical <conditional-element>+)
// Create and return conditions
SimpleNode LogicalCE() : 
{}
{
    <LOGICAL> 
    (
		ConditionalElement()
    )+ 
    { return jjtThis; }
}

//<test-CE> ::= (test <function-call>)
// Create and return conditions (needs to initialize function 
// before execution, thus it gets a node
SimpleNode TestCE() : 
{}
{
	(
		<TEST>
		Symbol()
	)
	{ return jjtThis; }
}

//<exists-CE> ::= (exists <conditional-element>+)
// Create and return conditions
SimpleNode ExistsCE() : 
{}
{
    <EXISTS> 
    (
		ConditionalElement()
    )+
    { return ce; }
}

//<forall-CE> ::= (forall <conditional-element> <conditional-element>+)
// Create and return conditions
SimpleNode ForallCE() : 
{}
{
	(	
		<FORALL> 
		ConditionalElement() 
		(
			ConditionalElement()
		)+
	)	
	{return jjtThis; }
}

//<ordered-pattern-CE> ::= (<symbol> <constraint>*)
SimpleNode OrderedPatternCE() : 
{}
{
	Symbol()
	(
		Constraint()
	)*
	{ return jjtThis; }
}

//<template-pattern-CE> ::= (<deftemplate-name> <LHS-slot>*)
SimpleNode TemplatePatternCE(): 
{}
{
	Symbol()
	(
		LHSSlot()
	)*
   	{ return jjtThis; }
}

//<attribute-constraint> ::= (name <constraint>) | (<slot-name> <constraint>*)
SimpleNode AttributeConstraint() :
{}
{
    <LBRACE>
		(
			Symbol()
			(
				Constraint()
			)* 
		)
    <RBRACE> 
    { return jjtThis; }
}




//<LHS-slot> ::= <single-field-LHS-slot> | <multifield-LHS-slot>

SimpleNode LHSSlot()  : 
{}
{
	Symbol()
	(
		LOOKAHEAD(2)
		Constraint()
	)*
	{return jjtThis;}
}




//<constraint> ::= ? | $? | <connected-constraint>
void Constraint() #void : 
{}
{
    SingleFieldWildcard() 
    | MultiFieldWildcard() 
    | ConnectedConstraint()
}




SimpleNode SingleFieldWildcard() : 
{}
{
	<SFWILDCARD>
	{ return jjtThis; }
}



SimpleNode MultiFieldWildcard() : 
{}
{
	<MFWILDCARD>
	{ return jjtThis; }
}




//<connected-constraint>::= <single-constraint> | <single-constraint> & <connected-constraint> |
//	<single-constraint> | <connected-constraint>

// THIS IS WRONG: Ampersands and lines can be mixed!!
SimpleNode ConnectedConstraint() : 
{}
{
		Term() 
	[ 
		Ampersand()
	|	Line()
	]
	{ return jjtThis; }
}



SimpleNode Ampersand():
{}
{
	<AMPERSAND>
	ConnectedConstraint()
	{ return jjtThis; } 
}



SimpleNode Line():
{}
{
	<LINE>
	ConnectedConstraint()
	{ return jjtThis; } 
}



//<term> ::= <constant> | <single-field-variable> | <multifield-variable> | 
//	:<function-call> | =<function-call>
SimpleNode Term()  : 
{}
{
	[	
		Negation()
	] 
    ( LOOKAHEAD(3)
		Constant()
    |	SingleVariable()
    |	MultiVariable()
    |	Colon()
    |	Equals()
    )
    {return jjtThis;}
}



SimpleNode Negation() : 
{}
{
	<TILDE>
	
	{ return jjtThis; }
}



SimpleNode Colon() : 
{}
{
	<COLON>
	FunctionCall()
	{ return jjtThis; }
}



SimpleNode Equals() : 
{}
{
	<EQUALS>
	FunctionCall()
	{ return jjtThis; }
}

/* Defglobal Construct
<defglobal-construct> ::= (defglobal [<defmodule-name>] <global-assignment>*)
<global-assignment> ::= <global-variable> = <expression>
<global-variable> ::= ?*<symbol>*
*/

//<defglobal-construct> ::= (defglobal [<defmodule-name>] <global-assignment>*)
void DefglobalConstruct()  :{ Token t; }
{
        <DEFGLOBAL>
        [ 
            t=<SYMBOL>
            { jjtThis.setName(t.image); }	//defmodule-name 
        ]
        (GlobalAssignment())*
}

//<global-assignment> ::= <global-variable> = <expression>
void GlobalAssignment()  : { Token t; }
{
	t=<GLOBALVAR>
	{ jjtThis.setName(t.image); }	// Needs to access variable to set, can not use variable node
    <EQUALS>
    Expression()
}

/* Deffunction Construct
<deffunction-construct> 
	::= (deffunction <name> [<comment>] (<regular-parameter>* [<wildcard-parameter>]) <expression>*)
<regular-parameter> ::= <single-field-variable>
<wildcard-parameter> ::= <multifield-variable>
*/

//<deffunction-construct> 
//	::= (deffunction <name> [<comment>] (<regular-parameter>* [<wildcard-parameter>]) <expression>*)
void DeffunctionConstruct()  :
{ 
	Token t; 
	SimpleNode n; 
	ArrayList list = new ArrayList();
}
{
        <DEFFUNCTION>
        t=<SYMBOL>
        { jjtThis.setName(t.image); jjtThis.hasMultiVars(false);}//name
        [ t=<STRING> 
			{ jjtThis.setDocString(ParserUtils.getStringLiteral(t.image)); }
        ]
        "(" 
            (
				t=<SINGLEVAR>	{ list.add(t.image); }	// Should add strings or such to a java list here
			)*

			[ 
				t=<MULTIVAR> 
				{list.add(t.image); jjtThis.hasMultiVars(true);}
			] 
        ")"
        n=ActionList()
        { 
			jjtThis.setFunctionParams(list);
			jjtThis.setFunctionActions(n.getExpression()); 
		}
}


/* Ignored, produces multifield variable directly
//<wildcard-parameter> ::= <multifield-variable>
void WildcardParameter()  #void : {}
{
    <MULTIVAR>
}
*/

/* Defgeneric Construct
<defgeneric-construct> ::= (defgeneric <name> [<comment>])
*/
void DefgenericConstruct()  :{ Token t; }
{
        <DEFGENERIC>
        t=<SYMBOL>
        { jjtThis.setName(t.image); }	//name
        [ t=<STRING>
			{ jjtThis.setDocString(ParserUtils.getStringLiteral(t.image)); }
        ]
}


//<parameter-restriction> ::= <single-field-variable> | (<single-field-variable> <type>* [<query>])
void ParameterRestriction() : {}
{
	( LOOKAHEAD(2)
		(
			<SINGLEVAR>
		) |
		(
			<LBRACE>
				<SINGLEVAR> 
				(Type())* 
				[Query()]
			<RBRACE>
		)
	)
}

//<wildcard-parameter-restriction> ::= <multifield-variable> | (<multifield-variable> <type>* [<query>])
void WildcardParameterRestriction() : {}
{
	( LOOKAHEAD(2)
		(
			<MULTIVAR>
		) |
		(
			<LBRACE>
				<MULTIVAR> 
				(Type())* 
				[Query()]
			<RBRACE>
		)
	)
}

//<type> ::= <class-name>
void Type() : { Token t; }
{
	t = <SYMBOL>
	{ jjtThis.setName(t.image); }//class-name
}

//<query> ::= <global-variable> | <function-call>
void Query() : { Token t; }
{
		GlobalVariable()
	|	FunctionCall()
}

/*	Defclass Construct
<defclass-construct> ::= (defclass <name> [<comment>] (is-a <superclass-name>+)
	<slot>* <handler-documentation>*)
<slot> ::= (slot <name> <facet>*) | (single-slot <name> <facet>*) | (multislot <name> <facet>*)
<facet> ::= <default-facet> | <constraint-attribute>
<default-facet> ::= (default ?DERIVE | ?NONE | <expression>*) | (default-dynamic <expression>*)
*/


// JUST SET RULE ATTRIBUTE?
//<slot> ::= (slot <name> <facet>*) | (single-slot <name> <facet>*) | (multislot <name> <facet>*)
TemplateSlot Slot() #void : { Token t; TemplateSlot ts=new TemplateSlot();}
{
	<LBRACE>
		(
			<SLOT> { ts.setMultiSlot(false); }
		|	<SINGLE_SLOT> { ts.setMultiSlot(false); }
		|	<MULTISLOT> { ts.setMultiSlot(true); }
		)
		t = <SYMBOL>
		{ 
		 	ts.setName(t.image);
		}
		( Facet(ts) )*
	<RBRACE>
	{ return ts; }
}

//  <facet> ::= <default-facet> 
void Facet(TemplateSlot ts) #void : {}
{
	<LBRACE> 			// facets all have brackets
		( LOOKAHEAD(2)
			DefaultFacet(ts)
		|	ConstraintAttribute(ts)
		)
	<RBRACE>
}

//<default-facet> ::= (default ?DERIVE | ?NONE | <expression>*) | (default-dynamic <expression>*)

void DefaultFacet(TemplateSlot ts) #void : { SimpleNode n; }
{
	( 	<DEFAULT_ATR>
		(	<ATR_DERIVE> { ts.setDefaultDerive(); }
		|	<ATR_NONE> // { ts.setDefaultNone(); }
		|   n=Attributes() { ts.setStaticDefaultExpression(n.getExpression()); }
		) 
	) 
	|	
	( 	
		<DYNAMIC_ATR> 
		n=Attributes() { ts.setDynamicDefaultExpression(n.getExpression()); }
	)
}


/**
*		Constraint Attributes 
**/

//<constraint-attribute> ::= <type-attribute> | <allowed-constant-attribute> | 
//	<range-attribute> | <cardinality-attribute>

void ConstraintAttribute(TemplateSlot ts) #void : { }
{
	( LOOKAHEAD(2)
		TypeAttribute(ts)
	|	AllowedConstantAttribute()
	|	RangeAttribute()
	|	CardinalityAttribute()
	)
}



/**
*		Type Attribute
**/

//<type-attribute> ::= (type <type-specification>)

void TypeAttribute(TemplateSlot ts) #void : { }
{
	<TYPE> TypeSpecification(ts)
}



/**
*		Type Specification
**/

//<type-specification> ::= <allowed-type>+ | ?VARIABLE

void TypeSpecification(TemplateSlot ts)  #void : {}
{
	( AllowedType(ts) )+ 
	| VariableType()
}



/**
*		Allowed Type
**/

//<allowed-type> ::= SYMBOL | STRING | LEXEME | INTEGER | FLOAT | NUMBER |
// EXTERNAL-ADDRESS | FACT-ADDRESS | DATETIME

SimpleNode AllowedType(TemplateSlot ts)  : 
{ Token t; }
{
	(		<SYMBOL_TYPE>
		|	<STRING_TYPE>
		|	<DATETIME_TYPE>
		|	<LEXEME_TYPE>
		| 	<INTEGER_TYPE>
		| 	<FLOAT_TYPE>
		|	<NUMBER_TYPE>
		|	<FACT_ADDRESS_TYPE>
		|   <DATETIME>
	)
	{ 	
		jjtThis.setName(t.image);
		return jjtThis; 
	}
}



/**
*		Allowed Constant Atrributes
**/

// <allowed-constant-attribute> ::= (allowed-symbols <symbol-list>) | (allowed-strings <string-list>) |
//	(allowed-lexemes <lexeme-list> | (allowed-integers <integer-list>) | (allowed-floats <float-list>) |
//	(allowed-numbers <number-list>) | (allowed-values <value-list>)

SimpleNode AllowedConstantAttribute() : 
{}
{
	(
			t = <ALLOWED_SYMBOLS> SymbolList()
		|	t = <ALLOWED_STRINGS> StringList()
		|	t = <ALLOWED_LEXEMES> LexemeList()
		|	t = <ALLOWED_INTEGERS> IntegerList()
		|	t = <ALLOWED_FLOATS> FloatList()
		|	t = <ALLOWED_NUMBERS> NumberList()
		|	t = <ALLOWED_VALUES> ValueList()
	)
	
	{ 	
		jjtThis.setName(t.image);
		return jjtThis; 
	}
}



/**
*		Symbol List
**/

//<symbol-list> ::= <symbol>+ | ?VARIABLE

SimpleNode SymbolList() : {}
{
		( <SYMBOL> )+ 
	|	VariableType()
	{ return jjtThis; }
}



/**
*		String List
**/

//<string-list> ::= <string>+ | ?VARIABLE

SimpleNode StringList() : 
{}
{
		( <STRING> )+ 
	|	VariableType()
	{ return jjtThis; }
}



/**
*		Lexeme List
**/

//<lexeme-list> ::= <lexeme>+ | ?VARIABLE

SimpleNode LexemeList() : 
{}
{
		( Lexeme() )+ 
	|	VariableType()
	{ return jjtThis; }
}



/**
*		Integer List
**/

//<integer-list> ::= <integer>+ | ?VARIABLE

SimpleNode IntegerList() :
{}
{
		( <INTEGER> )+ 
	| 	VariableType()
	{ return jjtThis; }
}

/**
*		Float List
**/

//<float-list> ::= <float>+ | ?VARIABLE

SimpleNode FloatList() : 
{}
{
		( <FLOAT> )+ 
	|	VariableType()
	{ return jjtThis; }
}



/**
*		Number List
**/

//<number-list> ::= <number>+ | ?VARIABLE

SimpleNode NumberList() : 
{}
{
		( Number() )+ 
	| 	VariableType()
	{ return jjtThis; }
}



/**
*		Value List
**/

//<value-list> ::= <constant>+ | ?VARIABLE

SimpleNode ValueList() : 
{}
{
		( Constant() )+ 
	|	VariableType()
	{ return jjtThis; }
}



/**
*		Range Attribute
**/

//<range-attribute> ::= (range <range-specification> <range-specification>)

SimpleNode RangeAttribute() :
{}
{
	<RANGE> 
	
	RangeSpecification() 
	
	RangeSpecification()
	{ return jjtThis; }
}


/**
*		Range Specification
**/

//<range-specification> ::= <number> | ?VARIABLE

SimpleNode RangeSpecification()  : 
{}
{
		Number() 
	| 	VariableType()
	{ return jjtThis; }
}


//<cardinality-attribute> ::= (cardinality <cardinality-specification> <cardinality-specification>)
SimpleNode CardinalityAttribute()  : 
{}
{
	<CARDINALITY> 

	CardinalitySpecification() 

	CardinalitySpecification()
	{ return jjtThis; }
}



/**
*		Cardinality Specification
**/

//<cardinality-specification> ::= <integer> | ?VARIABLE

SimpleNode CardinalitySpecification() : 
{}
{
		Integer() 
	| 	VariableType()
	{ return jjtThis; }
}



/**
*		Defmodule Construct
**/

//	<defmodule-construct> ::= (defmodule <module-name> [<comment>] )

SimplenNode DefmoduleConstruct() : 
{}
{
	<DEFMODULE>
	Symbol() 
	[
		ConstructDescription()
	]
	{ return jjtThis; }
}


