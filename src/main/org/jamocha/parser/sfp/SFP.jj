/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /Users/amufsuism/Documents/eclipse_workspace/jamocha/src/main/org/jamocha/parser/sfp/SFP.jj */
/*@egen*//** 
		
	2007-04-04 : Reducing COOL to Jamocha Slim Fast Parser (sfp) - Karl-Heinz Krempels.
	2006-11-08 : Implementing the COOL Parser - Ulrich Loup, Ory Chowow-Liebman

	The Grammar is based on the CLIPS Object Oriented Language (COOL) used by
	the CLIPS Production system
	
	@author Karl-Heinz Krempels
*/

options {              
	STATIC=false;                                                                  // create Visitor interface
	ERROR_REPORTING = true;
}


/* Java code used for the Parser. */
PARSER_BEGIN(SFPParser)
package org.jamocha.parser.sfp;

import org.jamocha.parser.Parser;
import org.jamocha.parser.ParserUtils;
import org.jamocha.parser.Expression;
import org.jamocha.parser.JamochaValue;

import org.jamocha.rete.Rete;

public class SFPParser implements/*@bgen(jjtree)*/ SFPParserTreeConstants, /*@egen*/ Parser{/*@bgen(jjtree)*/
  protected JJTSFPParserState jjtree = new JJTSFPParserState();

/*@egen*/

        public Expression nextExpression() throws ParseException {
         return (org.jamocha.parser.Expression)Start().jjtAccept(new SFPInterpreter(), null);
        }

        public static void main(String args[])
        {
                boolean verbose = (args != null && args.length == 1 && "verbose".equals(args[0]));
                if(!verbose)System.out.println("Note: For verbose output type \"java Main verbose\".\n");
                System.out.print("SFP> ");
                Rete engine = new Rete();
                SFPParser p = new SFPParser(System.in);
                try
                {
                while (true)
                        {
                                SFPStart n = p.Start();
                                if (n==null) System.exit(0);
                                n.dump(" ");
                                org.jamocha.parser.Expression val = null;
                                val = (org.jamocha.parser.Expression)n.jjtAccept(new SFPInterpreter(), null);
                        }
                }
                catch (Exception e)
                {
                        System.err.println("ERROR: " + e.getMessage());
                        if(verbose)e.printStackTrace();
                }
        }



}

PARSER_END(SFPParser)

/**********************************************
 * Lexical Specs
 */


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: ";" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN :
{
  < LBRACE: "(" >
| < RBRACE: ")" >| < GE1: ">=" >
| < #DIGIT: ["0"-"9"] >
| < INTEGER: (["+","-"])? (<DIGIT>)+ >
|
  < FLOAT:
        (<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
      | "." (<DIGIT>)+ (<EXPONENT>)?
      | (<DIGIT>)+ <EXPONENT>
  >
  
| < #EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+ >
| < #GMT_OFFSET: ("+"|"-") ( <DIGIT> )? <DIGIT> >
| < #DATE: <DIGIT> <DIGIT> <DIGIT> <DIGIT> "-" <DIGIT> <DIGIT> "-" <DIGIT> <DIGIT> >
| < #TIME: <DIGIT> <DIGIT> ":" <DIGIT> <DIGIT> ( ":" <DIGIT> <DIGIT>)? >
| < DATETIME:  <DATE> ( " " <TIME> (<GMT_OFFSET>)? )? > 
|
  < STRING:
      ("\"" ((~["\"","\\"]) | ("\\" ( ["\\","\""] )))* "\"") |
      ("\'" ((~["\'","\\"]) | ("\\" ( ["\\","\'"] )))* "\'")
  >
| < SFWILDCARD: "?" >
| < MFWILDCARD: "$?" >
| < GLOBALVAR: "?*" <SYMBOL> "*" >
| < DEFFACTS: "deffacts" >
| < DEFTEMPLATE: "deftemplate" >
| < DEFTEMPLATE_CONSTRUCT: "deftemplate_construct" >
| < DEFRULE: "defrule" >
| < DEFFUNCTION: "deffunction" >
| < DEFGENERIC: "defgeneric" >
| < DEFMODULE: "defmodule" >
| < DEFGLOBAL: "defglobal" >
| < DEFAULT_ATR: "default" >
| < DYNAMIC_ATR: "default-dynamic" >
| < ATR_DEFAULT: "?DEFAULT" >
| < ATR_DERIVE: "?DERIVE" >
| < ATR_NONE: "?NONE" >
| < ATR_ALL: "?ALL" >
| < SLOT: "slot" >
| < SINGLE_SLOT: "single-slot" >
| < MULTISLOT: "multislot" >
| < ARROW: "=>">
| < DECLARE: "declare" >
| < SALIENCE: "salience" >
| < AUTOFOCUS: "auto-focus" >
| <RULEVERSION: "rule-version">
| <	TYPE: "type" >
| < TRUE: "TRUE" | "true" | "True" >
| < FALSE: "FALSE" | "false" | "False" >
| < NOT: "not" >
| < AND: "and" >
| < OR: "or" >
| < OF: "of" >
| < LOGICAL: "logical" >
| < TEST: "test" >
| < EXISTS: "exists" >
| < FORALL: "forall">
| < OBJECT: "object" >
| < ASSIGN: "<-" >
| < TILDE: "~" >
| < AMPERSAND: "&" >
| < LINE: "|" >
| < COLON: ":" >
| < EQUALS: "=" >
| < VARIABLE_TYPE: "?VARIABLE" >
| < SYMBOL_TYPE: "SYMBOL" >
| < STRING_TYPE: "STRING" >
| < DATETIME_TYPE: "DATETIME" >
| < LEXEME_TYPE: "LEXEME" >
| < INTEGER_TYPE: "INTEGER" >
| < SHORT_TYPE: "SHORT" >
| < LONG_TYPE: "LONG" >
| < FLOAT_TYPE: "FLOAT" >
| < DOUBLE_TYPE: "DOUBLE" >
| < NUMBER_TYPE: "NUMBER" >
| < BOOLEAN_TYPE: "BOOLEAN" >
| < EXTERNAL_ADDRESS_TYPE: "EXTERNAL-ADDRESS" >
| < FACT_ADDRESS_TYPE: "FACT-ADDRESS" >
| < ALLOWED_SYMBOLS: "allowed-symbols" >
| < ALLOWED_STRINGS: "allowed-strings" >
| < ALLOWED_LEXEMES: "allowed-lexemes" >
| < ALLOWED_INTEGERS: "allowed-integers" >
| < ALLOWED_LONGS: "allowed-longs" >
| < ALLOWED_SHORTS: "allowed-shorts" >
| < ALLOWED_FLOATS: "allowed-floats" >
| < ALLOWED_DOUBLES: "allowed-doubles" >
| < ALLOWED_NUMBERS: "allowed-numbers" >
| < ALLOWED_VALUES: "allowed-values" >
| < RANGE: "range" >
| < CARDINALITY: "cardinality" >
| < ACTIVE: "active" >
	// Special functions
| < ASSERT: "assert" >
| < RETRACT: "retract" >
| < FIND_FACT_BY_FACT: "find-fact-by-fact" >
| < MODIFY: "modify" >
| < DUPLICATE: "duplicate" >
| < FACT_RELATION: "fact-relation" >
| < FACT_SLOT_VALUE: "fact-slot-value" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < DO: "do" >
| < LOOP_FOR_COUNT: "loop-for-count" >
| < SWITCH: "switch" >
| < CASE: "case" >
| < STAR: "*">
  // If you think this is ugly, you are right. See CLIPS Basic Progrmmers Guide:
  // "Numbers are symbols, but treated different. Instances are symbols, but treated different." 
| < #VARSYMBOL:  ["a"-"z","A"-"Z"] (~[" ","\r","\n","\t","\"","\'","(",")","&","|","<","~",";"])* >
| < SINGLEVAR: ("?" <VARSYMBOL>) >
| < MULTIVAR: ("$?" <VARSYMBOL>) >
| < SYMBOL:  
	(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","0"-"9","="])
	|(
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","[","="])
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","?","~",";","0"-"9"])*
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","<","~",";" ])*
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","]"])? 
	)
	|(
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","="])
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","?","~",";","0"-"9"])*
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","<","~",";" ])*
		(~[" ","\r","\n","\t","\"","\'","(",")","&","|","$","?","~",";","]"])+ 
	)
  >

}

/* TODO (From Clips Manual):
Data Types:
<file-name> ::= A symbol or string which is a valid file name (including path information)
	for the operating system under which CLIPS is running
<slot-name> ::= A valid deftemplate_construct slot name
<...-name> ::= A <symbol> where the ellipsis indicate what the symbol represents.
	For example, <rule-name> is a symbol which represents the name of a rule.
*/

/**********************************************
 * Cool Grammar Specs.
 */

// Start rule is a construct at a time, the parser reads all the constructs into a list.
SFPStart Start() : 
{/*@bgen(jjtree) Start */
  SFPStart jjtn000 = new SFPStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
   try {
/*@egen*/
   ( LOOKAHEAD(2)
	Construct() | Expression()
	
	)/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ { return jjtn000; }
	| <EOF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return null; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


/*
<number> ::= <float> | <integer> 
<lexeme> ::= <symbol> | <string>
<constant> ::= <datetime> | <symbol> | <string> | <integer> | <float>
*/


/**
*		Float
**/

SimpleNode Float() : 
{/*@bgen(jjtree) Float */
  SFPFloat jjtn000 = new SFPFloat(this, JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Float */
        try {
/*@egen*/
	(
		t=<FLOAT>
	//|	t=<DOUBLE>
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Integer
**/

SimpleNode Integer() : 
{/*@bgen(jjtree) Integer */
  SFPInteger jjtn000 = new SFPInteger(this, JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	(
		t=<INTEGER>
	//|	t=<LONG>
	//|	t=<SHORT>
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		DateTime
**/

SimpleNode DateTime() : 
{/*@bgen(jjtree) DateTime */
  SFPDateTime jjtn000 = new SFPDateTime(this, JJTDATETIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DateTime */
        try {
/*@egen*/
	t=<DATETIME>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image);
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Number
**/

void Number()       : 
{}
{	
	(	Float()
	|	Integer() 
	)
}



/**
*		Symbol
**/

SimpleNode Symbol() : 
{/*@bgen(jjtree) Symbol */
  SFPSymbol jjtn000 = new SFPSymbol(this, JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Symbol */
        try {
/*@egen*/
	t=<SYMBOL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		String
**/

SimpleNode String() : 
{/*@bgen(jjtree) String */
  SFPString jjtn000 = new SFPString(this, JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	t=<STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(ParserUtils.getStringLiteral(t.image)); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/**
*		True
**/

SimpleNode True() : 
{/*@bgen(jjtree) True */
  SFPTrue jjtn000 = new SFPTrue(this, JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) True */
        try {
/*@egen*/
	t=<TRUE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		SymbolType
**/

SimpleNode SymbolType() : 
{/*@bgen(jjtree) SymbolType */
  SFPSymbolType jjtn000 = new SFPSymbolType(this, JJTSYMBOLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) SymbolType */
        try {
/*@egen*/
	t=<SYMBOL_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		StringType
**/

SimpleNode StringType() : 
{/*@bgen(jjtree) StringType */
  SFPStringType jjtn000 = new SFPStringType(this, JJTSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) StringType */
        try {
/*@egen*/
	t=<STRING_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		DateTimeType
**/

SimpleNode DateTimeType() : 
{/*@bgen(jjtree) DateTimeType */
  SFPDateTimeType jjtn000 = new SFPDateTimeType(this, JJTDATETIMETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DateTimeType */
        try {
/*@egen*/
	t=<DATETIME_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		LexemeType
**/

SimpleNode LexemeType() : 
{/*@bgen(jjtree) LexemeType */
  SFPLexemeType jjtn000 = new SFPLexemeType(this, JJTLEXEMETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) LexemeType */
        try {
/*@egen*/
	t=<LEXEME_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		BooleanType
**/

SimpleNode BooleanType() : 
{/*@bgen(jjtree) BooleanType */
  SFPBooleanType jjtn000 = new SFPBooleanType(this, JJTBOOLEANTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) BooleanType */
        try {
/*@egen*/
	t=<BOOLEAN_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		IntegerType
**/

SimpleNode IntegerType() : 
{/*@bgen(jjtree) IntegerType */
  SFPIntegerType jjtn000 = new SFPIntegerType(this, JJTINTEGERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) IntegerType */
        try {
/*@egen*/
	t=<INTEGER_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		longType
**/

SimpleNode LongType() : 
{/*@bgen(jjtree) LongType */
  SFPLongType jjtn000 = new SFPLongType(this, JJTLONGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) LongType */
        try {
/*@egen*/
	t=<LONG_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
/**
*		ShortType
**/

SimpleNode ShortType() : 
{/*@bgen(jjtree) ShortType */
  SFPShortType jjtn000 = new SFPShortType(this, JJTSHORTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ShortType */
        try {
/*@egen*/
	t=<SHORT_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
/**
*		FloatType
**/

SimpleNode FloatType() : 
{/*@bgen(jjtree) FloatType */
  SFPFloatType jjtn000 = new SFPFloatType(this, JJTFLOATTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FloatType */
        try {
/*@egen*/
	t=<FLOAT_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		DoubleType
**/

SimpleNode DoubleType() : 
{/*@bgen(jjtree) DoubleType */
  SFPDoubleType jjtn000 = new SFPDoubleType(this, JJTDOUBLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DoubleType */
        try {
/*@egen*/
	t=<DOUBLE_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/**
*		NumberType
**/

SimpleNode NumberType() : 
{/*@bgen(jjtree) NumberType */
  SFPNumberType jjtn000 = new SFPNumberType(this, JJTNUMBERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) NumberType */
        try {
/*@egen*/
	t=<NUMBER_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		False
**/

SimpleNode False() : 
{/*@bgen(jjtree) False */
  SFPFalse jjtn000 = new SFPFalse(this, JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) False */
        try {
/*@egen*/
	t=<FALSE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/**
*		Lexeme
**/

void Lexeme()       : 
{}
{	
	(	String()
	|	Symbol() 
	)
}



/**
*		Constant
**/

SimpleNode Constant() :
{/*@bgen(jjtree) Constant */
  SFPConstant jjtn000 = new SFPConstant(this, JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Constant */
        try {
/*@egen*/ 	
	(
		DateTime()
	|   Symbol()
	|	String()
	|	Integer()
	|	Float()
	|	BooleanSymbol()
	)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
	
    { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}



/**
*		Construct Description
**/

SimpleNode ConstructDescription() : 
{/*@bgen(jjtree) ConstructDescription */
  SFPConstructDescription jjtn000 = new SFPConstructDescription(this, JJTCONSTRUCTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConstructDescription */
    try {
/*@egen*/	
    String()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Single Variable
**/
// This is used exactly then when only the variables value is needed

SimpleNode SingleVariable() : 
{/*@bgen(jjtree) SingleVariable */
  SFPSingleVariable jjtn000 = new SFPSingleVariable(this, JJTSINGLEVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) SingleVariable */
        try {
/*@egen*/
	t=<SINGLEVAR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ jjtn000.setName(t.image); return jjtn000;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Global Variable
**/
// This is used exactly then when only the variables value is needed

SimpleNode GlobalVariable() : 
{/*@bgen(jjtree) GlobalVariable */
  SFPGlobalVariable jjtn000 = new SFPGlobalVariable(this, JJTGLOBALVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) GlobalVariable */
        try {
/*@egen*/
	t=<GLOBALVAR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setName(t.image); return jjtn000;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Multi Variable
**/
// This is used exactly then when only the variables contents are needed

SimpleNode MultiVariable() : 
{/*@bgen(jjtree) MultiVariable */
  SFPMultiVariable jjtn000 = new SFPMultiVariable(this, JJTMULTIVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) MultiVariable */
        try {
/*@egen*/
	t=<MULTIVAR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ jjtn000.setName(t.image); return jjtn000;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Variable
**/
// This is used exactly then when only the variables value is needed

void Variable()      : 
{}
{	
	(	
		SingleVariable()
	|	MultiVariable()
	|	GlobalVariable() 
	) 
}



/**
*		Variable Type
**/
// This is used exactly then when only the variables contents are needed

SimpleNode VariableType() : 
{/*@bgen(jjtree) VariableType */
  SFPVariableType jjtn000 = new SFPVariableType(this, JJTVARIABLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) VariableType */
        try {
/*@egen*/
	t=<VARIABLE_TYPE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ 
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Function Call
**/

// <function-call> ::= (<function-name> <expression>*)

void FunctionCall()      : 
{}
{
	<LBRACE> 
		(
			AssertFunc()
		|	RetractFunc()
		|   FindFactByFactFunc()	
		|	IfElseFunc()
		|	WhileFunc()
		|	LoopForCntFunc() 
		|	AnyFunction()
		|	SwitchCaseFunc()
		) 
	<RBRACE>
}



/**
*		Any Function
**/

SimpleNode AnyFunction() : 
{/*@bgen(jjtree) AnyFunction */
  SFPAnyFunction jjtn000 = new SFPAnyFunction(this, JJTANYFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AnyFunction */
        try {
/*@egen*/
 	(
 		Symbol()
 		(
 			Expression()
 		)*
 	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
 	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Expression
**/

SimpleNode Expression() : 
{/*@bgen(jjtree) Expression */
  SFPExpression jjtn000 = new SFPExpression(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/	
	(	LOOKAHEAD(2)
		Constant()
	|	Variable()
	|	FunctionCall() 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/****
**		 Special functions wich are defined by CLIPS to have
**		a non-standart syntax (e.g. not all parameters are expressions)
****/

/**
*		Assert Function
**/

SimpleNode AssertFunc() : 
{/*@bgen(jjtree) AssertFunc */
  SFPAssertFunc jjtn000 = new SFPAssertFunc(this, JJTASSERTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssertFunc */
        try {
/*@egen*/
	<ASSERT>
	(
		RHSPattern()
	)+/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		FindFactByFact Function
**/

SimpleNode FindFactByFactFunc() : 
{/*@bgen(jjtree) FindFactByFactFunc */
  SFPFindFactByFactFunc jjtn000 = new SFPFindFactByFactFunc(this, JJTFINDFACTBYFACTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FindFactByFactFunc */
        try {
/*@egen*/
	<FIND_FACT_BY_FACT>
	( 
		RHSPattern()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Retract Function
**/

SimpleNode RetractFunc() : 
{/*@bgen(jjtree) RetractFunc */
  SFPRetractFunc jjtn000 = new SFPRetractFunc(this, JJTRETRACTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RetractFunc */
        try {
/*@egen*/
	<RETRACT>
	(
		<STAR>	// Retract all
	|	(
			(Expression())*		// Integers and 'retract-specifiers' see BPG
		)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
//	RHSPattern()+
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		If Else Function
**/

SimpleNode IfElseFunc() : 
{/*@bgen(jjtree) IfElseFunc */
  SFPIfElseFunc jjtn000 = new SFPIfElseFunc(this, JJTIFELSEFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfElseFunc */
        try {
/*@egen*/
	(
		<IF>
		Expression()
		<THEN>
		ActionList()
		[
		 	<ELSE>
		 	ActionList()
		 ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		While Function
**/

SimpleNode WhileFunc() : 
{/*@bgen(jjtree) WhileFunc */
  SFPWhileFunc jjtn000 = new SFPWhileFunc(this, JJTWHILEFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileFunc */
        try {
/*@egen*/
	(
		<WHILE>
		Expression()
		[
		 	<DO>
		]
		ActionList()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Loop For Count Function
**/

SimpleNode LoopForCntFunc() : 
{/*@bgen(jjtree) LoopForCntFunc */
  SFPLoopForCntFunc jjtn000 = new SFPLoopForCntFunc(this, JJTLOOPFORCNTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LoopForCntFunc */
        try {
/*@egen*/
	(
		<LOOP_FOR_COUNT>
		(
			<LBRACE>
			SingleVariable()
			[
			 	Expression()
			 	[ 
			 	 	Expression()
			 	]
			 ]
			 <RBRACE>
		)
		[
		 	<DO>
		 ]
		 ActionList()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Case Switch Function
**/

SimpleNode SwitchCaseFunc() : 
{/*@bgen(jjtree) SwitchCaseFunc */
  SFPSwitchCaseFunc jjtn000 = new SFPSwitchCaseFunc(this, JJTSWITCHCASEFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchCaseFunc */
        try {
/*@egen*/
	(
		<SWITCH>
		Expression()	// Test Expression
		(	LOOKAHEAD(2)
			CaseStatement()
		)*
		[	
		<LBRACE>
			SwitchDefaults()
		<RBRACE>
		]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Case Statement Function
**/

SimpleNode CaseStatement() : 
{/*@bgen(jjtree) CaseStatement */
  SFPCaseStatement jjtn000 = new SFPCaseStatement(this, JJTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseStatement */
        try {
/*@egen*/
	(
		<LBRACE> 
			<CASE> 
			Expression()	// Comparison Expression
			<THEN> 
			ActionList()
		<RBRACE>
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		Default Statements for SwitchCaseFunc
**/
SimpleNode SwitchDefaults() : 
{/*@bgen(jjtree) SwitchDefaults */
  SFPSwitchDefaults jjtn000 = new SFPSwitchDefaults(this, JJTSWITCHDEFAULTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchDefaults */
        try {
/*@egen*/
	(
		<LBRACE>
			<DEFAULT_ATR> 
			ActionList()
		<RBRACE>
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		Construct - Definition Main Handler 
**/

void Construct()       : {}
{
	<LBRACE>
		( LOOKAHEAD(2)
			DeftemplateConstruct()
		|	DefglobalConstruct()
		|	DefruleConstruct()
		|	DeffunctionConstruct()
		|	DefmoduleConstruct()
		)
	<RBRACE>
}



/**
*		Deftemplate Construct
**/  
// <deftemplate-construct> ::= (deftemplate <deftemplate-name> [<comment>] <slot-definition>*)

SimpleNode DeftemplateConstruct() :
{/*@bgen(jjtree) DeftemplateConstruct */
  SFPDeftemplateConstruct jjtn000 = new SFPDeftemplateConstruct(this, JJTDEFTEMPLATECONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeftemplateConstruct */
        try {
/*@egen*/
        (
        	<DEFTEMPLATE>
			Symbol()
			[ 
			 	ConstructDescription()
			]
			(
				SlotDefinition()
			)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
        { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Slot Definition
**/  
//<slot-definition> ::= <single-slot-definition> | <multislot-definition>

void  SlotDefinition()       : 
{}
{
    ( 	
		<LBRACE> 
		(
					SingleSlotDefinition()
				| 	MultiSlotDefinition()
			)
		<RBRACE> 
    )
}



/**
*		Single Slot Definition
**/
//< single-slot-definition> ::= ( slot <slot-name> <template-attribute>*)

SimpleNode SingleSlotDefinition() :
{/*@bgen(jjtree) SingleSlotDefinition */
  SFPSingleSlotDefinition jjtn000 = new SFPSingleSlotDefinition(this, JJTSINGLESLOTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SingleSlotDefinition */
        try {
/*@egen*/
	<SLOT>
	(
		Symbol()
		(
			TemplateAttribute()
		)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Multi Slot Definition
**/
//<multislot-definition> ::= ( multislot <slot-name> <template-attribute>*)

SimpleNode MultiSlotDefinition() :
{/*@bgen(jjtree) MultiSlotDefinition */
  SFPMultiSlotDefinition jjtn000 = new SFPMultiSlotDefinition(this, JJTMULTISLOTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) MultiSlotDefinition */
        try {
/*@egen*/
        <MULTISLOT>
	(
		Symbol()
		(
			TemplateAttribute()
		)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Template Attribute
**/
//<template-attribute> ::= <default-attribute> | <constraint-attribute>

void TemplateAttribute()      : 
{}
{
	<LBRACE>
	(	LOOKAHEAD(2)
		DefaultAttribute() 
	| 	DynamicAttribute()
	|	ConstraintAttribute()
	) 
	<RBRACE>
}



/**
*		Attributes
**/
// A dummy node to have a list of attributes

SimpleNode Attributes() :
{/*@bgen(jjtree) Attributes */
  SFPAttributes jjtn000 = new SFPAttributes(this, JJTATTRIBUTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Attributes */
        try {
/*@egen*/ 
	(	LOOKAHEAD(2)
		Expression()
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Default Attribute
**/
//<default-attribute> ::= (default ?DERIVE | ?NONE | <expression>*) | (default-dynamic <expression>*)

SimpleNode DefaultAttribute() : 
{/*@bgen(jjtree) DefaultAttribute */
  SFPDefaultAttribute jjtn000 = new SFPDefaultAttribute(this, JJTDEFAULTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefaultAttribute */
                try {
/*@egen*/
		<DEFAULT_ATR>
		(	
			DeriveAttribute()
		|	NoneAttribute() 
		|	DefaultAttributes() 
		)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{ return jjtn000; }/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

SimpleNode DefaultAttributes() :
{/*@bgen(jjtree) DefaultAttributes */
  SFPDefaultAttributes jjtn000 = new SFPDefaultAttributes(this, JJTDEFAULTATTRIBUTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefaultAttributes */
    try {
/*@egen*/
    Attributes()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Derive Attribute
**/

SimpleNode DeriveAttribute() : 
{/*@bgen(jjtree) DeriveAttribute */
  SFPDeriveAttribute jjtn000 = new SFPDeriveAttribute(this, JJTDERIVEATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DeriveAttribute */
        try {
/*@egen*/
	t = <ATR_DERIVE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		None Attribute
**/

SimpleNode NoneAttribute() : 
{/*@bgen(jjtree) NoneAttribute */
  SFPNoneAttribute jjtn000 = new SFPNoneAttribute(this, JJTNONEATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) NoneAttribute */
        try {
/*@egen*/
	t = <ATR_NONE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image); 
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Dynamic Attribute
**/

//<default-attribute> ::= (default ?DERIVE | ?NONE | <expression>*) | (default-dynamic <expression>*)

SimpleNode DynamicAttribute() : 
{/*@bgen(jjtree) DynamicAttribute */
  SFPDynamicAttribute jjtn000 = new SFPDynamicAttribute(this, JJTDYNAMICATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DynamicAttribute */
        try {
/*@egen*/
	<DYNAMIC_ATR> 
	(	
		Attributes()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Fact Construct
**/

/* Fact Specification
<ordered-RHS-pattern> ::= ( <symbol> <RHS-field>+ )

<template-RHS-pattern> ::= ( <deftemplate-name> <RHS-slot>* )

<RHS-slot> ::= <single-field-RHS-slot> | <multifield-RHS-slot>

<single-field-RHS-slot> ::= (<slot-name> <RHS-field>)

<multifield-RHS-slot> ::= (<slot-name> <RHS-field>*)

<RHS-field> ::= <variable> | <constant> | <function-call>
*/



/**
*		Right Hand Site Pattern
**/
// <RHS-pattern> ::= <ordered-RHS-pattern> | <template-RHS-pattern>

void RHSPattern()       : 
{}
{ 
	<LBRACE>
		TemplateRHSPattern()
	// currently ordered RHS aren't implemented
	//	| 	OrderedRHSPattern(t.image);
	<RBRACE> 
    
}



/**
*		Template Right Hand Site Pattern
**/
//<template-RHS-pattern> ::= (<deftemplate-name> <RHS-slot>*)

SimpleNode TemplateRHSPattern() :
{/*@bgen(jjtree) TemplateRHSPattern */
  SFPTemplateRHSPattern jjtn000 = new SFPTemplateRHSPattern(this, JJTTEMPLATERHSPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TemplateRHSPattern */
    try {
/*@egen*/
    (
	    Symbol() //Template Name
        ( 
        	RHSSlot() 
        )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Right Hand Site Slot
**/
//<RHS-slot> ::= <single-field-RHS-slot> | <multifield-RHS-slot>
//<single-field-RHS-slot> ::= (<slot-name> <RHS-field>)
//<multifield-RHS-slot> ::= (<slot-name> <RHS-field>*)

SimpleNode RHSSlot() : 
{/*@bgen(jjtree) RHSSlot */
  SFPRHSSlot jjtn000 = new SFPRHSSlot(this, JJTRHSSLOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RHSSlot */
    try {
/*@egen*/
    <LBRACE> 
        (	
        	Symbol() // slot-name
        	(
        		RHSField() 
        	)*
        )
    <RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Right Hand Site Field
**/

//<RHS-field> ::= <variable> | <constant> | <function-call>

void RHSField()      : 
{}
{
    	Variable() 
    |   Constant() 
    |   FunctionCall()
}



/**
*		Define Rule Construct
**/

/*
<defrule-construct> ::= (defrule <rule-name> [<comment>] [<declaration>] <conditional-element>* => <expression>*) 
<rule-property> ::= (salience <integer-expression>) | (auto-focus <boolean-symbol>)
<boolean-symbol> ::= TRUE | FALSE
<conditional-element> ::= <pattern-CE> | <assigned-pattern-CE> | <not-CE> | <and-CE> | <or-CE> |
	<logical-CE> | <test-CE> | <exists-CE> | <forall-CE>
<pattern-CE> ::= <ordered-pattern-CE> | <template-pattern-CE> | <object-pattern-CE>
<assigned-pattern-CE> ::= <single-field-variable> <- <pattern-CE>
<not-CE> ::= (not <conditional-element>)
<and-CE> ::= (and <conditional-element>+)
<or-CE> ::= (or <conditional-element>+)
<logical-CE> ::= (logical <conditional-element>+)
<test-CE> ::= (test <function-call>)
<exists-CE> ::= (exists <conditional-element>+)
<forall-CE> ::= (forall <conditional-element> <conditional-element>+)
<ordered-pattern-CE> ::= (<symbol> <constraint>*)
<template-pattern-CE> ::= (<deftemplate-name> <LHS-slot>*)
<object-pattern-CE> ::= (object <attribute-constraint>*)
<attribute-constraint> ::= (is-a <constraint>) | (name <constraint>) | (<slot-name> <constraint>*)
<LHS-slot> ::= <single-field-LHS-slot> | <multifield-LHS-slot>
<single-field-LHS-slot> ::= (<slot-name> <constraint>)
<multifield-LHS-slot> ::= (<slot-name> <constraint>*)
<constraint> ::= ? | $? | <connected-constraint>
<connected-constraint>::= <single-constraint> | <single-constraint> & <connected-constraint> |
	<single-constraint> | <connected-constraint>
<single-constraint> ::= <term> | ~<term>
<term> ::= <constant> | <single-field-variable> | <multifield-variable> | 
	:<function-call> | =<function-call>
*/





/**
*		Define Rule Construct
**/
// <defrule-construct> ::= (defrule <rule-name> [<comment>] [<declaration>] <conditional-element>* => <expression>*) 

SimpleNode DefruleConstruct() :
{/*@bgen(jjtree) DefruleConstruct */
  SFPDefruleConstruct jjtn000 = new SFPDefruleConstruct(this, JJTDEFRULECONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefruleConstruct */
        try {
/*@egen*/
    	(
    		<DEFRULE>

    		Symbol()	//name
    		[ 
    		  	ConstructDescription()	
    		]
    		( LOOKAHEAD(3)
    			(
    				Declaration()
    				(
    					ConditionalElement()
    				)* 
    			) |
    			(
    				(
    					ConditionalElement()
    				)* 
    			)
    		)
    			<ARROW>
        		ActionList()
        )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/        
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// Create Dummy node to have fixed number of children in Defrule
SimpleNode ActionList():{/*@bgen(jjtree) ActionList */
  SFPActionList jjtn000 = new SFPActionList(this, JJTACTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ActionList */
        try {
/*@egen*/ 
    	(
        	(
        	LOOKAHEAD(2)
    		Expression()
        	)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}




/**
*		Declaration
**/
//<declaration> ::= (declare <rule-property>+)

SimpleNode Declaration(): 
{/*@bgen(jjtree) Declaration */
  SFPDeclaration jjtn000 = new SFPDeclaration(this, JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
    try {
/*@egen*/
    <LBRACE>
        <DECLARE>
        (
        	RuleProperty()
        )+
    <RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Rule Property
**/
// <rule-property> ::= (salience <integer-expression>) | (auto-focus <boolean-symbol>)

void RuleProperty()      : 
{}
{
    <LBRACE>
     	(
     		Salience()		
     	| 	AutoFocus()
     	|	RuleVersion()
	)
	<RBRACE>
}

SimpleNode Salience() :
{/*@bgen(jjtree) Salience */
  SFPSalience jjtn000 = new SFPSalience(this, JJTSALIENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Salience */
        try {
/*@egen*/
	<SALIENCE>
	Expression()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode AutoFocus(): 
{/*@bgen(jjtree) AutoFocus */
  SFPAutoFocus jjtn000 = new SFPAutoFocus(this, JJTAUTOFOCUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AutoFocus */
        try {
/*@egen*/
	<AUTOFOCUS>
	BooleanSymbol()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode RuleVersion(): 
{/*@bgen(jjtree) RuleVersion */
  SFPRuleVersion jjtn000 = new SFPRuleVersion(this, JJTRULEVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RuleVersion */
        try {
/*@egen*/
	<RULEVERSION>
	Expression()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
*		Boolean Symbol
**/
//<boolean-symbol> ::= TRUE | FALSE

void BooleanSymbol()      : 
{}
{
    (
    	True()
    |	False()
    )
}


//<conditional-element> ::= <pattern-CE> | <assigned-pattern-CE> | <not-CE> | <and-CE> | <or-CE> |
//                          <logical-CE> | <test-CE> | <exists-CE> | <forall-CE>
void ConditionalElement()      :
{}
{
	(	
		(
		   <LBRACE> 
				(	
						TemplatePatternCE() 
					|	BooleanFunction() 
					|	LogicalCE() 
					|	TestCE()
					|	ExistsCE()
					|	ForallCE()		
				)
			<RBRACE>
		)

		|	AssignedPatternCE()
	)	
}

/**
*		Boolean Functions
**/

void BooleanFunction()      : 
{}
{
	(LOOKAHEAD(2)
		NotFunction()
	|	AndFunction()
	|	OrFunction()	
	)
}

SimpleNode NotFunction():
{/*@bgen(jjtree) NotFunction */
  SFPNotFunction jjtn000 = new SFPNotFunction(this, JJTNOTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotFunction */
        try {
/*@egen*/
	<NOT>
		ConditionalElement()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode AndFunction():
{/*@bgen(jjtree) AndFunction */
  SFPAndFunction jjtn000 = new SFPAndFunction(this, JJTANDFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndFunction */
        try {
/*@egen*/	
	<AND>
		ConditionalElement()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
    	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode OrFunction():
{/*@bgen(jjtree) OrFunction */
  SFPOrFunction jjtn000 = new SFPOrFunction(this, JJTORFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrFunction */
        try {
/*@egen*/	

	<OR>
		ConditionalElement()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
    	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}	


/**
*		Pattern Conditional Element
**/

//<assigned-pattern-CE> ::= <single-field-variable> <- <pattern-CE>
// Create and return conditions
SimpleNode AssignedPatternCE():
{/*@bgen(jjtree) AssignedPatternCE */
  SFPAssignedPatternCE jjtn000 = new SFPAssignedPatternCE(this, JJTASSIGNEDPATTERNCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignedPatternCE */
        try {
/*@egen*/

	(
		SingleVariable() 
		<ASSIGN>
		
		<LBRACE>
		
			TemplatePatternCE()
		
		<RBRACE>
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


//<logical-CE> ::= (logical <conditional-element>+)
// Create and return conditions
SimpleNode LogicalCE() : 
{/*@bgen(jjtree) LogicalCE */
  SFPLogicalCE jjtn000 = new SFPLogicalCE(this, JJTLOGICALCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalCE */
    try {
/*@egen*/
    <LOGICAL> 
    
    (
    	LOOKAHEAD(2)
    	
		ConditionalElement()
    )+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//<test-CE> ::= (test <function-call>)
// Create and return conditions (needs to initialize function 
// before execution, thus it gets a node
SimpleNode TestCE() : 
{/*@bgen(jjtree) TestCE */
  SFPTestCE jjtn000 = new SFPTestCE(this, JJTTESTCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TestCE */
        try {
/*@egen*/
	<TEST>
	FunctionCall()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//<exists-CE> ::= (exists <conditional-element>+)
// Create and return conditions
SimpleNode ExistsCE() : 
{/*@bgen(jjtree) ExistsCE */
  SFPExistsCE jjtn000 = new SFPExistsCE(this, JJTEXISTSCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExistsCE */
    try {
/*@egen*/
    <EXISTS> 
    (
		LOOKAHEAD(2)
		
		ConditionalElement()
    )+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//<forall-CE> ::= (forall <conditional-element> <conditional-element>+)
// Create and return conditions
SimpleNode ForallCE() : 
{/*@bgen(jjtree) ForallCE */
  SFPForallCE jjtn000 = new SFPForallCE(this, JJTFORALLCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForallCE */
        try {
/*@egen*/
	<FORALL> 
	ConditionalElement() 
	(
		LOOKAHEAD(2)
		
		ConditionalElement()
	)+/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	
    	
	{return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//<template-pattern-CE> ::= (<deftemplate-name> <LHS-slot>*)
SimpleNode TemplatePatternCE(): 
{/*@bgen(jjtree) TemplatePatternCE */
  SFPTemplatePatternCE jjtn000 = new SFPTemplatePatternCE(this, JJTTEMPLATEPATTERNCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TemplatePatternCE */
    try {
/*@egen*/
    (
    	Symbol() //template Name
		(	
			LOOKAHEAD(2)
	
			<LBRACE>

				LHSSlot()

			<RBRACE>
		)*
    )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
    
   { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


//<LHS-slot> ::= <single-field-LHS-slot> | <multifield-LHS-slot>

SimpleNode LHSSlot(): 
{/*@bgen(jjtree) LHSSlot */
  SFPLHSSlot jjtn000 = new SFPLHSSlot(this, JJTLHSSLOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LHSSlot */
    try {
/*@egen*/
    (
    	Symbol() //slot Name
		Constraint()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/	
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}




//<constraint> ::= ? | $? | <connected-constraint>
void Constraint()       : 
{}
{
		SingleFieldWildcard()
	|	MultiFieldWildcard()
	|	ConnectedConstraint()
}



SimpleNode SingleFieldWildcard() : 
{/*@bgen(jjtree) SingleFieldWildcard */
  SFPSingleFieldWildcard jjtn000 = new SFPSingleFieldWildcard(this, JJTSINGLEFIELDWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SingleFieldWildcard */
        try {
/*@egen*/
	<SFWILDCARD>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
	
    { return jjtn000; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



SimpleNode MultiFieldWildcard() : 
{/*@bgen(jjtree) MultiFieldWildcard */
  SFPMultiFieldWildcard jjtn000 = new SFPMultiFieldWildcard(this, JJTMULTIFIELDWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MultiFieldWildcard */
        try {
/*@egen*/
	<MFWILDCARD>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
	
    { return jjtn000; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


//<connected-constraint>::= <single-constraint> | <single-constraint> & <connected-constraint> |
//	<single-constraint> | <connected-constraint>

// THIS IS WRONG: Ampersands and lines can be mixed!!
void ConnectedConstraint()      : 
{}
{
    (
    	Term() 
    [
		AmpersandConnectedConstraint()
	|	LineConnectedConstraint()
	]
    )
}

SimpleNode AmpersandConnectedConstraint(): 
{/*@bgen(jjtree) AmpersandConnectedConstraint */
  SFPAmpersandConnectedConstraint jjtn000 = new SFPAmpersandConnectedConstraint(this, JJTAMPERSANDCONNECTEDCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AmpersandConnectedConstraint */
    try {
/*@egen*/
    (
		<AMPERSAND>
		Term()
	[
		AmpersandConnectedConstraint()
	]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode LineConnectedConstraint(): 
{/*@bgen(jjtree) LineConnectedConstraint */
  SFPLineConnectedConstraint jjtn000 = new SFPLineConnectedConstraint(this, JJTLINECONNECTEDCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LineConnectedConstraint */
    try {
/*@egen*/
    (
		<LINE>
		Term()
	[
		LineConnectedConstraint()
	]
    )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
    
	{ return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}




//<term> ::= <constant> | <single-field-variable> | <multifield-variable> | 
//	:<function-call> | =<function-call>
SimpleNode Term()  : 
{/*@bgen(jjtree) Term */
  SFPTerm jjtn000 = new SFPTerm(this, JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
    try {
/*@egen*/
    (
    	[	
		Negation()
	] 
    ( LOOKAHEAD(3)
    	Constant()
    |	SingleVariable()
    |	MultiVariable()
    |	Colon()
    |	Equals()
    )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



SimpleNode Negation() : 
{/*@bgen(jjtree) Negation */
  SFPNegation jjtn000 = new SFPNegation(this, JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Negation */
        try {
/*@egen*/
	<TILDE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



SimpleNode Colon() : 
{/*@bgen(jjtree) Colon */
  SFPColon jjtn000 = new SFPColon(this, JJTCOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Colon */
        try {
/*@egen*/
	<COLON>
	FunctionCall()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



SimpleNode Equals() : 
{/*@bgen(jjtree) Equals */
  SFPEquals jjtn000 = new SFPEquals(this, JJTEQUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Equals */
        try {
/*@egen*/
	<EQUALS>
	FunctionCall()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Defglobal Construct
<defglobal-construct> ::= (defglobal [<defmodule-name>] <global-assignment>*)
<global-assignment> ::= <global-variable> = <expression>
<global-variable> ::= ?*<symbol>*
*/

//<defglobal-construct> ::= (defglobal [<defmodule-name>] <global-assignment>*)
SimpleNode DefglobalConstruct()  :
{/*@bgen(jjtree) DefglobalConstruct */
  SFPDefglobalConstruct jjtn000 = new SFPDefglobalConstruct(this, JJTDEFGLOBALCONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefglobalConstruct */
    try {
/*@egen*/
    (
    	<DEFGLOBAL>
        [ 
         	Symbol()//defmodule-name 
        ]
        (
        	GlobalAssignment()
        )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//<global-assignment> ::= <global-variable> = <expression>
SimpleNode GlobalAssignment()  : 
{/*@bgen(jjtree) GlobalAssignment */
  SFPGlobalAssignment jjtn000 = new SFPGlobalAssignment(this, JJTGLOBALASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GlobalAssignment */
    try {
/*@egen*/
    (
        GlobalVariable()
        <EQUALS>
        Expression()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/* Deffunction Construct
<deffunction-construct> 
	::= (deffunction <name> [<comment>] (<regular-parameter>* [<wildcard-parameter>]) <expression>*)
<regular-parameter> ::= <single-field-variable>
<wildcard-parameter> ::= <multifield-variable>
*/

//<deffunction-construct> 
//	::= (deffunction <name> [<comment>] (<regular-parameter>* [<wildcard-parameter>]) <expression>*)
SimpleNode DeffunctionConstruct()  :
{/*@bgen(jjtree) DeffunctionConstruct */
  SFPDeffunctionConstruct jjtn000 = new SFPDeffunctionConstruct(this, JJTDEFFUNCTIONCONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeffunctionConstruct */
    try {
/*@egen*/
    (
    	<DEFFUNCTION>
        Symbol()	//name
        [ 
         	ConstructDescription()
        ]
        <LBRACE> 
        	(
        		SingleVariable()
        	)*
        	[
             		MultiVariable()
             	] 
        <RBRACE>
        ActionList()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


/* Defgeneric Construct
<defgeneric-construct> ::= (defgeneric <name> [<comment>])
*/
SimpleNode DefgenericConstruct() :
{/*@bgen(jjtree) DefgenericConstruct */
  SFPDefgenericConstruct jjtn000 = new SFPDefgenericConstruct(this, JJTDEFGENERICCONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefgenericConstruct */
     try {
/*@egen*/
     (
    	<DEFGENERIC>
        Symbol()	//name
        [ 
         	ConstructDescription()
        ]
     )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     
     { return jjtn000; }/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}


//<parameter-restriction> ::= <single-field-variable> | (<single-field-variable> <type>* [<query>])
SimpleNode ParameterRestriction() : {/*@bgen(jjtree) ParameterRestriction */
  SFPParameterRestriction jjtn000 = new SFPParameterRestriction(this, JJTPARAMETERRESTRICTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParameterRestriction */
        try {
/*@egen*/
	( LOOKAHEAD(2)
		SingleVariable()
	|	(
			<LBRACE>
				SingleVariable() 
				(
					AllowedType()
				)* 
				[
				 	Query()
				 ]
			<RBRACE>
		)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


//<wildcard-parameter-restriction> ::= <multifield-variable> | (<multifield-variable> <type>* [<query>])
SimpleNode WildcardParameterRestriction() : {/*@bgen(jjtree) WildcardParameterRestriction */
  SFPWildcardParameterRestriction jjtn000 = new SFPWildcardParameterRestriction(this, JJTWILDCARDPARAMETERRESTRICTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WildcardParameterRestriction */
        try {
/*@egen*/
	( LOOKAHEAD(2)
		MultiVariable()
	|
		(
			<LBRACE>
				MultiVariable() 
				(
					AllowedType()
				)* 
				[
				 	Query()
				 ]
			<RBRACE>
		)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



//<query> ::= <global-variable> | <function-call>
void Query() : {/*@bgen(jjtree) Query */
                 SFPQuery jjtn000 = new SFPQuery(this, JJTQUERY);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Query */
                try {
/*@egen*/
		GlobalVariable()
	|	FunctionCall()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}


/**
*		Constraint Attributes 
**/

//<constraint-attribute> ::= <type-attribute> | <allowed-constant-attribute> | 
//	<range-attribute> | <cardinality-attribute>

void ConstraintAttribute()       : { }
{
	( LOOKAHEAD(2)
		TypeAttribute()
	|	AllowedConstantAttribute()
	|	RangeAttribute()
	|	CardinalityAttribute()
	)
}



/**
*		Type Attribute
**/

//<type-attribute> ::= (type <type-specification>)

SimpleNode TypeAttribute() :
{/*@bgen(jjtree) TypeAttribute */
  SFPTypeAttribute jjtn000 = new SFPTypeAttribute(this, JJTTYPEATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) TypeAttribute */
        try {
/*@egen*/
	<TYPE> 
	TypeSpecification()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Type Specification
**/

//<type-specification> ::= <allowed-type>+ | ?VARIABLE

SimpleNode TypeSpecification() : 
{/*@bgen(jjtree) TypeSpecification */
  SFPTypeSpecification jjtn000 = new SFPTypeSpecification(this, JJTTYPESPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeSpecification */
        try {
/*@egen*/	(
		( 
			AllowedType() 
		)+ 
		| 	VariableType()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Allowed Type
**/

//<allowed-type> ::= SYMBOL | STRING | LEXEME | INTEGER | FLOAT | NUMBER |
// EXTERNAL-ADDRESS | FACT-ADDRESS | DATETIME

void AllowedType()       : 
{}
{
	(		SymbolType()		
		|	StringType()
		|	DateTimeType()
		|	LexemeType()
		| 	IntegerType()
		|	LongType()
		|	ShortType()
		| 	FloatType()
		| 	DoubleType()
		|	NumberType()
		|   	BooleanType()
	)
}



/**
*		Allowed Constant Atrributes
**/

// <allowed-constant-attribute> ::= (allowed-symbols <symbol-list>) | (allowed-strings <string-list>) |
//	(allowed-lexemes <lexeme-list> | (allowed-integers <integer-list>) | (allowed-floats <float-list>) |
//	(allowed-numbers <number-list>) | (allowed-values <value-list>)

SimpleNode AllowedConstantAttribute() : 
{/*@bgen(jjtree) AllowedConstantAttribute */
  SFPAllowedConstantAttribute jjtn000 = new SFPAllowedConstantAttribute(this, JJTALLOWEDCONSTANTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) AllowedConstantAttribute */
        try {
/*@egen*/
	(
			t = <ALLOWED_SYMBOLS> SymbolList()
		|	t = <ALLOWED_STRINGS> StringList()
		|	t = <ALLOWED_LEXEMES> LexemeList()
		|	t = <ALLOWED_INTEGERS> IntegerList()
		|	t = <ALLOWED_LONGS> IntegerList() //Long->integer
		|	t = <ALLOWED_SHORTS> IntegerList() //short ->integer
		|	t = <ALLOWED_FLOATS> FloatList()
		|	t = <ALLOWED_DOUBLES> FloatList() //Double->float
		|	t = <ALLOWED_NUMBERS> NumberList()
		|	t = <ALLOWED_VALUES> ValueList()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{ 	
		jjtn000.setName(t.image);
		return jjtn000; 
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



/**
*		Symbol List
**/

//<symbol-list> ::= <symbol>+ | ?VARIABLE

SimpleNode SymbolList() : {/*@bgen(jjtree) SymbolList */
  SFPSymbolList jjtn000 = new SFPSymbolList(this, JJTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SymbolList */
    try {
/*@egen*/
    (
    		( <SYMBOL> )+ 
	|	VariableType()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		String List
**/

//<string-list> ::= <string>+ | ?VARIABLE

SimpleNode StringList() : 
{/*@bgen(jjtree) StringList */
  SFPStringList jjtn000 = new SFPStringList(this, JJTSTRINGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringList */
    try {
/*@egen*/
    (
    		( <STRING> )+ 
	|	VariableType()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Lexeme List
**/

//<lexeme-list> ::= <lexeme>+ | ?VARIABLE

SimpleNode LexemeList() : 
{/*@bgen(jjtree) LexemeList */
  SFPLexemeList jjtn000 = new SFPLexemeList(this, JJTLEXEMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LexemeList */
    try {
/*@egen*/
    (
    		( Lexeme() )+ 
	|	VariableType()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Integer List
**/

//<integer-list> ::= <integer>+ | ?VARIABLE

SimpleNode IntegerList() :
{/*@bgen(jjtree) IntegerList */
  SFPIntegerList jjtn000 = new SFPIntegerList(this, JJTINTEGERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IntegerList */
    try {
/*@egen*/
    (
    		( <INTEGER> )+ 
	| 	VariableType()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
*		Float List
**/

//<float-list> ::= <float>+ | ?VARIABLE

SimpleNode FloatList() : 
{/*@bgen(jjtree) FloatList */
  SFPFloatList jjtn000 = new SFPFloatList(this, JJTFLOATLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FloatList */
    try {
/*@egen*/
    (
    		( <FLOAT> )+ 
	|	VariableType()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Number List
**/

//<number-list> ::= <number>+ | ?VARIABLE

SimpleNode NumberList() : 
{/*@bgen(jjtree) NumberList */
  SFPNumberList jjtn000 = new SFPNumberList(this, JJTNUMBERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NumberList */
    try {
/*@egen*/
    (
    		( Number() )+ 
	| 	VariableType()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
	
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Value List
**/

//<value-list> ::= <constant>+ | ?VARIABLE

SimpleNode ValueList() : 
{/*@bgen(jjtree) ValueList */
  SFPValueList jjtn000 = new SFPValueList(this, JJTVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueList */
    try {
/*@egen*/
    (
    		( Constant() )+ 
	|	VariableType()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
	
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Range Attribute
**/

//<range-attribute> ::= (range <range-specification> <range-specification>)

SimpleNode RangeAttribute() :
{/*@bgen(jjtree) RangeAttribute */
  SFPRangeAttribute jjtn000 = new SFPRangeAttribute(this, JJTRANGEATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RangeAttribute */
    try {
/*@egen*/
    (	
    	<RANGE> 
	
	RangeSpecification() 
	
	RangeSpecification()
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
	
   { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


/**
*		Range Specification
**/

//<range-specification> ::= <number> | ?VARIABLE

SimpleNode RangeSpecification()  : 
{/*@bgen(jjtree) RangeSpecification */
  SFPRangeSpecification jjtn000 = new SFPRangeSpecification(this, JJTRANGESPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RangeSpecification */
    try {
/*@egen*/
    (
    		Number() 
	| 	VariableType()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
	
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


//<cardinality-attribute> ::= (cardinality <cardinality-specification> <cardinality-specification>)
SimpleNode CardinalityAttribute()  : 
{/*@bgen(jjtree) CardinalityAttribute */
  SFPCardinalityAttribute jjtn000 = new SFPCardinalityAttribute(this, JJTCARDINALITYATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CardinalityAttribute */
    try {
/*@egen*/
    (
    	<CARDINALITY> 

	CardinalitySpecification() 

	CardinalitySpecification()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Cardinality Specification
**/

//<cardinality-specification> ::= <integer> | ?VARIABLE

SimpleNode CardinalitySpecification() : 
{/*@bgen(jjtree) CardinalitySpecification */
  SFPCardinalitySpecification jjtn000 = new SFPCardinalitySpecification(this, JJTCARDINALITYSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CardinalitySpecification */
    try {
/*@egen*/
    (	
    		Integer() 
	| 	VariableType()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
	
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/**
*		Defmodule Construct
**/

//	<defmodule-construct> ::= (defmodule <module-name> [<comment>] )

SimpleNode DefmoduleConstruct() : 
{/*@bgen(jjtree) DefmoduleConstruct */
  SFPDefmoduleConstruct jjtn000 = new SFPDefmoduleConstruct(this, JJTDEFMODULECONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefmoduleConstruct */
    try {
/*@egen*/
    (
    	<DEFMODULE>
	Symbol() 
	[
		ConstructDescription()
	]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
	
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


