/* Generated By:JavaCC: Do not edit this line. CLIPSParserTokenManager.java */
package org.jamocha.parser.clips;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.jamocha.parser.Expression;
import org.jamocha.parser.JamochaValue;
import org.jamocha.parser.JamochaType;
import org.jamocha.parser.Parser;
import org.jamocha.parser.ParserUtils;
import org.jamocha.rete.BoundParam;
import org.jamocha.rete.Deftemplate;
import org.jamocha.rete.ExpressionCollection;
import org.jamocha.rete.ExpressionSequence;
import org.jamocha.rete.Function;
import org.jamocha.rete.Signature;
import org.jamocha.rete.TemplateSlot;
import org.jamocha.rete.Parameter;
import org.jamocha.rete.ParameterUtils;
import org.jamocha.rete.Slot;
import org.jamocha.rule.Action;
import org.jamocha.rule.AndCondition;
import org.jamocha.rule.AndLiteralConstraint;
import org.jamocha.rule.BoundConstraint;
import org.jamocha.rule.Condition;
import org.jamocha.rule.Constraint;
import org.jamocha.rule.Defrule;
import org.jamocha.rule.ExistCondition;
import org.jamocha.rule.FunctionAction;
import org.jamocha.rule.LiteralConstraint;
import org.jamocha.rule.MultiValue;
import org.jamocha.rule.ObjectCondition;
import org.jamocha.rule.OrLiteralConstraint;
import org.jamocha.rule.PredicateConstraint;
import org.jamocha.rule.RuleProperty;
import org.jamocha.rule.TestCondition;

public class CLIPSParserTokenManager implements CLIPSParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 93;
            return 25;
         }
         if ((active1 & 0x800L) != 0L)
            return 48;
         if ((active0 & 0xbffffffffff80000L) != 0L || (active1 & 0x5aaa01cL) != 0L)
         {
            jjmatchedKind = 93;
            return 48;
         }
         if ((active1 & 0x200L) != 0L)
            return 49;
         return -1;
      case 1:
         if ((active1 & 0xa000L) != 0L)
            return 25;
         if ((active1 & 0x4aa0000L) != 0L)
            return 48;
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
            return 24;
         }
         if ((active0 & 0xfffffffffff80000L) != 0L || (active1 & 0x100001dL) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
            return 48;
         }
         return -1;
      case 2:
         if ((active0 & 0x40000000800000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 25;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 25;
         if ((active1 & 0x1000010L) != 0L)
            return 48;
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 23;
         }
         if ((active0 & 0xffafffffff780000L) != 0L || (active1 & 0xdL) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 48;
         }
         return -1;
      case 3:
         if ((active0 & 0x1041000000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
            return 25;
         }
         if ((active0 & 0x4800000000000000L) != 0L)
            return 25;
         if ((active0 & 0x8200400000080000L) != 0L || (active1 & 0x3L) != 0L)
            return 48;
         if ((active0 & 0x35eebbeffff00000L) != 0L || (active1 & 0xcL) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
            return 48;
         }
         return -1;
      case 4:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
            return 25;
         }
         if ((active0 & 0x400080000000000L) != 0L || (active1 & 0xcL) != 0L)
            return 48;
         if ((active0 & 0x31efb77ffff00000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
            return 48;
         }
         return -1;
      case 5:
         if ((active0 & 0x600000L) != 0L)
            return 25;
         if ((active0 & 0x300880c000000000L) != 0L)
            return 48;
         if ((active0 & 0x10200000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 5;
            }
            return 25;
         }
         if ((active0 & 0x1e7363dff900000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 5;
            }
            return 48;
         }
         return -1;
      case 6:
         if ((active0 & 0x20100000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 6;
            return 25;
         }
         if ((active0 & 0x40000010000000L) != 0L)
            return 25;
         if ((active0 & 0x4300806100000L) != 0L)
            return 48;
         if ((active0 & 0x1a30536e9c00000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 6;
            return 48;
         }
         return -1;
      case 7:
         if ((active0 & 0xa30737c1800000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
            return 48;
         }
         if ((active0 & 0x20400000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
            return 25;
         }
         if ((active0 & 0x100000008000000L) != 0L)
            return 48;
         return -1;
      case 8:
         if ((active0 & 0x1000000000000L) != 0L)
            return 25;
         if ((active0 & 0x2000680000000L) != 0L)
            return 48;
         if ((active0 & 0xa0073161c00000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 8;
            return 48;
         }
         return -1;
      case 9:
         if ((active0 & 0xa0032121400000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 9;
            return 48;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 9;
            return 25;
         }
         if ((active0 & 0x40040800000L) != 0L)
            return 48;
         return -1;
      case 10:
         if ((active0 & 0xa0032001400000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 10;
            return 48;
         }
         if ((active0 & 0x1120000000L) != 0L)
            return 48;
         return -1;
      case 11:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 11;
            return 25;
         }
         if ((active0 & 0x32001400000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 11;
            return 48;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 48;
         return -1;
      case 12:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 12;
            return 25;
         }
         if ((active0 & 0x20022001400000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 12;
            return 48;
         }
         return -1;
      case 13:
         if ((active0 & 0x1400000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 13;
            return 48;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 13;
            return 25;
         }
         if ((active0 & 0x20012000000000L) != 0L)
            return 48;
         return -1;
      case 14:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 14;
            return 25;
         }
         if ((active0 & 0x20000400000L) != 0L)
            return 48;
         return -1;
      case 15:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 15;
            return 48;
         }
         return -1;
      case 16:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 16;
            return 48;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 38:
         return jjStopAtPos(0, 89);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 74);
      case 43:
         return jjStopAtPos(0, 72);
      case 45:
         return jjStartNfaWithStates_0(0, 73, 49);
      case 47:
         return jjStartNfaWithStates_0(0, 75, 48);
      case 59:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 60:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40040L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10020L);
      case 62:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x4L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1400000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xe00000L, 0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3ffc000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x20000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x202000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x88000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x16000000000000L, 0x800010L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xe0000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2b00000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x3L);
      case 124:
         return jjStopAtPos(0, 91);
      case 126:
         return jjStopAtPos(0, 92);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 59:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 62:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x404000100000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100040000000000L, active1, 0x8L);
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 83, 48);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 85, 48);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 87, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x4260003ffc000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x16a00002000000L, active1, 0L);
      case 113:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 81, 48);
         break;
      case 114:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 90, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L, active1, 0L);
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 77, 25);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 25);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x81000000800000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x400080000100000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000004000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40004000000L, active1, 0L);
      case 100:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x11ff8000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x181000000000000L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000002000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000080000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000002000600000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x8004000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 71:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 48);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2008000000L, active1, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 48);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 48);
         break;
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 48);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0xa0010000600000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100a20101000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000004000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x602000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000800000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x8L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 25);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x1041000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x80040000800000L, active1, 0L);
      case 69:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000100000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 48);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 48);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000016000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x210000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x100001240000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x88000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x101000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2004000400000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x22000600000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x820000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 71:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 48);
         break;
      case 82:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 48);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x220008000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000010000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x42001000000L);
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000062000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000080000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000100000000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10200400000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L);
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 78:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 48);
         break;
      case 82:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 48);
         break;
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x2080000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000020000000L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 48);
         break;
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 48);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000040000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x2040001000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 112:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 25);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 25);
         return jjMoveStringLiteralDfa7_0(active0, 0x20100000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x2040000000000L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000200000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0xa0000040000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 48);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x20400000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x20002001000000L);
      case 97:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 48);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 48);
         break;
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 48);
         return jjMoveStringLiteralDfa9_0(active0, 0x50000400000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x60000000L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 48);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 25);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 30, 48);
         return jjMoveStringLiteralDfa10_0(active0, 0x2100000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000400000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 48);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 120:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 32, 48);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 36, 48);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 29, 48);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x12000000000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 55, 48);
         break;
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 40, 48);
         break;
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 53, 48);
         break;
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 37, 48);
         break;
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 41, 48);
         break;
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(14, 22, 48);
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(17, 24, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec13 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec15 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 48;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  break;
               case 5:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 63)
                     jjCheckNAddTwoStates(44, 45);
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddStates(6, 10);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(11, 14);
                  else if (curChar == 36)
                  {
                     if (kind > 94)
                        kind = 94;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 25:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  break;
               case 24:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  break;
               case 49:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAdd(31);
                  }
                  break;
               case 23:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 8:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 9:
                  if (curChar == 34 && kind > 14)
                     kind = 14;
                  break;
               case 10:
               case 13:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 14:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 15:
                  if (curChar == 42)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 42 && kind > 17)
                     kind = 17;
                  break;
               case 18:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 63)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if ((0x7ffe01000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddTwoStates(22, 26);
                  break;
               case 27:
                  if (curChar == 36 && kind > 94)
                     kind = 94;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 29:
                  if ((0x7ffe01000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 45)
                     jjCheckNAddStates(11, 14);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(6, 10);
                  break;
               case 43:
                  if (curChar == 63)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 44:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 46:
                  if (curChar == 58 && kind > 16)
                     kind = 16;
                  break;
               case 47:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 5:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 24:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 49:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 23:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 6:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 92)
                     jjCheckNAddStates(3, 5);
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 92)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddTwoStates(22, 26);
                  break;
               case 26:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 94)
                     kind = 94;
                  break;
               case 29:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(29);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  break;
               case 5:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 94)
                        kind = 94;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  break;
               case 25:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  break;
               case 24:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  break;
               case 49:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  break;
               case 23:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddTwoStates(22, 26);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(29);
                  }
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 16:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(17, 18);
                  break;
               case 20:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddTwoStates(22, 26);
                  break;
               case 27:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 94)
                     kind = 94;
                  break;
               case 28:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 95)
                     kind = 95;
                  break;
               case 29:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(29);
                  break;
               case 44:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(23, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 7;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  kind = 7;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   11, 12, 14, 6, 7, 9, 31, 32, 33, 38, 39, 31, 32, 0, 38, 3, 
   4, 16, 17, 36, 37, 40, 41, 45, 47, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         if ((jjbitVec9[i1] & l1) != 0L)
            if ((jjbitVec10[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\50", "\51", null, null, 
null, null, null, null, null, null, "\142\151\156\144", 
"\102\117\117\114\105\101\116", "\141\163\163\145\162\164", 
"\141\163\163\145\162\164\55\164\145\155\160\157\162\141\154", "\141\165\164\157\55\146\157\143\165\163", 
"\143\150\141\151\156\151\156\147\55\144\151\162\145\143\164\151\157\156", "\143\157\155\155\141\156\144", "\144\145\143\154\141\162\145", 
"\144\145\146\143\154\141\163\163", "\144\145\146\146\141\143\164", 
"\144\145\146\146\165\156\143\164\151\157\156", "\144\145\146\147\145\156\145\162\151\143", 
"\144\145\146\147\154\157\142\141\154", "\144\145\146\151\156\163\164\141\156\143\145", 
"\144\145\146\155\145\164\150\157\144", "\144\145\146\155\157\144\165\154\145", "\144\145\146\162\165\154\145", 
"\144\145\146\164\145\155\160\154\141\164\145", "\144\145\163\143\162\151\142\145\55\143\154\141\163\163", 
"\104\117\125\102\114\105", "\145\170\151\163\164\163", 
"\145\146\146\145\143\164\151\166\145\55\144\141\164\145", "\145\170\160\151\162\141\164\151\157\156\55\144\141\164\145", 
"\146\141\143\164\55\151\156\144\145\170", "\106\114\117\101\124", "\111\116\124\105\107\105\122", 
"\154\157\147\151\143\141\154", "\114\117\116\107", "\155\157\144\151\146\171", 
"\155\165\154\164\151\163\154\157\164", "\156\157\55\141\147\145\156\144\141", "\156\157\55\154\157\157\160", 
"\116\125\115\102\105\122", "\156\157\164", "\162\145\155\145\155\142\145\162\55\155\141\164\143\150", 
"\162\145\164\162\141\143\164", "\162\165\154\145\55\166\145\162\163\151\157\156", 
"\163\141\154\151\145\156\143\145", "\163\145\156\144", "\123\110\117\122\124", "\163\154\157\164", 
"\123\124\122\111\116\107", "\163\171\155\142\157\154", "\164\145\163\164", "\124\122\125\105", 
"\164\162\165\145", "\164\171\160\145", "\106\101\114\123\105", "\146\141\154\163\145", 
"\156\151\154", "\75\76", "\74\55", "\73", "\53", "\55", "\52", "\57", "\76", "\147\164", 
"\74", "\154\164", "\75\75", "\145\161", "\74\75", "\154\145", "\76\75", "\147\145", 
"\41\75", "\156\145", "\141\156\144", "\46", "\157\162", "\174", "\176", null, null, 
null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffde01L, 0x1ffffffffL, 
};
static final long[] jjtoSkip = {
   0x13eL, 0x0L, 
};
static final long[] jjtoMore = {
   0xc0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[48];
private final int[] jjstateSet = new int[96];
protected char curChar;
public CLIPSParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public CLIPSParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 48; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 6)
         {
            jjmatchedKind = 6;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

}
