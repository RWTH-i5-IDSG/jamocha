/* Generated By:JavaCC: Do not edit this line. CLIPSParserTokenManager.java */
package org.jamocha.parser.clips;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.jamocha.rete.BoundParam;
import org.jamocha.rete.Constants;
import org.jamocha.rete.Deffact;
import org.jamocha.rete.Deftemplate;
import org.jamocha.rete.Function;
import org.jamocha.rete.FunctionParam2;
import org.jamocha.rete.MultiSlot;
import org.jamocha.rete.Parameter;
import org.jamocha.rete.ParameterUtils;
import org.jamocha.rete.Rete;
import org.jamocha.rete.ShellBoundParam;
import org.jamocha.rete.Slot;
import org.jamocha.rete.ValueParam;
import org.jamocha.rete.functions.ShellFunction;
import org.jamocha.rule.Action;
import org.jamocha.rule.AndCondition;
import org.jamocha.rule.AndLiteralConstraint;
import org.jamocha.rule.BoundConstraint;
import org.jamocha.rule.Condition;
import org.jamocha.rule.Constraint;
import org.jamocha.rule.Defrule;
import org.jamocha.rule.ExistCondition;
import org.jamocha.rule.FunctionAction;
import org.jamocha.rule.LiteralConstraint;
import org.jamocha.rule.MultiValue;
import org.jamocha.rule.ObjectCondition;
import org.jamocha.rule.OrLiteralConstraint;
import org.jamocha.rule.PredicateConstraint;
import org.jamocha.rule.RuleProperty;
import org.jamocha.rule.TestCondition;

public class CLIPSParserTokenManager implements CLIPSParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40L) != 0L)
            return 43;
         if ((active0 & 0xfffffffffff80000L) != 0L || (active1 & 0xb55403L) != 0L)
         {
            jjmatchedKind = 90;
            return 43;
         }
         if ((active1 & 0x100L) != 0L)
            return 25;
         return -1;
      case 1:
         if ((active0 & 0xfffffffffff80000L) != 0L || (active1 & 0x200003L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
            return 43;
         }
         if ((active1 & 0x955400L) != 0L)
            return 43;
         return -1;
      case 2:
         if ((active0 & 0xfff7fffffff80000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
            return 43;
         }
         if ((active0 & 0x8000000000000L) != 0L || (active1 & 0x200002L) != 0L)
            return 43;
         return -1;
      case 3:
         if ((active0 & 0xe500200000080000L) != 0L)
            return 43;
         if ((active0 & 0x1af7dffffff00000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
            return 43;
         }
         return -1;
      case 4:
         if ((active0 & 0x18f7dbfffff00000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
            return 43;
         }
         if ((active0 & 0x200040000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 43;
         return -1;
      case 5:
         if ((active0 & 0xf39b9fffd00000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
            return 43;
         }
         if ((active0 & 0x1804406000200000L) != 0L)
            return 43;
         return -1;
      case 6:
         if ((active0 & 0x2218040b100000L) != 0L)
            return 43;
         if ((active0 & 0xd1839bf4c00000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
            return 43;
         }
         return -1;
      case 7:
         if ((active0 & 0x51839bf0c00000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
            return 43;
         }
         if ((active0 & 0x80000004000000L) != 0L)
            return 43;
         return -1;
      case 8:
         if ((active0 & 0x500398b0c00000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 8;
            return 43;
         }
         if ((active0 & 0x1800340000000L) != 0L)
            return 43;
         return -1;
      case 9:
         if ((active0 & 0x20020400000L) != 0L)
            return 43;
         if ((active0 & 0x50019890800000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 9;
            return 43;
         }
         return -1;
      case 10:
         if ((active0 & 0x890000000L) != 0L)
            return 43;
         if ((active0 & 0x50019000800000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 10;
            return 43;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000000000000L) != 0L)
            return 43;
         if ((active0 & 0x10019000800000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 11;
            return 43;
         }
         return -1;
      case 12:
         if ((active0 & 0x10019000800000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 12;
            return 43;
         }
         return -1;
      case 13:
         if ((active0 & 0x10000800000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 13;
            return 43;
         }
         if ((active0 & 0x10009000000000L) != 0L)
            return 43;
         return -1;
      case 14:
         if ((active0 & 0x10000000000L) != 0L)
            return 43;
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 14;
            return 43;
         }
         return -1;
      case 15:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 15;
            return 43;
         }
         return -1;
      case 16:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 16;
            return 43;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 38:
         return jjStopAtPos(0, 86);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 71);
      case 43:
         return jjStopAtPos(0, 69);
      case 45:
         return jjStartNfaWithStates_0(0, 70, 43);
      case 47:
         return jjStartNfaWithStates_0(0, 72, 25);
      case 59:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 60:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8008L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2004L);
      case 62:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x1L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xa00000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x600000L, 0x200000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1ffe000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1c000000000L, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40400L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x11000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc00000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xb000000000000L, 0x100002L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x70000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1580000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xa000000000000000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 88);
      case 126:
         return jjStopAtPos(0, 89);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 59:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 62:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x202000100000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80020000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 80, 43);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 82, 43);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 84, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0x2130001ffe000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xb500001000000L, active1, 0L);
      case 113:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 78, 43);
         break;
      case 114:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 87, 43);
         break;
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 74, 43);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 76, 43);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40800000400000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x200040000100000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000002000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20002000000L, active1, 0L);
      case 100:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8ffc000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0xc0800000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010000001000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000080000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000010000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000001000200000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x4002000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 71:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 43);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1004000000L, active1, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 43);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 43);
         break;
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x50008000200000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80510080800000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000002000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x301000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000400000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 43);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x820800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x40020000400000L, active1, 0L);
      case 69:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000100000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 43);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 43);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000b000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x108000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000920000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x44000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1002000200000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x11000200000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x410000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 71:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 43);
         break;
      case 82:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 43);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x110004000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000008000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x21000800000L);
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000031000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000040000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x800080000000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x8100000000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L);
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 43);
         break;
      case 82:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 43);
         break;
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x1040000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000010000000L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 43);
         break;
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 43);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x50000020000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 108:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x1020000800000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 112:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 43);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x10080000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x1020000000000L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0xa00000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800100000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x50000020000000L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 43);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x10001000800000L);
      case 97:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 43);
         break;
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0x28000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x30000000L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 43);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 43);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L);
      case 99:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 43);
         return jjMoveStringLiteralDfa10_0(active0, 0x1080000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 43);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 120:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 31, 43);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 35, 43);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 28, 43);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x9000000000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 54, 43);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 39, 43);
         break;
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 52, 43);
         break;
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 36, 43);
         break;
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 40, 43);
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(17, 23, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec13 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec15 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 43;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAdd(25);
                  }
                  if ((0x7ff601000000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(22);
                  }
                  break;
               case 0:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAdd(25);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 63)
                     jjCheckNAddTwoStates(39, 40);
                  if ((0x7ff601000000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(22);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddStates(6, 10);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 91)
                        kind = 91;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(4);
                  break;
               case 5:
               case 8:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 6:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 9:
                  if (curChar == 34 && kind > 14)
                     kind = 14;
                  break;
               case 10:
               case 13:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 14:
                  if (curChar == 39 && kind > 14)
                     kind = 14;
                  break;
               case 15:
                  if (curChar == 42)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 42 && kind > 17)
                     kind = 17;
                  break;
               case 18:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 63)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if ((0x7ff601000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 36 && kind > 91)
                     kind = 91;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 25:
                  if ((0x7ffe01000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(6, 10);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar != 46)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 63)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 42);
                  break;
               case 41:
                  if (curChar == 58 && kind > 16)
                     kind = 16;
                  break;
               case 42:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAdd(25);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(22);
                  }
                  break;
               case 0:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAdd(25);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(22);
                  }
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(11, 12);
                  break;
               case 6:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 92)
                     jjCheckNAddStates(3, 5);
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 92)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 25:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(25);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(22);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAdd(25);
                  }
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(22);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 91)
                        kind = 91;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAdd(25);
                  }
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 16:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 14);
                  break;
               case 20:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 91)
                     kind = 91;
                  break;
               case 24:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 92)
                     kind = 92;
                  break;
               case 25:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(25);
                  break;
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 43 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 7;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  kind = 7;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   11, 12, 14, 6, 7, 9, 27, 28, 29, 34, 35, 3, 4, 16, 17, 32, 
   33, 36, 37, 40, 42, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         if ((jjbitVec9[i1] & l1) != 0L)
            if ((jjbitVec10[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\50", "\51", null, null, 
null, null, null, null, null, null, "\142\151\156\144", 
"\102\117\117\114\105\101\116", "\141\163\163\145\162\164", "\141\165\164\157\55\146\157\143\165\163", 
"\143\150\141\151\156\151\156\147\55\144\151\162\145\143\164\151\157\156", "\143\157\155\155\141\156\144", "\144\145\143\154\141\162\145", 
"\144\145\146\143\154\141\163\163", "\144\145\146\146\141\143\164", 
"\144\145\146\146\165\156\143\164\151\157\156", "\144\145\146\147\145\156\145\162\151\143", 
"\144\145\146\147\154\157\142\141\154", "\144\145\146\151\156\163\164\141\156\143\145", 
"\144\145\146\155\145\164\150\157\144", "\144\145\146\155\157\144\165\154\145", "\144\145\146\162\165\154\145", 
"\144\145\146\164\145\155\160\154\141\164\145", "\144\145\163\143\162\151\142\145\55\143\154\141\163\163", 
"\104\117\125\102\114\105", "\145\170\151\163\164\163", 
"\145\146\146\145\143\164\151\166\145\55\144\141\164\145", "\145\170\160\151\162\141\164\151\157\156\55\144\141\164\145", 
"\146\141\143\164\55\151\156\144\145\170", "\106\114\117\101\124", "\111\116\124\105\107\105\122", 
"\154\157\147\151\143\141\154", "\114\117\116\107", "\155\157\144\151\146\171", 
"\155\165\154\164\151\163\154\157\164", "\156\157\55\141\147\145\156\144\141", "\156\157\55\154\157\157\160", 
"\116\125\115\102\105\122", "\156\157\164", "\162\145\155\145\155\142\145\162\55\155\141\164\143\150", 
"\162\145\164\162\141\143\164", "\162\165\154\145\55\166\145\162\163\151\157\156", 
"\163\141\154\151\145\156\143\145", "\163\145\156\144", "\123\110\117\122\124", "\163\154\157\164", 
"\123\124\122\111\116\107", "\163\171\155\142\157\154", "\164\145\163\164", "\124\122\125\105", 
"\164\171\160\145", "\106\101\114\123\105", "\156\151\154", "\75\76", "\74\55", "\73", "\53", 
"\55", "\52", "\57", "\76", "\147\164", "\74", "\154\164", "\75\75", "\145\161", 
"\74\75", "\154\145", "\76\75", "\147\145", "\41\75", "\156\145", "\141\156\144", "\46", 
"\157\162", "\174", "\176", null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffde01L, 0x3fffffffL, 
};
static final long[] jjtoSkip = {
   0x13eL, 0x0L, 
};
static final long[] jjtoMore = {
   0xc0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[43];
private final int[] jjstateSet = new int[86];
protected char curChar;
public CLIPSParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public CLIPSParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 43; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 6)
         {
            jjmatchedKind = 6;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

}
