/* Generated By:JJTree: Do not edit this line. COOLDateTime.java */

package org.jamocha.parser.cool;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import org.jamocha.parser.EvaluationException;
import org.jamocha.parser.JamochaType;
import org.jamocha.parser.JamochaValue;
import org.jamocha.rete.Rete;

public class COOLDateTime extends SimpleNode {
	
	private long value;
	
	public COOLDateTime(int id) {
		super(id);
	}

	public COOLDateTime(COOLParser p, int id) {
		super(p, id);
	}

	private int GMToffsetString2int(String gmtoffset) {
		if (gmtoffset.charAt(0)=='+') {
			return Integer.parseInt(gmtoffset.substring(1));
		}
		return Integer.parseInt(gmtoffset);
	}
	
	public void setName(String n) 
	{ 
		name = n;
		int day=0,month=0,year=0,hours=0,minutes=0,seconds=0,gmtoffset=0;
		
		day=Integer.parseInt(n.substring(9, 11));
		month=Integer.parseInt(n.substring(6, 8));
		year=Integer.parseInt(n.substring(1, 5));
		
		if (n.length() > 12) {
			hours=Integer.parseInt(n.substring(12, 14));
			minutes=Integer.parseInt(n.substring(15, 17));
			if (n.length() > 18) {
				if (n.charAt(17)==':') {
					seconds=Integer.parseInt(n.substring(18, 20));
					if (n.length() > 21) {
						gmtoffset=GMToffsetString2int(n.substring(20,n.length()-1));
					}
				} else /* if (n.charAt(17)=='+' || n.charAt(17)=='-') */ {
					gmtoffset=GMToffsetString2int(n.substring(17,n.length()-1));
				}
			}
 		}
			
		hours-=gmtoffset;
		Calendar cal = new GregorianCalendar(year,month-1,day);
		cal.setTimeZone(TimeZone.getTimeZone("UTC"));
		value = (cal.getTimeInMillis()/1000)+seconds+minutes*60+hours*3600;
	}
	public String getName() { return name; }

	public String toString() {
		return "DateTime: " + name + " (" + value + ")";
	}

	public boolean compareTree(SimpleNode n)
	{
		int i;
		// Do both nodes have the same id?
		if (id!=n.getId()) return false;
		// Do both nodes have the same contents?
		if (value!=((COOLDateTime)n).value) return false;
		// Yes, they do
		return true;
	}

	public JamochaValue getValue(Rete engine) throws EvaluationException {
		return new JamochaValue(JamochaType.LONG, value);
	}

}
