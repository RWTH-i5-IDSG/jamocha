/* Generated By:JJTree&JavaCC: Do not edit this line. COOLParserTokenManager.java */
package org.jamocha.parser.cool;
import java.util.ArrayList;
import org.jamocha.parser.JamochaType;
import org.jamocha.parser.Parser;
import org.jamocha.parser.ParserUtils;
import org.jamocha.parser.Expression;
import org.jamocha.rete.Rete;
import org.jamocha.rete.AbstractSlot;
import org.jamocha.rete.Fact;
import org.jamocha.rete.TemplateSlot;
import org.jamocha.rule.*;

public class COOLParserTokenManager implements COOLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4L) != 0L || (active2 & 0x400L) != 0L)
            return 116;
         if ((active0 & 0xf000080000L) != 0L || (active1 & 0x10L) != 0L)
            return 33;
         if ((active0 & 0x202000000000000L) != 0L || (active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 142;
            return 47;
         }
         if ((active0 & 0x100000L) != 0L)
            return 57;
         if ((active1 & 0x10400L) != 0L)
         {
            jjmatchedKind = 142;
            return 74;
         }
         if ((active0 & 0x75f1f70fffc00100L) != 0L || (active1 & 0xfffffffffffefbe0L) != 0L || (active2 & 0x3f4L) != 0L)
         {
            jjmatchedKind = 142;
            return 116;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active2 & 0x3L) != 0L)
         {
            jjmatchedKind = 142;
            return 52;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000L) != 0L)
            return 58;
         if ((active0 & 0x40c0000000000100L) != 0L || (active2 & 0x44L) != 0L)
            return 116;
         if ((active0 & 0x3f33f70fffc00000L) != 0L || (active1 & 0xfffffffffffeffe0L) != 0L || (active2 & 0x3b8L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
            return 116;
         }
         if ((active2 & 0x3L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
            return 51;
         }
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
            return 73;
         }
         if ((active0 & 0xf000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
            return 56;
         }
         return -1;
      case 2:
         if ((active0 & 0x30000000000000L) != 0L)
            return 116;
         if ((active0 & 0xf000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 2;
            return 56;
         }
         if ((active0 & 0x3f03f70fffc00000L) != 0L || (active1 & 0xffffffffffffffe0L) != 0L || (active2 & 0x3bbL) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 2;
            return 116;
         }
         return -1;
      case 3:
         if ((active0 & 0x2202010000000000L) != 0L || (active1 & 0x38010000000L) != 0L || (active2 & 0x218L) != 0L)
            return 116;
         if ((active0 & 0x7000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 3;
            }
            return 56;
         }
         if ((active0 & 0x8000000000L) != 0L)
            return 56;
         if ((active0 & 0x1d01f60fffc00000L) != 0L || (active1 & 0xfffffc7fefffffe0L) != 0L || (active2 & 0x1a3L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 3;
            }
            return 116;
         }
         return -1;
      case 4:
         if ((active1 & 0x800041004000400L) != 0L || (active2 & 0x20L) != 0L)
            return 116;
         if ((active0 & 0x3000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 4;
            return 56;
         }
         if ((active0 & 0x1d01f60fffc00000L) != 0L || (active1 & 0xf7fff9efebfffbe0L) != 0L || (active2 & 0x183L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 4;
            return 116;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 56;
         return -1;
      case 5:
         if ((active0 & 0x1c01800000000000L) != 0L || (active1 & 0x5610806400000960L) != 0L || (active2 & 0x100L) != 0L)
            return 116;
         if ((active0 & 0x100760fffc00000L) != 0L || (active1 & 0xa1ef798bebfff280L) != 0L || (active2 & 0x83L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 5;
            return 116;
         }
         if ((active0 & 0x3000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
            return 56;
         }
         return -1;
      case 6:
         if ((active0 & 0x100100c02000000L) != 0L || (active1 & 0x2108200800000200L) != 0L)
            return 116;
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 6;
            }
            return 56;
         }
         if ((active0 & 0x6603fdc00000L) != 0L || (active1 & 0x80e75983ebfff080L) != 0L || (active2 & 0x83L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 6;
            }
            return 116;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 56;
         return -1;
      case 7:
         if ((active0 & 0x200020400000L) != 0L || (active1 & 0x160007080L) != 0L)
            return 116;
         if ((active0 & 0x460bdd800000L) != 0L || (active1 & 0x80e759828bff8000L) != 0L || (active2 & 0x83L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 7;
            }
            return 116;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 7;
            }
            return 56;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 56;
         return -1;
      case 8:
         if ((active0 & 0x40310000000L) != 0L || (active1 & 0x8003010000000000L) != 0L)
            return 116;
         if ((active0 & 0x4208cd800000L) != 0L || (active1 & 0xe458828bffb000L) != 0L || (active2 & 0x83L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 8;
            return 116;
         }
         if ((active1 & 0x10L) != 0L)
            return 56;
         return -1;
      case 9:
         if ((active0 & 0x400008000000L) != 0L || (active1 & 0x4408000000000L) != 0L)
            return 116;
         if ((active0 & 0x208c5800000L) != 0L || (active1 & 0xe018028bffb000L) != 0L || (active2 & 0x83L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 9;
            return 116;
         }
         return -1;
      case 10:
         if ((active0 & 0x20005800000L) != 0L || (active1 & 0x100008000000L) != 0L)
            return 116;
         if ((active0 & 0x8c0000000L) != 0L || (active1 & 0xe0080283ffb000L) != 0L || (active2 & 0x83L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 142;
               jjmatchedPos = 10;
            }
            return 116;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x200010000L) != 0L)
            return 116;
         if ((active0 & 0x841000000L) != 0L || (active1 & 0xe0080083feb000L) != 0L || (active2 & 0x83L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 11;
            return 116;
         }
         return -1;
      case 12:
         if ((active1 & 0x80001000L) != 0L || (active2 & 0x1L) != 0L)
            return 116;
         if ((active0 & 0x841000000L) != 0L || (active1 & 0xe0080003fea000L) != 0L || (active2 & 0x82L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 12;
            return 116;
         }
         return -1;
      case 13:
         if ((active1 & 0x2200000L) != 0L || (active2 & 0x80L) != 0L)
            return 116;
         if ((active0 & 0x841000000L) != 0L || (active1 & 0xe0080001dea000L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 13;
            return 116;
         }
         return -1;
      case 14:
         if ((active0 & 0x800000000L) != 0L || (active1 & 0xa00800014e0000L) != 0L || (active2 & 0x2L) != 0L)
            return 116;
         if ((active0 & 0x41000000L) != 0L || (active1 & 0x4000000090a000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 14;
            return 116;
         }
         return -1;
      case 15:
         if ((active1 & 0x4000000010a000L) != 0L)
            return 116;
         if ((active0 & 0x41000000L) != 0L || (active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 15;
            return 116;
         }
         return -1;
      case 16:
         if ((active1 & 0x800000L) != 0L)
            return 116;
         if ((active0 & 0x41000000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 16;
            return 116;
         }
         return -1;
      case 17:
         if ((active0 & 0x40000000L) != 0L)
            return 116;
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 17;
            return 116;
         }
         return -1;
      case 18:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 18;
            return 116;
         }
         return -1;
      case 19:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 19;
            return 116;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L, 0x0L);
      case 38:
         return jjStopAtPos(0, 64);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 42:
         return jjStartNfaWithStates_0(0, 138, 116);
      case 58:
         return jjStartNfaWithStates_0(0, 66, 116);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L);
      case 63:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0xf000000000L, 0x10L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10400L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7200L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20400000000000L, 0x1a00004443fe0000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x22000028000000L, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100fffc00000L, 0x8000000000000000L, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400800000000000L, 0x1000000000000L, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x3L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2001000000000000L, 0x280000000000L, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x1000000000L, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x4080000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x400200000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10c0000000000000L, 0x40000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x118100080000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000038114000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x230000000000L, 0x802800000000L, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x202000000000000L, 0x0L, 0x8L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x20L);
      case 124:
         return jjStopAtPos(0, 65);
      case 126:
         return jjStopAtPos(0, 63);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 116);
         break;
      case 61:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 116);
         break;
      case 62:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 63:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 58);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x10080L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x7200L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x8c000000L, active2, 0x203L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x40000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4400000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200100fffc00000L, active1, 0x2480038100000000L, active2, 0L);
      case 102:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 116);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 130, 116);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0x28L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x4000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x3fe0000L, active2, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0x280000000000L, active2, 0L);
      case 111:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 134, 116);
         return jjMoveStringLiteralDfa2_0(active0, 0x910000000000000L, active1, 0x4002c01230000000L, active2, 0x80L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 116);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x328140000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x1000000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x440000000000L, active1, 0x8010000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400800000000000L, active1, 0x1000000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x400000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x820L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x400L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8280L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3a100000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x1005000000000L, active2, 0x3L);
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 116);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x60000000000000L, active2, 0x8L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0xfffc00000L, active1, 0x400000000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x1080c0000000000L, active2, 0x120L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x240000000000L, active1, 0x13fe0000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x224000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x200100800000000L, active2, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x3800000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x8000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x1084000040000000L, active2, 0x210L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 116);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x2800000480000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x820L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8380L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 76:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 56);
         break;
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x10L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x17000L, active2, 0L);
      case 97:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 116);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000c00000000L, active1, 0x20001000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x120000000L, active2, 0L);
      case 100:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x18008000000L, active2, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 116);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 116);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 132, 116);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 116);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x1800204000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x4400000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20208000000L, active1, 0x4000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100200080000000L, active1, 0x4004400400000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x8011000000000000L, active2, 0x20L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x150000000L, active1, 0x100000000000000L, active2, 0L);
      case 110:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 116);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c00000000000L, active1, 0x400000003fe0000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2100000000000L, active2, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0x2040802800000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x80000000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 116);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 116);
         return jjMoveStringLiteralDfa4_0(active0, 0x40001800000L, active1, 0xc00c0000000L, active2, 0x103L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x18000010000L, active2, 0x83L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0x7000L, active2, 0L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x10L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 84:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 116);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000400000L, active1, 0x2188100800000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1100000000000000L, active1, 0x800000000000L, active2, 0x100L);
      case 101:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 116);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 116);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 133, 116);
         return jjMoveStringLiteralDfa5_0(active0, 0x200059800000L, active1, 0x2080000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0x8010080008000000L, active2, 0L);
      case 108:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 116);
         return jjMoveStringLiteralDfa5_0(active0, 0x800020220000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x200400000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x2000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 116);
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000000L, active1, 0x1440200260000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0x20000100000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0xc06000000L, active1, 0x1000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3fe0000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10010L, active2, 0L);
      case 69:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 116);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 71:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 116);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 76:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 116);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xf000L, active2, 0L);
      case 82:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 116);
         break;
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000020000000L, active1, 0x80040000000L, active2, 0L);
      case 99:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 116);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0xa000000000000000L, active2, 0L);
      case 100:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 116);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 116);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 116);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 116);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 116);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x20000223fe0000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L, active2, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80100800000000L, active2, 0L);
      case 104:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 136, 116);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x44200100000000L, active2, 0L);
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 116);
         return jjMoveStringLiteralDfa6_0(active0, 0xc02000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000c000000L, active1, 0x8000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x10000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x100000080000000L, active2, 0x1L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 116);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 116);
         return jjMoveStringLiteralDfa6_0(active0, 0x400c0000000L, active1, 0x3000000000000L, active2, 0x2L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 116);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 116);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 116);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 116);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x8000000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0x20000000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x7000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 56);
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 82:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 116);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000100208000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200004000000L, active1, 0x40000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000003fe0000L, active2, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 116);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 116);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 116);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 115, 116);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0x80400000000000L, active2, 0x1L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3000000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 116);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x4080000000000L, active2, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10080000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L, active2, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 116);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 125, 116);
         return jjMoveStringLiteralDfa7_0(active0, 0x880400000L, active1, 0x20000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 121:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0x80000083fe0000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 69:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 116);
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x3000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8010L, active2, 0L);
      case 84:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 56);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2c0000000L, active1, 0x20000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0x200000000L, active2, 0L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 116);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 93, 116);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 96, 116);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4088000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x101800000L, active1, 0x10008000000L, active2, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40010000000L, active1, 0L, active2, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0x400000000000L, active2, 0x80L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 116);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 116);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 116);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0x8002100000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000b000L, active2, 0x80L);
      case 69:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 56);
         break;
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1800000L, active1, 0L, active2, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000001000000L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 116);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 116);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 112, 116);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 113, 116);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 127, 116);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0xc000000L, active1, 0x500008900000L, active2, 0L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 116);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0x80000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0x400000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x60000L, active2, 0L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 116);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4008200000000L, active2, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 121:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 116);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xa000L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000082000000L, active2, 0L);
      case 99:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 116);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0x20000000000000L, active2, 0x80L);
      case 101:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 103, 116);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0x80000080000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1200000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x900000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20004000000L, active1, 0x100000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 46, 116);
         break;
      case 116:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 110, 116);
         return jjMoveStringLiteralDfa10_0(active0, 0x1800000L, active1, 0x8040000L, active2, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 121:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 114, 116);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0x20000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0x80000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xa000L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x81000000L, active1, 0x60000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x420000L, active2, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 26, 116);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 108, 116);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0x80000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000L, active2, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 116);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80100000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000L, active2, 0x2L);
      case 120:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 91, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xa000L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 83:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 80, 116);
         break;
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L, active1, 0x200000L, active2, 0x2L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x420000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(11, 97, 116);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x180000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000000L, active2, 0x1L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 31, 116);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x60000001000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000L, active2, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(12, 76, 116);
         break;
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xa000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active1, 0x800000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2400000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 104:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(12, 95, 116);
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000000000000L, active2, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L, active1, 0x80000L, active2, 0L);
      case 110:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 128, 116);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000040000L, active2, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x60000001000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0xa000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000001180000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000020000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0x800000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L, active1, 0x20000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 85, 116);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 89, 116);
         break;
      case 116:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(13, 135, 116);
         break;
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xa000L, active2, 0L);
      case 99:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(14, 35, 116);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(14, 129, 116);
         break;
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 117, 116);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 119, 116);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 115:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(14, 81, 116);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(14, 82, 116);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 83, 116);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(14, 86, 116);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(14, 88, 116);
         break;
      case 121:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 107, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 83:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(15, 77, 116);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(15, 79, 116);
         break;
      case 101:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 118, 116);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000L, active1, 0L);
      case 115:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(15, 84, 116);
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000L, active1, 0L);
      case 115:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(16, 87, 116);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(17, 30, 116);
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(20, 24, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 116;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 116:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 47:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 73:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 74:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 0:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 59)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 55;
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 33;
                  if ((0x5400fc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(15, 20);
                  }
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 52:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 33:
                  if (curChar == 42)
                     jjAddStates(21, 23);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(11);
                  break;
               case 12:
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 16:
                  if (curChar == 34 && kind > 17)
                     kind = 17;
                  break;
               case 17:
               case 20:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  break;
               case 18:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 21:
                  if (curChar == 39 && kind > 17)
                     kind = 17;
                  break;
               case 23:
                  if ((0x5400fc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 26:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 27:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 28:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 29:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 30:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 31:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(32, 24);
                  break;
               case 34:
                  if ((0x5400fc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if (curChar == 42 && kind > 21)
                     kind = 21;
                  break;
               case 36:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 37:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 38:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 39:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 40:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 41:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 42:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 35);
                  break;
               case 44:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 54:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 56:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 57:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 59:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 60:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 61:
                  if ((0x5400fc2affffd9ffL & l) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 62:
                  if ((0x57fffc2affffd9ffL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(3, 5);
                  break;
               case 63:
                  if ((0x7400fc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(3, 5);
                  break;
               case 64:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if ((0x77fffc2affffd9ffL & l) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 66:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 67:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 68:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if ((0x77fffc2affffd9ffL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAdd(69);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(15, 20);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(85, 86);
                  break;
               case 86:
                  if (curChar != 46)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(87, 88);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(87, 88);
                  break;
               case 89:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(90);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(94);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(110, 113);
                  break;
               case 110:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(113);
                  break;
               case 113:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 116:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  break;
               case 47:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 73:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 0:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((0xaffffffff7ffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 91)
                     jjAddStates(44, 46);
                  if (curChar == 84)
                     jjAddStates(47, 48);
                  else if (curChar == 70)
                     jjAddStates(49, 50);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 52:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(56);
                  break;
               case 1:
                  jjAddStates(12, 14);
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 14:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if (curChar == 92)
                     jjCheckNAddStates(9, 11);
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 19:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if (curChar == 92)
                     jjCheckNAddStates(6, 8);
                  break;
               case 22:
                  if (curChar == 91)
                     jjAddStates(44, 46);
                  break;
               case 23:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if (curChar == 93 && kind > 18)
                     kind = 18;
                  break;
               case 25:
                  if ((0xaffffffff7ffffffL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 26:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 27:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 28:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 29:
               case 30:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 31:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(32, 24);
                  break;
               case 34:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0xaffffffff7ffffffL & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 37:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 38:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 39:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 40:
               case 41:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 42:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 35);
                  break;
               case 45:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 46:
               case 82:
                  if (curChar == 117)
                     jjCheckNAdd(45);
                  break;
               case 48:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 101 && kind > 51)
                     kind = 51;
                  break;
               case 50:
               case 75:
                  if (curChar == 115)
                     jjCheckNAdd(49);
                  break;
               case 53:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 56:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(56);
                  break;
               case 58:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAdd(59);
                  break;
               case 61:
                  if ((0xafffffffffffffffL & l) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 62:
                  if ((0xaffffffff7ffffffL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(3, 5);
                  break;
               case 63:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(3, 5);
                  break;
               case 64:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if ((0xafffffffdfffffffL & l) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 66:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 67:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 68:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if ((0xafffffffdfffffffL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAdd(69);
                  break;
               case 70:
                  if (curChar == 70)
                     jjAddStates(49, 50);
                  break;
               case 71:
                  if (curChar == 69 && kind > 51)
                     kind = 51;
                  break;
               case 72:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 76:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 84)
                     jjAddStates(47, 48);
                  break;
               case 79:
                  if (curChar == 69 && kind > 50)
                     kind = 50;
                  break;
               case 80:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 83:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 88:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  break;
               case 116:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  break;
               case 73:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  break;
               case 74:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     jjCheckNAdd(69);
                  }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 23:
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 25:
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 29:
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(32, 24);
                  break;
               case 34:
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 36:
               case 37:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 40:
               case 41:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(43, 35);
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(3, 5);
                  break;
               case 63:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(3, 5);
                  break;
               case 64:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 66:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 67:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 68:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAdd(69);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 116 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   67, 68, 69, 63, 64, 65, 18, 19, 21, 13, 14, 16, 1, 2, 4, 6, 
   85, 86, 91, 92, 95, 34, 36, 40, 26, 27, 28, 24, 27, 28, 24, 30, 
   31, 32, 37, 38, 39, 35, 38, 39, 35, 41, 42, 43, 23, 25, 29, 81, 
   83, 74, 77, 10, 11, 89, 90, 93, 94, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", "\76\75", null, null, null, 
null, null, null, null, null, null, null, "\77", "\44\77", null, 
"\144\145\146\146\141\143\164\163", "\144\145\146\164\145\155\160\154\141\164\145", 
"\144\145\146\164\145\155\160\154\141\164\145\137\143\157\156\163\164\162\165\143\164", "\144\145\146\162\165\154\145", 
"\144\145\146\146\165\156\143\164\151\157\156", "\144\145\146\147\145\156\145\162\151\143", 
"\144\145\146\155\145\164\150\157\144", "\144\145\146\143\154\141\163\163", 
"\144\145\146\155\145\163\163\141\147\145\55\150\141\156\144\154\145\162", "\144\145\146\151\156\163\164\141\156\143\145\163", 
"\144\145\146\155\157\144\165\154\145", "\144\145\146\147\154\157\142\141\154", "\144\145\146\141\165\154\164", 
"\144\145\146\141\165\154\164\55\144\171\156\141\155\151\143", "\77\104\105\106\101\125\114\124", "\77\104\105\122\111\126\105", 
"\77\116\117\116\105", "\77\101\114\114", "\163\154\157\164", 
"\163\151\156\147\154\145\55\163\154\157\164", "\155\165\154\164\151\163\154\157\164", "\75\76", 
"\144\145\143\154\141\162\145", "\163\141\154\151\145\156\143\145", "\141\165\164\157\55\146\157\143\165\163", 
"\145\170\160\157\162\164", "\151\155\160\157\162\164", "\164\171\160\145", null, null, "\156\157\164", 
"\141\156\144", "\157\162", "\157\146", "\154\157\147\151\143\141\154", "\164\145\163\164", 
"\145\170\151\163\164\163", "\146\157\162\141\154\154", "\157\142\152\145\143\164", "\151\163\55\141", 
"\74\55", "\176", "\46", "\174", "\72", "\75", "\77\126\101\122\111\101\102\114\105", 
"\123\131\115\102\117\114", "\123\124\122\111\116\107", "\104\101\124\105\124\111\115\105", 
"\114\105\130\105\115\105", "\111\116\124\105\107\105\122", "\106\114\117\101\124", 
"\116\125\115\102\105\122", "\111\116\123\124\101\116\103\105\55\116\101\115\105", 
"\111\116\123\124\101\116\103\105\55\101\104\104\122\105\123\123", "\111\116\123\124\101\116\103\105", 
"\105\130\124\105\122\116\101\114\55\101\104\104\122\105\123\123", "\106\101\103\124\55\101\104\104\122\105\123\123", 
"\141\154\154\157\167\145\144\55\163\171\155\142\157\154\163", "\141\154\154\157\167\145\144\55\163\164\162\151\156\147\163", 
"\141\154\154\157\167\145\144\55\154\145\170\145\155\145\163", "\141\154\154\157\167\145\144\55\151\156\164\145\147\145\162\163", 
"\141\154\154\157\167\145\144\55\146\154\157\141\164\163", "\141\154\154\157\167\145\144\55\156\165\155\142\145\162\163", 
"\141\154\154\157\167\145\144\55\151\156\163\164\141\156\143\145\163", "\141\154\154\157\167\145\144\55\143\154\141\163\163\145\163", 
"\141\154\154\157\167\145\144\55\166\141\154\165\145\163", "\162\141\156\147\145", "\143\141\162\144\151\156\141\154\151\164\171", 
"\162\157\154\145", "\143\157\156\143\162\145\164\145", "\141\142\163\164\162\141\143\164", 
"\160\141\164\164\145\162\156\55\155\141\164\143\150", "\162\145\141\143\164\151\166\145", 
"\156\157\156\55\162\145\141\143\164\151\166\145", "\141\143\164\151\166\145", "\163\164\157\162\141\147\145", 
"\154\157\143\141\154", "\163\150\141\162\145\144", "\141\143\143\145\163\163", 
"\162\145\141\144\55\167\162\151\164\145", "\162\145\141\144\55\157\156\154\171", "\162\145\141\144", 
"\167\162\151\164\145", "\151\156\151\164\151\141\154\151\172\145\55\157\156\154\171", 
"\160\162\157\160\141\147\141\164\151\157\156", "\151\156\150\145\162\151\164", "\156\157\55\151\156\150\145\162\151\164", 
"\163\157\165\162\143\145", "\145\170\143\154\165\163\151\166\145", 
"\143\157\155\160\157\163\151\164\145", "\166\151\163\151\142\151\154\151\164\171", "\160\162\151\166\141\164\145", 
"\160\165\142\154\151\143", "\143\162\145\141\164\145\55\141\143\143\145\163\163\157\162", 
"\157\166\145\162\162\151\144\145\55\155\145\163\163\141\147\145", "\155\145\163\163\141\147\145\55\150\141\156\144\154\145\162", 
"\160\162\151\155\141\162\171", "\141\162\157\165\156\144", "\142\145\146\157\162\145", 
"\141\146\164\145\162", "\141\163\163\145\162\164", "\162\145\164\162\141\143\164", 
"\155\157\144\151\146\171", "\144\165\160\154\151\143\141\164\145", 
"\146\141\143\164\55\162\145\154\141\164\151\157\156", "\146\141\143\164\55\163\154\157\164\55\166\141\154\165\145", "\151\146", 
"\164\150\145\156", "\145\154\163\145", "\167\150\151\154\145", "\144\157", 
"\154\157\157\160\55\146\157\162\55\143\157\165\156\164", "\163\167\151\164\143\150", "\143\141\163\145", "\52", null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffff0dc1L, 0xffffffffffffffffL, 0x77ffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x20L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[116];
private final int[] jjstateSet = new int[232];
protected char curChar;
public COOLParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public COOLParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 116; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
