/* Generated By:JJTree&JavaCC: Do not edit this line. COOLParserTokenManager.java */
package org.jamocha.parser.cool;
import java.util.Hashtable;
import java.util.HashSet;
import java.util.Set;
import java.util.Iterator;
import java.util.ArrayList;
import org.jamocha.parser.JamochaValue;
import org.jamocha.parser.JamochaType;
import org.jamocha.parser.Parser;
import org.jamocha.parser.Expression;
import org.jamocha.rete.Rete;
import org.jamocha.rete.Slot;
import org.jamocha.rete.MultiSlot;
import org.jamocha.rete.AbstractSlot;
import org.jamocha.rete.Function;
import org.jamocha.rete.Fact;
import org.jamocha.rule.*;

public class COOLParserTokenManager implements COOLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x410L) != 0L)
         {
            jjmatchedKind = 136;
            return 72;
         }
         if ((active0 & 0x8000000780004000L) != 0L)
            return 31;
         if ((active0 & 0x2000000000000000L) != 0L || (active2 & 0x10L) != 0L)
            return 94;
         if ((active0 & 0x8000L) != 0L)
            return 55;
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0xc00000000000000L) != 0L)
         {
            jjmatchedKind = 136;
            return 50;
         }
         if ((active0 & 0x3af8fb87ffe0100L) != 0L || (active1 & 0xd3fffffffffffbefL) != 0L || (active2 & 0xfL) != 0L)
         {
            jjmatchedKind = 136;
            return 94;
         }
         if ((active0 & 0x10100000000000L) != 0L || (active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 136;
            return 45;
         }
         return -1;
      case 1:
         if ((active0 & 0x1f99fb87ffe0000L) != 0L || (active1 & 0xe3fffffffffffbffL) != 0L || (active2 & 0xeL) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
            return 94;
         }
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
            return 71;
         }
         if ((active0 & 0x206000000000100L) != 0L || (active1 & 0x1000000000000000L) != 0L || (active2 & 0x1L) != 0L)
            return 94;
         if ((active1 & 0xc00000000000000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
            return 49;
         }
         if ((active0 & 0x8000000780000000L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
            return 54;
         }
         if ((active0 & 0x8000L) != 0L)
            return 56;
         return -1;
      case 2:
         if ((active0 & 0x8000000780000000L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 2;
            return 54;
         }
         if ((active0 & 0x1800000000000L) != 0L)
            return 94;
         if ((active0 & 0x1f81fb87ffe0000L) != 0L || (active1 & 0xefffffffffffffffL) != 0L || (active2 & 0xeL) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
            return 94;
         }
         return -1;
      case 3:
         if ((active0 & 0x110100800000000L) != 0L || (active1 & 0x6000000e00400000L) != 0L || (active2 & 0x8L) != 0L)
            return 94;
         if ((active0 & 0x8000000380000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 134;
               jjmatchedPos = 3;
            }
            return 54;
         }
         if ((active0 & 0xe80fb07ffe0000L) != 0L || (active1 & 0x8ffffff1ffbfffffL) != 0L || (active2 & 0x6L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 3;
            }
            return 94;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 54;
         return -1;
      case 4:
         if ((active0 & 0xe80fb07ffe0000L) != 0L || (active1 & 0xfdfffe7bfafffefL) != 0L || (active2 & 0x6L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
            return 94;
         }
         if ((active1 & 0x8020001040100010L) != 0L)
            return 94;
         if ((active0 & 0x8000000180000000L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 4;
            return 54;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 54;
         return -1;
      case 5:
         if ((active0 & 0x8000000180000000L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 5;
            return 54;
         }
         if ((active0 & 0xe00c0000000000L) != 0L || (active1 & 0x158420190000027L) != 0L || (active2 & 0x4L) != 0L)
            return 94;
         if ((active0 & 0x803b07ffe0000L) != 0L || (active1 & 0xe87bde62fafffc8L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 5;
            return 94;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000000080000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 134;
               jjmatchedPos = 6;
            }
            return 54;
         }
         if ((active0 & 0x8008060100000L) != 0L || (active1 & 0x84208020000008L) != 0L)
            return 94;
         if ((active0 & 0x3301fee0000L) != 0L || (active1 & 0xe039d660fafffc0L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 6;
            }
            return 94;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 54;
         return -1;
      case 7:
         if ((active0 & 0x2305eec0000L) != 0L || (active1 & 0xe039d660a2ffe00L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 7;
            }
            return 94;
         }
         if ((active0 & 0x10001020000L) != 0L || (active1 & 0x58001c0L) != 0L)
            return 94;
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 134;
               jjmatchedPos = 7;
            }
            return 54;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 54;
         return -1;
      case 8:
         if ((active0 & 0x2018800000L) != 0L || (active1 & 0x2000c0400000000L) != 0L)
            return 94;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 54;
         if ((active0 & 0x210466c0000L) != 0L || (active1 & 0xc0391620a2ffec0L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 8;
            return 94;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000400000L) != 0L || (active1 & 0x110200000000L) != 0L)
            return 94;
         if ((active0 & 0x10462c0000L) != 0L || (active1 & 0xc0380600a2ffec0L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 9;
            return 94;
         }
         return -1;
      case 10:
         if ((active0 & 0x46000000L) != 0L || (active1 & 0xc0380200a0ffec0L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 10;
            }
            return 94;
         }
         if ((active0 & 0x10002c0000L) != 0L || (active1 & 0x4000200000L) != 0L)
            return 94;
         return -1;
      case 11:
         if ((active0 & 0x4000000L) != 0L || (active1 & 0x8000400L) != 0L)
            return 94;
         if ((active0 & 0x42080000L) != 0L || (active1 & 0xc038020020ffac0L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 11;
            return 94;
         }
         return -1;
      case 12:
         if ((active1 & 0x400000002000040L) != 0L)
            return 94;
         if ((active0 & 0x42080000L) != 0L || (active1 & 0x8038020000ffa80L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 12;
            return 94;
         }
         return -1;
      case 13:
         if ((active0 & 0x42080000L) != 0L || (active1 & 0x803802000077a80L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 13;
            return 94;
         }
         if ((active1 & 0x88000L) != 0L || (active2 & 0x2L) != 0L)
            return 94;
         return -1;
      case 14:
         if ((active0 & 0x40000000L) != 0L || (active1 & 0x802802000053800L) != 0L)
            return 94;
         if ((active0 & 0x2080000L) != 0L || (active1 & 0x1000000024280L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 14;
            return 94;
         }
         return -1;
      case 15:
         if ((active1 & 0x1000000004280L) != 0L)
            return 94;
         if ((active0 & 0x2080000L) != 0L || (active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 15;
            return 94;
         }
         return -1;
      case 16:
         if ((active0 & 0x2080000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 16;
            return 94;
         }
         if ((active1 & 0x20000L) != 0L)
            return 94;
         return -1;
      case 17:
         if ((active0 & 0x2000000L) != 0L)
            return 94;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 17;
            return 94;
         }
         return -1;
      case 18:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 18;
            return 94;
         }
         return -1;
      case 19:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 19;
            return 94;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L, 0x0L);
      case 38:
         return jjStopAtPos(0, 59);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 42:
         return jjStartNfaWithStates_0(0, 132, 94);
      case 58:
         return jjStartNfaWithStates_0(0, 61, 94);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L);
      case 63:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x8000000780000000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x410L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c8L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1020000000000L, 0x680001110ff800L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x880000a00000L, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x807ffe0000L, 0x200000000000000L, 0x1L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20040000000000L, 0x4000040000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0xc00000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100080000000000L, 0x100000a000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x40000000L, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x102000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x10008000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x86000000000000L, 0x1000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4604002000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000e04500000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x11800000000L, 0x200a0000000L, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10100000000000L, 0x2000000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000001000000000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 60);
      case 126:
         return jjStopAtPos(0, 58);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 94);
         break;
      case 61:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 94);
         break;
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 63:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 56);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x400L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0x1c8L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0xc00000002300000L, active2, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0x1000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x110000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000807ffe0000L, active1, 0x92000e04000000L, active2, 0L);
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 94);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 124, 94);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa000000080000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x100000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x40000000000ff800L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0xa000000000L, active2, 0L);
      case 111:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 128, 94);
         return jjMoveStringLiteralDfa2_0(active0, 0x48800000000000L, active1, 0x1000b0048c00000L, active2, 0x2L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 94);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xca05000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0x40000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x22000000000L, active1, 0x200400000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20040000000000L, active1, 0x40000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x10000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x21L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x10L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1c0L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x208L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe84000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0xc00040140000000L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 94);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2001800000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x7ffe0000L, active1, 0x10000000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x8004203000000000L, active2, 0x4L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000000000L, active1, 0x4ff800L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x8900000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0x8004020000000L, active2, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c0000000000L, active1, 0x200000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x200000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x4042100001000000L, active2, 0x8L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 94);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0xa0000012000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x21L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20cL, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 76:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 54);
         break;
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000100000000L, active1, 0L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x5c0L, active2, 0L);
      case 97:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 94);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000060000000L, active1, 0x800040000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x4800000L, active2, 0L);
      case 100:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600200000L, active2, 0L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 94);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 94);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 126, 94);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 94);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x60008100000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x220000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1010400000L, active1, 0x100000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010004000000L, active1, 0x100110010000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x8200440000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0xa800000L, active1, 0x4000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 125, 94);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xe0000000000L, active1, 0x100000000ff800L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x84000000000L, active2, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x810200a0000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x2000000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 94);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 94);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000c0000L, active1, 0xc00003003000000L, active2, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0xc00000600000400L, active2, 0x2L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x1c0L, active2, 0L);
      case 69:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000100000000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 84:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 94);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000020000L, active1, 0x86204020000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x88000000000000L, active1, 0x20000000000L, active2, 0x4L);
      case 101:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 94);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 94);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 94);
         return jjMoveStringLiteralDfa5_0(active0, 0x10002cc0000L, active1, 0x82000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x200402000200000L, active2, 0L);
      case 108:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 94);
         return jjMoveStringLiteralDfa5_0(active0, 0x40001011000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0x8010000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x80000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 94);
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000L, active1, 0x51008009800000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x800004000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x60300000L, active1, 0x40000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xff800L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x400L, active2, 0L);
      case 69:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 71:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 94);
         break;
      case 76:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 94);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3c0L, active2, 0L);
      case 82:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 94);
         break;
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000001000000L, active1, 0x2001000000L, active2, 0L);
      case 99:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0x280000000000000L, active2, 0L);
      case 100:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 94);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 94);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 94);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x8000088ff800L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L, active2, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2004020000000L, active2, 0L);
      case 104:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1108004000000L, active2, 0L);
      case 108:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x60100000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000600000L, active1, 0x200000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x400000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0x404000002000000L, active2, 0L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 94);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x2006000000L, active1, 0x8000c0000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 94);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 94);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 94);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 118, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0x200000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 121:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 120, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x800000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1c0L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 69:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 54);
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 94);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200004008200000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000200000L, active1, 0x1000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000ff800L, active2, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 94);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 94);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 94);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 94);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x402010000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc0000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 94);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x800102000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x402000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L, active2, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 94);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 119, 94);
         return jjMoveStringLiteralDfa7_0(active0, 0x44020000L, active1, 0x800000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 121:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 114, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0x20000020ff800L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 69:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x200L, active2, 0L);
      case 84:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 54);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x16000000L, active1, 0x800000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0x8000000L, active2, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 94);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 94);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 94);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x102200000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x80c0000L, active1, 0x400000400200000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000800000L, active1, 0x800000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0x10000000000L, active2, 0x2L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 94);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 94);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 88, 94);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0x200084000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000002c0L, active2, 0x2L);
      case 69:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 54);
         break;
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000L, active1, 0x400000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000040000L, active2, 0L);
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 94);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 94);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 94);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 107, 94);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 121, 94);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x600000L, active1, 0x14000224000L, active2, 0L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 94);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0x2000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0x10000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1800L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 94);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800100208000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 121:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 98, 94);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x280L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000002080000L, active2, 0L);
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 94);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L, active1, 0x800000000000L, active2, 0x2L);
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 97, 94);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L, active1, 0x2000002000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x48000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x24000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000200000L, active1, 0x4000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 94);
         break;
      case 116:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 104, 94);
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000L, active1, 0x400000000201000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 121:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 108, 94);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0x800L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L, active1, 0x2000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x280L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x4080000L, active1, 0x1800000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10800L, active2, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 21, 94);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 102, 94);
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0x2000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000L, active2, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 36, 94);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2004000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000008000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 85, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x280L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 83:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 74, 94);
         break;
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L, active1, 0x800000000008000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10800L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 91, 94);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x6000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400002000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 26, 94);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1800000040000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000L, active2, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(12, 70, 94);
         break;
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x280L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L, active1, 0x20000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x90000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 104:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(12, 89, 94);
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x802000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active1, 0x2000L, active2, 0L);
      case 110:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 122, 94);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000001000L, active2, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1800000040000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x280L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000000046000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000000800L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L, active1, 0x20000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000L, active1, 0x800000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 115:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(13, 79, 94);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 83, 94);
         break;
      case 116:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(13, 129, 94);
         break;
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x280L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(14, 30, 94);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000L, active1, 0L);
      case 101:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 123, 94);
         break;
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000L, active1, 0L);
      case 114:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 111, 94);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 113, 94);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4000L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(14, 75, 94);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(14, 76, 94);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(14, 77, 94);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(14, 80, 94);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(14, 82, 94);
         break;
      case 121:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 101, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 83:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(15, 71, 94);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(15, 73, 94);
         break;
      case 101:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 112, 94);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L, active1, 0L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(15, 78, 94);
         return jjMoveStringLiteralDfa16_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000L, active1, 0L);
      case 115:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(16, 81, 94);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(17, 25, 94);
         return jjMoveStringLiteralDfa18_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(20, 19, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 94;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 0:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 59)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 53;
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 31;
                  if ((0x5400fc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(15, 19);
                  }
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 50:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 94:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 72:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 71:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 45:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 31:
                  if (curChar == 42)
                     jjAddStates(20, 22);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(9);
                  break;
               case 10:
               case 13:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 14:
                  if (curChar == 34 && kind > 12)
                     kind = 12;
                  break;
               case 15:
               case 18:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 19:
                  if (curChar == 39 && kind > 12)
                     kind = 12;
                  break;
               case 21:
                  if ((0x5400fc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 24:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 25:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 26:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 27:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 28:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 29:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 22);
                  break;
               case 32:
                  if ((0x5400fc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if (curChar == 42 && kind > 16)
                     kind = 16;
                  break;
               case 34:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(33, 36);
                  break;
               case 35:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(33, 36);
                  break;
               case 36:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 37:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 38:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 39:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 40:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 33);
                  break;
               case 42:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 52:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 54:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 55:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 57:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 59:
                  if ((0x5400fc2affffd9ffL & l) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 60:
                  if ((0x57fffc2affffd9ffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(3, 5);
                  break;
               case 61:
                  if ((0x7400fc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(3, 5);
                  break;
               case 62:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if ((0x77fffc2affffd9ffL & l) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 64:
                  if ((0x57fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 65:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 66:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if ((0x77fffc2affffd9ffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(67);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(15, 19);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(83);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if (curChar != 46)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(86, 87);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(86, 87);
                  break;
               case 88:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(89);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 92:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(93);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 0:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((0xaffffffff7ffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 91)
                     jjAddStates(43, 45);
                  if (curChar == 84)
                     jjAddStates(46, 47);
                  else if (curChar == 70)
                     jjAddStates(48, 49);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 50:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 94:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  break;
               case 72:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 74;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 45:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(54);
                  break;
               case 1:
                  jjAddStates(12, 14);
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 92)
                     jjCheckNAddStates(9, 11);
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 17:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddStates(6, 8);
                  break;
               case 20:
                  if (curChar == 91)
                     jjAddStates(43, 45);
                  break;
               case 21:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if (curChar == 93 && kind > 13)
                     kind = 13;
                  break;
               case 23:
                  if ((0xaffffffff7ffffffL & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 24:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 25:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 26:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 27:
               case 28:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 29:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 22);
                  break;
               case 32:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0xaffffffff7ffffffL & l) != 0L)
                     jjCheckNAddStates(33, 36);
                  break;
               case 35:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(33, 36);
                  break;
               case 36:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 37:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 38:
               case 39:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 40:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 33);
                  break;
               case 43:
                  if (curChar == 101 && kind > 45)
                     kind = 45;
                  break;
               case 44:
               case 80:
                  if (curChar == 117)
                     jjCheckNAdd(43);
                  break;
               case 46:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 48:
               case 73:
                  if (curChar == 115)
                     jjCheckNAdd(47);
                  break;
               case 51:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(54);
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(57);
                  break;
               case 59:
                  if ((0xafffffffffffffffL & l) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 60:
                  if ((0xaffffffff7ffffffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(3, 5);
                  break;
               case 61:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(3, 5);
                  break;
               case 62:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if ((0xafffffffdfffffffL & l) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 64:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 65:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 66:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if ((0xafffffffdfffffffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if (curChar == 70)
                     jjAddStates(48, 49);
                  break;
               case 69:
                  if (curChar == 69 && kind > 46)
                     kind = 46;
                  break;
               case 70:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 74:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 84)
                     jjAddStates(46, 47);
                  break;
               case 77:
                  if (curChar == 69 && kind > 45)
                     kind = 45;
                  break;
               case 78:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 87:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 91:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  break;
               case 94:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  break;
               case 72:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  break;
               case 71:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(67);
                  }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 21:
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 23:
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 27:
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(30, 22);
                  break;
               case 32:
               case 37:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 34:
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(33, 36);
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 38:
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(41, 33);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(3, 5);
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(3, 5);
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 64:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 65:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 66:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 94 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   65, 66, 67, 61, 62, 63, 16, 17, 19, 11, 12, 14, 1, 2, 4, 83, 
   84, 85, 90, 91, 32, 34, 38, 24, 25, 26, 22, 25, 26, 22, 28, 29, 
   30, 35, 36, 37, 33, 36, 37, 33, 39, 40, 41, 21, 23, 27, 79, 81, 
   72, 75, 8, 9, 88, 89, 92, 93, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", "\76\75", null, null, null, 
null, null, "\77", "\44\77", null, "\144\145\146\146\141\143\164\163", 
"\144\145\146\164\145\155\160\154\141\164\145", 
"\144\145\146\164\145\155\160\154\141\164\145\137\143\157\156\163\164\162\165\143\164", "\144\145\146\162\165\154\145", 
"\144\145\146\146\165\156\143\164\151\157\156", "\144\145\146\147\145\156\145\162\151\143", 
"\144\145\146\155\145\164\150\157\144", "\144\145\146\143\154\141\163\163", 
"\144\145\146\155\145\163\163\141\147\145\55\150\141\156\144\154\145\162", "\144\145\146\151\156\163\164\141\156\143\145\163", 
"\144\145\146\155\157\144\165\154\145", "\144\145\146\147\154\157\142\141\154", "\144\145\146\141\165\154\164", 
"\144\145\146\141\165\154\164\55\144\171\156\141\155\151\143", "\77\104\105\106\101\125\114\124", "\77\104\105\122\111\126\105", 
"\77\116\117\116\105", "\77\101\114\114", "\163\154\157\164", 
"\163\151\156\147\154\145\55\163\154\157\164", "\155\165\154\164\151\163\154\157\164", "\75\76", 
"\144\145\143\154\141\162\145", "\163\141\154\151\145\156\143\145", "\141\165\164\157\55\146\157\143\165\163", 
"\145\170\160\157\162\164", "\151\155\160\157\162\164", "\164\171\160\145", null, null, "\156\157\164", 
"\141\156\144", "\157\162", "\157\146", "\154\157\147\151\143\141\154", "\164\145\163\164", 
"\145\170\151\163\164\163", "\146\157\162\141\154\154", "\157\142\152\145\143\164", "\151\163\55\141", 
"\74\55", "\176", "\46", "\174", "\72", "\75", "\77\126\101\122\111\101\102\114\105", 
"\123\131\115\102\117\114", "\123\124\122\111\116\107", "\114\105\130\105\115\105", 
"\111\116\124\105\107\105\122", "\106\114\117\101\124", "\116\125\115\102\105\122", 
"\111\116\123\124\101\116\103\105\55\116\101\115\105", "\111\116\123\124\101\116\103\105\55\101\104\104\122\105\123\123", 
"\111\116\123\124\101\116\103\105", "\105\130\124\105\122\116\101\114\55\101\104\104\122\105\123\123", 
"\106\101\103\124\55\101\104\104\122\105\123\123", "\141\154\154\157\167\145\144\55\163\171\155\142\157\154\163", 
"\141\154\154\157\167\145\144\55\163\164\162\151\156\147\163", "\141\154\154\157\167\145\144\55\154\145\170\145\155\145\163", 
"\141\154\154\157\167\145\144\55\151\156\164\145\147\145\162\163", "\141\154\154\157\167\145\144\55\146\154\157\141\164\163", 
"\141\154\154\157\167\145\144\55\156\165\155\142\145\162\163", "\141\154\154\157\167\145\144\55\151\156\163\164\141\156\143\145\163", 
"\141\154\154\157\167\145\144\55\143\154\141\163\163\145\163", "\141\154\154\157\167\145\144\55\166\141\154\165\145\163", 
"\162\141\156\147\145", "\143\141\162\144\151\156\141\154\151\164\171", "\162\157\154\145", 
"\143\157\156\143\162\145\164\145", "\141\142\163\164\162\141\143\164", 
"\160\141\164\164\145\162\156\55\155\141\164\143\150", "\162\145\141\143\164\151\166\145", 
"\156\157\156\55\162\145\141\143\164\151\166\145", "\141\143\164\151\166\145", "\163\164\157\162\141\147\145", 
"\154\157\143\141\154", "\163\150\141\162\145\144", "\141\143\143\145\163\163", 
"\162\145\141\144\55\167\162\151\164\145", "\162\145\141\144\55\157\156\154\171", "\162\145\141\144", 
"\167\162\151\164\145", "\151\156\151\164\151\141\154\151\172\145\55\157\156\154\171", 
"\160\162\157\160\141\147\141\164\151\157\156", "\151\156\150\145\162\151\164", "\156\157\55\151\156\150\145\162\151\164", 
"\163\157\165\162\143\145", "\145\170\143\154\165\163\151\166\145", 
"\143\157\155\160\157\163\151\164\145", "\166\151\163\151\142\151\154\151\164\171", "\160\162\151\166\141\164\145", 
"\160\165\142\154\151\143", "\143\162\145\141\164\145\55\141\143\143\145\163\163\157\162", 
"\157\166\145\162\162\151\144\145\55\155\145\163\163\141\147\145", "\155\145\163\163\141\147\145\55\150\141\156\144\154\145\162", 
"\160\162\151\155\141\162\171", "\141\162\157\165\156\144", "\142\145\146\157\162\145", 
"\141\146\164\145\162", "\141\163\163\145\162\164", "\162\145\164\162\141\143\164", 
"\155\157\144\151\146\171", "\144\165\160\154\151\143\141\164\145", 
"\146\141\143\164\55\162\145\154\141\164\151\157\156", "\146\141\143\164\55\163\154\157\164\55\166\141\154\165\145", "\151\146", 
"\164\150\145\156", "\145\154\163\145", "\167\150\151\154\145", "\144\157", 
"\154\157\157\160\55\146\157\162\55\143\157\165\156\164", "\163\167\151\164\143\150", "\143\141\163\145", "\52", null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffff7c1L, 0xffffffffffffffffL, 0x1dfL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x20L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[94];
private final int[] jjstateSet = new int[188];
protected char curChar;
public COOLParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public COOLParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 94; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
