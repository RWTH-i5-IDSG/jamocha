/* Generated By:JJTree&JavaCC: Do not edit this line. SLParserTokenManager.java */
package org.jamocha.parser.sl;
import org.jamocha.adapter.sl.configurations.*;
import java.io.InputStream;
import java.io.StringReader;

public class SLParserTokenManager implements SLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fe8cfc0L) != 0L)
         {
            jjmatchedKind = 33;
            return 77;
         }
         if ((active0 & 0x11000L) != 0L)
         {
            jjmatchedKind = 33;
            return 20;
         }
         if ((active0 & 0x60162000L) != 0L)
            return 77;
         return -1;
      case 1:
         if ((active0 & 0x80400L) != 0L)
            return 77;
         if ((active0 & 0x1fe1dbc0L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
            return 77;
         }
         return -1;
      case 2:
         if ((active0 & 0x14e1d8c0L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
            return 77;
         }
         if ((active0 & 0xb000300L) != 0L)
            return 77;
         return -1;
      case 3:
         if ((active0 & 0x1421d880L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
            return 77;
         }
         if ((active0 & 0xc00040L) != 0L)
            return 77;
         return -1;
      case 4:
         if ((active0 & 0x1080L) != 0L)
            return 77;
         if ((active0 & 0x1421c800L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
            return 77;
         }
         return -1;
      case 5:
         if ((active0 & 0x4200800L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
            return 77;
         }
         if ((active0 & 0x1001c000L) != 0L)
            return 77;
         return -1;
      case 6:
         if ((active0 & 0x4200000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 6;
            return 77;
         }
         if ((active0 & 0x800L) != 0L)
            return 77;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 31);
      case 41:
         return jjStopAtPos(0, 32);
      case 59:
         return jjStartNfaWithStates_0(0, 30, 77);
      case 61:
         return jjStartNfaWithStates_0(0, 13, 77);
      case 66:
         return jjStartNfaWithStates_0(0, 17, 77);
      case 73:
         return jjStartNfaWithStates_0(0, 20, 77);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 85:
         return jjStartNfaWithStates_0(0, 18, 77);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x13000200L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x11000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x208080L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800800L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 124:
         return jjStartNfaWithStates_0(0, 29, 77);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 71:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 77);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc204000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000200L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xc08100L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 77);
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 77);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 77);
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 77);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 77);
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040L);
      case 121:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 77);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 77);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 77);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 77);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10001000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x210080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4004000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 77);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200800L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 118:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 77);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 77);
         break;
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 77);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 77);
         break;
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 77);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 77);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 77);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 77);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 77;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 20:
                  if ((0xfffffcfe00000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(24);
                  }
                  if ((0xfffffcfe00000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(21);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 77:
                  if ((0xfffffcfe00000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(24);
                  }
                  if ((0xfffffcfe00000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(23);
                  }
                  break;
               case 0:
                  if ((0x7800dcf600000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAddTwoStates(23, 24);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 11);
                  }
                  else if (curChar == 58)
                     jjAddStates(12, 13);
                  else if (curChar == 63)
                     jjAddStates(14, 15);
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(16, 21);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(44, 54);
                  else if (curChar == 34)
                     jjCheckNAddStates(22, 27);
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 1:
                  if ((0x7800dcf600000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xfffffcfe00000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(2);
                  break;
               case 3:
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(28, 30);
                  break;
               case 4:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 7:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 8:
                  if (curChar == 63)
                     jjAddStates(14, 15);
                  break;
               case 9:
                  if ((0x7800dcf600000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0xfffffcfe00000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(10);
                  break;
               case 11:
               case 13:
                  if (curChar == 34)
                     jjCheckNAddStates(31, 33);
                  break;
               case 12:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 15:
                  if (curChar == 34 && kind > 36)
                     kind = 36;
                  break;
               case 16:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x7800dcf600000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0xfffffcfe00000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0xfffffcfe00000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 27);
                  break;
               case 26:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 27:
                  if (curChar == 34)
                     jjCheckNAddStates(34, 36);
                  break;
               case 29:
                  if (curChar == 34 && kind > 33)
                     kind = 33;
                  break;
               case 30:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddStates(37, 39);
                  break;
               case 33:
                  if (curChar == 34 && kind > 44)
                     kind = 44;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 11);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar != 46)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(44, 39);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar != 46)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar == 46)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 73:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(44, 54);
                  break;
               case 74:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(16, 21);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 20:
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(24);
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(23);
                  break;
               case 77:
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(24);
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(23);
                  break;
               case 0:
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(23, 24);
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 1:
               case 2:
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  jjAddStates(28, 30);
                  break;
               case 6:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
               case 10:
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(10);
                  break;
               case 12:
                  jjAddStates(31, 33);
                  break;
               case 14:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 22:
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(24);
                  break;
               case 26:
                  jjAddStates(34, 36);
                  break;
               case 28:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  jjAddStates(37, 39);
                  break;
               case 32:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 62:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 72:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(23);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(24);
                  }
                  break;
               case 77:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(23);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(24);
                  }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 1:
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(28, 30);
                  break;
               case 9:
               case 10:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(10);
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(31, 33);
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(24);
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(34, 36);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(37, 39);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 77 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   35, 36, 37, 42, 43, 45, 46, 49, 50, 52, 53, 55, 1, 3, 9, 11, 
   35, 16, 43, 45, 75, 76, 26, 28, 29, 30, 32, 33, 4, 6, 7, 12, 
   14, 15, 26, 28, 29, 30, 32, 33, 36, 37, 42, 43, 20, 21, 40, 41, 
   47, 48, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\164\162\165\145", "\146\141\154\163\145", 
"\156\157\164", "\141\156\144", "\157\162", "\151\155\160\154\151\145\163", 
"\145\161\165\151\166", "\75", "\162\145\163\165\154\164", "\146\157\162\141\154\154", 
"\145\170\151\163\164\163", "\102", "\125", "\120\107", "\111", "\146\145\141\163\151\142\154\145", 
"\144\157\156\145", "\151\157\164\141", "\141\156\171", "\141\154\154", 
"\163\145\161\165\145\156\143\145", "\163\145\164", "\141\143\164\151\157\156", "\174", "\73", "\50", "\51", null, 
null, null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x33dfffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[77];
private final int[] jjstateSet = new int[154];
protected char curChar;
public SLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 77; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
