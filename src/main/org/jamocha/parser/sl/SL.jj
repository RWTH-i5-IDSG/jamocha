/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /opt/projects/jamocha/jamocha/src/main/org/jamocha/parser/sl/SL.jj */
/*@egen*//**
 * Copyright 2007 Karl-Heinz Krempels, Alexander Wilden
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://jamocha.sourceforge.net/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 **/

/**
 * Further information regarding the FIPA SL Content Language described 
 * in this file at http://fipa.org/specs/fipa00008/index.html
 **/


options {                                                              
    FORCE_LA_CHECK = true;
    JAVA_UNICODE_ESCAPE = true;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    ERROR_REPORTING = true;
    CACHE_TOKENS = true;
//  DEBUG_TOKEN_MANAGER=true;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 2;
    LOOKAHEAD=2;
	STATIC = false;
}

PARSER_BEGIN(SLParser)
package org.jamocha.parser.sl;

public class SLParser/*@bgen(jjtree)*/implements SLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSLParserState jjtree = new JJTSLParserState();

/*@egen*/
	public static void main(String args[]){
        try{
		System.out.println("Reading from standard input...");
        	SLParser parser = new SLParser(System.in);
        	SimpleNode content = parser.Content();
            content.dump("");
            System.out.println("Thank you.");
        }
        catch(ParseException e){
            System.out.println("parse(): an invalid expression!");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        catch (TokenMgrError e){
            System.out.println("a Token Manager error!");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(SLParser)


/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}


/* Content syntax follows */
SimpleNode Content() :
{/*@bgen(jjtree) Content */
  SLContent jjtn000 = new SLContent(this, JJTCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Content */
        try {
/*@egen*/
	"(" ( ContentExpression() )+ ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ContentExpression() :
{/*@bgen(jjtree) ContentExpression */
  SLContentExpression jjtn000 = new SLContentExpression(this, JJTCONTENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContentExpression */
        try {
/*@egen*/
	IdentifyingExpression()
 	|
  	ActionExpression()
 	|
  	Wff()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Wff()      :
{/*@bgen(jjtree) Wff */
  SLWff jjtn000 = new SLWff(this, JJTWFF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Wff */
        try {
/*@egen*/
	AtomicFormula()
	|
  	"(" "not"/*@bgen(jjtree) #Not( 1) */
                  {
                    SLNot jjtn001 = new SLNot(this, JJTNOT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  1);
                    }
                  }
/*@egen*/")"
 	|
  	"(" "and" Wff()/*@bgen(jjtree) #And( 2) */
                        {
                          SLAnd jjtn002 = new SLAnd(this, JJTAND);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            throw (RuntimeException)jjte002;
                          }
                          if (jjte002 instanceof ParseException) {
                            throw (ParseException)jjte002;
                          }
                          throw (Error)jjte002;
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
                        }
/*@egen*/ ")"
 	|
  	"(" "or" Wff()/*@bgen(jjtree) #Or( 2) */
                       {
                         SLOr jjtn003 = new SLOr(this, JJTOR);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                       }
                       try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                       } catch (Throwable jjte003) {
                         if (jjtc003) {
                           jjtree.clearNodeScope(jjtn003);
                           jjtc003 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte003 instanceof RuntimeException) {
                           throw (RuntimeException)jjte003;
                         }
                         if (jjte003 instanceof ParseException) {
                           throw (ParseException)jjte003;
                         }
                         throw (Error)jjte003;
                       } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003,  2);
                         }
                       }
/*@egen*/ ")"
 	|
  	"(" "implies" Wff()/*@bgen(jjtree) #Implies( 2) */
                            {
                              SLImplies jjtn004 = new SLImplies(this, JJTIMPLIES);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
                            }
                            try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                            } catch (Throwable jjte004) {
                              if (jjtc004) {
                                jjtree.clearNodeScope(jjtn004);
                                jjtc004 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte004 instanceof RuntimeException) {
                                throw (RuntimeException)jjte004;
                              }
                              if (jjte004 instanceof ParseException) {
                                throw (ParseException)jjte004;
                              }
                              throw (Error)jjte004;
                            } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004,  2);
                              }
                            }
/*@egen*/ ")"
 	|
  	"(" "equiv" Wff()/*@bgen(jjtree) #Equiv( 2) */
                          {
                            SLEquiv jjtn005 = new SLEquiv(this, JJTEQUIV);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
                          }
                          try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                          } catch (Throwable jjte005) {
                            if (jjtc005) {
                              jjtree.clearNodeScope(jjtn005);
                              jjtc005 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte005 instanceof RuntimeException) {
                              throw (RuntimeException)jjte005;
                            }
                            if (jjte005 instanceof ParseException) {
                              throw (ParseException)jjte005;
                            }
                            throw (Error)jjte005;
                          } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005,  2);
                            }
                          }
/*@egen*/ ")"
 	|
  	"(" "forall" Variable()/*@bgen(jjtree) #ForAll( 2) */
                                {
                                  SLForAll jjtn006 = new SLForAll(this, JJTFORALL);
                                  boolean jjtc006 = true;
                                  jjtree.openNodeScope(jjtn006);
                                }
                                try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                                } catch (Throwable jjte006) {
                                  if (jjtc006) {
                                    jjtree.clearNodeScope(jjtn006);
                                    jjtc006 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte006 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte006;
                                  }
                                  if (jjte006 instanceof ParseException) {
                                    throw (ParseException)jjte006;
                                  }
                                  throw (Error)jjte006;
                                } finally {
                                  if (jjtc006) {
                                    jjtree.closeNodeScope(jjtn006,  2);
                                  }
                                }
/*@egen*/ ")"
 	|
  	"(" "exists" Variable()/*@bgen(jjtree) #Exists( 2) */
                                {
                                  SLExists jjtn007 = new SLExists(this, JJTEXISTS);
                                  boolean jjtc007 = true;
                                  jjtree.openNodeScope(jjtn007);
                                }
                                try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                                } catch (Throwable jjte007) {
                                  if (jjtc007) {
                                    jjtree.clearNodeScope(jjtn007);
                                    jjtc007 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte007 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte007;
                                  }
                                  if (jjte007 instanceof ParseException) {
                                    throw (ParseException)jjte007;
                                  }
                                  throw (Error)jjte007;
                                } finally {
                                  if (jjtc007) {
                                    jjtree.closeNodeScope(jjtn007,  2);
                                  }
                                }
/*@egen*/ ")"
 	|
  	"(" "B" Agent()/*@bgen(jjtree) #B( 2) */
                        {
                          SLB jjtn008 = new SLB(this, JJTB);
                          boolean jjtc008 = true;
                          jjtree.openNodeScope(jjtn008);
                        }
                        try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                        } catch (Throwable jjte008) {
                          if (jjtc008) {
                            jjtree.clearNodeScope(jjtn008);
                            jjtc008 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte008 instanceof RuntimeException) {
                            throw (RuntimeException)jjte008;
                          }
                          if (jjte008 instanceof ParseException) {
                            throw (ParseException)jjte008;
                          }
                          throw (Error)jjte008;
                        } finally {
                          if (jjtc008) {
                            jjtree.closeNodeScope(jjtn008,  2);
                          }
                        }
/*@egen*/ ")"
 	|
  	"(" "U" Agent()/*@bgen(jjtree) #U( 2) */
                        {
                          SLU jjtn009 = new SLU(this, JJTU);
                          boolean jjtc009 = true;
                          jjtree.openNodeScope(jjtn009);
                        }
                        try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                        } catch (Throwable jjte009) {
                          if (jjtc009) {
                            jjtree.clearNodeScope(jjtn009);
                            jjtc009 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte009 instanceof RuntimeException) {
                            throw (RuntimeException)jjte009;
                          }
                          if (jjte009 instanceof ParseException) {
                            throw (ParseException)jjte009;
                          }
                          throw (Error)jjte009;
                        } finally {
                          if (jjtc009) {
                            jjtree.closeNodeScope(jjtn009,  2);
                          }
                        }
/*@egen*/ ")"
 	|
	"(" "PG" Agent()/*@bgen(jjtree) #PG( 2) */
                         {
                           SLPG jjtn010 = new SLPG(this, JJTPG);
                           boolean jjtc010 = true;
                           jjtree.openNodeScope(jjtn010);
                         }
                         try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                         } catch (Throwable jjte010) {
                           if (jjtc010) {
                             jjtree.clearNodeScope(jjtn010);
                             jjtc010 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte010 instanceof RuntimeException) {
                             throw (RuntimeException)jjte010;
                           }
                           if (jjte010 instanceof ParseException) {
                             throw (ParseException)jjte010;
                           }
                           throw (Error)jjte010;
                         } finally {
                           if (jjtc010) {
                             jjtree.closeNodeScope(jjtn010,  2);
                           }
                         }
/*@egen*/ ")"
 	|
	"(" "I" Agent()/*@bgen(jjtree) #I( 2) */
                        {
                          SLI jjtn011 = new SLI(this, JJTI);
                          boolean jjtc011 = true;
                          jjtree.openNodeScope(jjtn011);
                        }
                        try {
/*@egen*/ Wff()/*@bgen(jjtree)*/
                        } catch (Throwable jjte011) {
                          if (jjtc011) {
                            jjtree.clearNodeScope(jjtn011);
                            jjtc011 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte011 instanceof RuntimeException) {
                            throw (RuntimeException)jjte011;
                          }
                          if (jjte011 instanceof ParseException) {
                            throw (ParseException)jjte011;
                          }
                          throw (Error)jjte011;
                        } finally {
                          if (jjtc011) {
                            jjtree.closeNodeScope(jjtn011,  2);
                          }
                        }
/*@egen*/ ")"
 	|
  	ActionOp()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ActionOp() :
{/*@bgen(jjtree) ActionOp */
  SLActionOp jjtn000 = new SLActionOp(this, JJTACTIONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionOp */
        try {
/*@egen*/
  	"(" "feasible" ActionExpression()/*@bgen(jjtree) Feasible */
                                          {
                                            SLFeasible jjtn001 = new SLFeasible(this, JJTFEASIBLE);
                                            boolean jjtc001 = true;
                                            jjtree.openNodeScope(jjtn001);
                                          }
                                          try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc001) {
                                              jjtree.closeNodeScope(jjtn001, true);
                                            }
                                          }
/*@egen*/
 	|
  	"("/*@bgen(jjtree) Done */
            {
              SLDone jjtn002 = new SLDone(this, JJTDONE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ "done"/*@bgen(jjtree)*/
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
              }
            }
/*@egen*/ ActionExpression()  ")" 
	|
  	"(" "feasible" ActionExpression() Wff()/*@bgen(jjtree) Feasible */
                                                {
                                                  SLFeasible jjtn003 = new SLFeasible(this, JJTFEASIBLE);
                                                  boolean jjtc003 = true;
                                                  jjtree.openNodeScope(jjtn003);
                                                }
                                                try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc003) {
                                                    jjtree.closeNodeScope(jjtn003, true);
                                                  }
                                                }
/*@egen*/
 	|
  	"("/*@bgen(jjtree) Done */
            {
              SLDone jjtn004 = new SLDone(this, JJTDONE);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
            }
            try {
/*@egen*/ "done"/*@bgen(jjtree)*/
            } finally {
              if (jjtc004) {
                jjtree.closeNodeScope(jjtn004, true);
              }
            }
/*@egen*/ ActionExpression() Wff() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 

}

void AtomicFormula() :
{/*@bgen(jjtree) AtomicFormula */
  SLAtomicFormula jjtn000 = new SLAtomicFormula(this, JJTATOMICFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AtomicFormula */
        try {
/*@egen*/
  	PropositionSymbol()
 	|
  	BinaryTermOp()
	|
  	"(" PredicateSymbol() ( TermOrIE() )+ ")"
 	|/*@bgen(jjtree) True */
        {
          SLTrue jjtn001 = new SLTrue(this, JJTTRUE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	"true"/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/
 	|/*@bgen(jjtree) False */
        {
          SLFalse jjtn002 = new SLFalse(this, JJTFALSE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
  	"false"/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*//*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BinaryTermOp() :
{/*@bgen(jjtree) BinaryTermOp */
  SLBinaryTermOp jjtn000 = new SLBinaryTermOp(this, JJTBINARYTERMOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BinaryTermOp */
        try {
/*@egen*/
   	"(" "=" TermOrIE() TermOrIE()/*@bgen(jjtree) #Equal( 2) */
                                      {
                                        SLEqual jjtn001 = new SLEqual(this, JJTEQUAL);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  2);
                                        }
                                      }
/*@egen*/
 	| 
   	"(" "result" TermOrIE() TermOrIE()/*@bgen(jjtree) #Result( 2) */
                                           {
                                             SLResult jjtn002 = new SLResult(this, JJTRESULT);
                                             boolean jjtc002 = true;
                                             jjtree.openNodeScope(jjtn002);
                                           }
                                           try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc002) {
                                               jjtree.closeNodeScope(jjtn002,  2);
                                             }
                                           }
/*@egen*//*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void TermOrIE() :
{/*@bgen(jjtree) TermOrIE */
  SLTermOrIE jjtn000 = new SLTermOrIE(this, JJTTERMORIE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TermOrIE */
        try {
/*@egen*/
	Term()
	|
	IdentifyingExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Term()       :
{/*@bgen(jjtree) Term */
  SLTerm jjtn000 = new SLTerm(this, JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
        try {
/*@egen*/
	Variable()
 	|
  	FunctionalTerm()
 	|
  	ActionExpression()
 	|
  	Constant()
 	|
  	Sequence()
 	|
  	Set()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void IdentifyingExpression()                        :
{/*@bgen(jjtree) IdentifyingExpression */
  SLIdentifyingExpression jjtn000 = new SLIdentifyingExpression(this, JJTIDENTIFYINGEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdentifyingExpression */
        try {
/*@egen*/
	"(" "iota" TermOrIE() Wff()/*@bgen(jjtree) #Iota( 2) */
                                    {
                                      SLIota jjtn001 = new SLIota(this, JJTIOTA);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/
 	|
  	"(" "any" TermOrIE() Wff()/*@bgen(jjtree) #Any( 2) */
                                   {
                                     SLAny jjtn002 = new SLAny(this, JJTANY);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                   }
                                   try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002,  2);
                                     }
                                   }
/*@egen*/
 	|
  	"(" "all" TermOrIE() Wff()/*@bgen(jjtree) #All( 2) */
                                   {
                                     SLAll jjtn003 = new SLAll(this, JJTALL);
                                     boolean jjtc003 = true;
                                     jjtree.openNodeScope(jjtn003);
                                   }
                                   try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc003) {
                                       jjtree.closeNodeScope(jjtn003,  2);
                                     }
                                   }
/*@egen*//*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void FunctionalTerm() :
{/*@bgen(jjtree) FunctionalTerm */
  SLFunctionalTerm jjtn000 = new SLFunctionalTerm(this, JJTFUNCTIONALTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionalTerm */
        try {
/*@egen*/
	"(" FunctionSymbol() ( TermOrIE() )*/*@bgen(jjtree) #FunctionalTerm(> 1) */
                                             {
                                               SLFunctionalTerm jjtn001 = new SLFunctionalTerm(this, JJTFUNCTIONALTERM);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                             }
                                             try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                               }
                                             }
/*@egen*/
	|
 	"(" FunctionSymbol() ( Parameter() )*/*@bgen(jjtree) #FunctionalTerm(> 1) */
                                              {
                                                SLFunctionalTerm jjtn002 = new SLFunctionalTerm(this, JJTFUNCTIONALTERM);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
                                              }
                                              try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                                                }
                                              }
/*@egen*//*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Constant() :
{/*@bgen(jjtree) Constant */
  SLConstant jjtn000 = new SLConstant(this, JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Constant */
  try {
/*@egen*/
  NumericalConstant()
  |
  String()
  |
  DateTime()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void NumericalConstant()                    :
{/*@bgen(jjtree) NumericalConstant */
  SLNumericalConstant jjtn000 = new SLNumericalConstant(this, JJTNUMERICALCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NumericalConstant */
    try {
/*@egen*/
    Integer()
    |
    Float()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Variable() :
{/*@bgen(jjtree) Variable */
    SLVariable jjtn000 = new SLVariable(this, JJTVARIABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Variable */
        try {
/*@egen*/
	t = <VARIABLE_IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setText(t.image);
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ActionExpression() :
{/*@bgen(jjtree) ActionExpression */
  SLActionExpression jjtn000 = new SLActionExpression(this, JJTACTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionExpression */
        try {
/*@egen*/
  	"(" "action" Agent() TermOrIE()/*@bgen(jjtree) #Action( 2) */
                                        {
                                          SLAction jjtn001 = new SLAction(this, JJTACTION);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
                                        }
/*@egen*/
 	|
  	"(" "|" ActionExpression() ActionExpression() ")"
 	|
  	"(" ";" ActionExpression() ActionExpression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void PropositionSymbol() :
{/*@bgen(jjtree) PropositionSymbol */
        SLPropositionSymbol jjtn000 = new SLPropositionSymbol(this, JJTPROPOSITIONSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) PropositionSymbol */
        try {
/*@egen*/
	t = <STRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setText(t.image);
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredicateSymbol() :
{/*@bgen(jjtree) PredicateSymbol */
    SLPredicateSymbol jjtn000 = new SLPredicateSymbol(this, JJTPREDICATESYMBOL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) PredicateSymbol */
    try {
/*@egen*/
    t = <STRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setText(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void FunctionSymbol() :
{/*@bgen(jjtree) FunctionSymbol */
        SLFunctionSymbol jjtn000 = new SLFunctionSymbol(this, JJTFUNCTIONSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) FunctionSymbol */
    try {
/*@egen*/
    t = <STRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setText(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Agent() :
{/*@bgen(jjtree) Agent */
  SLAgent jjtn000 = new SLAgent(this, JJTAGENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Agent */
        try {
/*@egen*/
	TermOrIE()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Sequence()           : 
{/*@bgen(jjtree) Sequence */
  SLSequence jjtn000 = new SLSequence(this, JJTSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sequence */
  try {
/*@egen*/
  "(" "sequence" ( TermOrIE() )* ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Set()      :
{/*@bgen(jjtree) Set */
  SLSet jjtn000 = new SLSet(this, JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Set */
  try {
/*@egen*/
  "(" "set" ( TermOrIE() )* ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Parameter() :
{/*@bgen(jjtree) Parameter */
  SLParameter jjtn000 = new SLParameter(this, JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parameter */
    try {
/*@egen*/
    ParameterName() ParameterValue()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void ParameterValue() :
{/*@bgen(jjtree) ParameterValue */
  SLParameterValue jjtn000 = new SLParameterValue(this, JJTPARAMETERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParameterValue */
    try {
/*@egen*/
    TermOrIE()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void ParameterName() :
{/*@bgen(jjtree) ParameterName */
        SLParameterName jjtn000 = new SLParameterName(this, JJTPARAMETERNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ParameterName */
    try {
/*@egen*/
    t = <PARAMETER_NAME>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setText(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void String():
{/*@bgen(jjtree) String */
        SLString jjtn000 = new SLString(this, JJTSTRING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	t = <STRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setText(t.image);
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Integer()          :
{/*@bgen(jjtree) Integer */
        SLInteger jjtn000 = new SLInteger(this, JJTINTEGER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	t = <INTEGER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setText(t.image);
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Float()        :
{/*@bgen(jjtree) Float */
    SLFloat jjtn000 = new SLFloat(this, JJTFLOAT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Float */
    try {
/*@egen*/
    t = <FLOAT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setText(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void DateTime()           :
{/*@bgen(jjtree) DateTime */
        SLDateTime jjtn000 = new SLDateTime(this, JJTDATETIME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) DateTime */
    try {
/*@egen*/
    t = <DATETIME>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setText(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



/* IDENTIFIERS */
TOKEN :
{
	< STRING: <WORD> | <STRING_LITERAL> >
	|
	< WORD: (~["\u0000"-" ","(",")","#","0"-"9",":","-","?"]) (~["\u0000"-" ","(",")"])* >
	|
	< PARAMETER_NAME: ":" <STRING> >
	|
	< VARIABLE_IDENTIFIER: "?" <STRING> >
	|
 	< #SIGN: ["+", "-"]>
	|
	< INTEGER: ( <SIGN> )?  ( <DIGIT> )+ | ( <SIGN> )?  "0" ["x", "X"] ( <HEXDIGIT> )+ >
	|
	< FLOAT: ( <SIGN> )? <FLOATMANTISSA> ( <FLOATEXPONENT> )? |  ( <SIGN> )? ( <DIGIT> )+ ( <FLOATEXPONENT> ) >
	|
 	< FLOATMANTISSA: ( <DIGIT> )+ "." ( <DIGIT> )* | ( <DIGIT> )* "." ( <DIGIT> )+ >
	|
 	< FLOATEXPONENT: ["e", "E"] ( <SIGN> )? ( <DIGIT> )+ >
	|
	< #DIGIT: ["0"-"9"] >
	|
	< #HEXDIGIT: ["0"-"9", "A"-"F", "a"-"f"]>
	|
	< STRING_LITERAL: "\"" ( (~["\""]) | "\\\"" )* "\"" >
	|
	< DATETIME :	( <SIGN> )? (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])
              		(["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) ["t","T"]
              		(["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])
              		(["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["a"-"z","A"-"Z"])? >
}
