/* Generated By:JJTree&JavaCC: Do not edit this line. COOLTokenManager.java */
/** Parser for CLIPS Object Oriented Language.<br>
 * Note: A main mehtod to test the parser on the prompt is implemented outside the parser in class "Main".
 *@author Ory Chowaw-Liebman
 *@author Ulrich Loup
 */
import java.util.Hashtable;

public class COOLTokenManager implements COOLConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 52;
         }
         if ((active0 & 0x1020000000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 47;
         }
         if ((active0 & 0x3000002000000000L) != 0L)
            return 89;
         if ((active1 & 0x208L) != 0L)
         {
            jjmatchedKind = 116;
            return 67;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 29;
         }
         if ((active0 & 0x807af1dc7fe00800L) != 0L || (active1 & 0xffffffffffdf7L) != 0L)
         {
            jjmatchedKind = 116;
            return 89;
         }
         if ((active0 & 0x4080000380000000L) != 0L)
            return 27;
         return -1;
      case 1:
         if ((active0 & 0x100000000000000L) != 0L)
            return 30;
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 66;
         }
         if ((active0 & 0x4000000380000000L) != 0L)
            return 28;
         if ((active0 & 0x803fb3dc7fe00000L) != 0L || (active1 & 0xffffffffffdffL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 89;
         }
         if ((active0 & 0x40402000000800L) != 0L)
            return 89;
         return -1;
      case 2:
         if ((active0 & 0x4000000380000000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
            return -1;
         }
         if ((active0 & 0x803f83dc7fe00000L) != 0L || (active1 & 0xfffffffffffffL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 2;
            return 89;
         }
         if ((active0 & 0x300000000000L) != 0L)
            return 89;
         return -1;
      case 3:
         if ((active0 & 0x4000000380000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x31020400000000L) != 0L || (active1 & 0x380200000L) != 0L)
            return 89;
         if ((active0 & 0x800e81d87fe00000L) != 0L || (active1 & 0xffffc7fdfffffL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 3;
            }
            return 89;
         }
         return -1;
      case 4:
         if ((active0 & 0x4000000380000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x8000410080008L) != 0L)
            return 89;
         if ((active0 & 0x800e81d87fe00000L) != 0L || (active1 & 0x7fff9efd7fff7L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 4;
            return 89;
         }
         return -1;
      case 5:
         if ((active0 & 0x81d87fe00000L) != 0L || (active1 & 0x1ef798fd7ffe4L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 5;
            return 89;
         }
         if ((active0 & 0x4000000180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800e000000000000L) != 0L || (active1 & 0x6108060000013L) != 0L)
            return 89;
         return -1;
      case 6:
         if ((active0 & 0x4000000180000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x804060800000L) != 0L || (active1 & 0x1082008000004L) != 0L)
            return 89;
         if ((active0 & 0x1981f600000L) != 0L || (active1 & 0xe75987d7ffe0L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 6;
            }
            return 89;
         }
         return -1;
      case 7:
         if ((active0 & 0x4000000080000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x11857400000L) != 0L || (active1 & 0xe7598517ff00L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 7;
            }
            return 89;
         }
         if ((active0 & 0x8008200000L) != 0L || (active1 & 0x2c000e0L) != 0L)
            return 89;
         return -1;
      case 8:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x10843400000L) != 0L || (active1 & 0xe4588517ff60L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 8;
            return 89;
         }
         if ((active0 & 0x1014000000L) != 0L || (active1 & 0x30100000000L) != 0L)
            return 89;
         return -1;
      case 9:
         if ((active0 & 0x10002000000L) != 0L || (active1 & 0x44080000000L) != 0L)
            return 89;
         if ((active0 & 0x841400000L) != 0L || (active1 & 0xe0180517ff60L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 9;
            return 89;
         }
         return -1;
      case 10:
         if ((active0 & 0x40000000L) != 0L || (active1 & 0xe0080507ff60L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 10;
            return 89;
         }
         if ((active0 & 0x801400000L) != 0L || (active1 & 0x1000100000L) != 0L)
            return 89;
         return -1;
      case 11:
         if ((active1 & 0x4000200L) != 0L)
            return 89;
         if ((active0 & 0x40000000L) != 0L || (active1 & 0xe0080107fd60L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 11;
            return 89;
         }
         return -1;
      case 12:
         if ((active1 & 0x1000020L) != 0L)
            return 89;
         if ((active0 & 0x40000000L) != 0L || (active1 & 0xe0080007fd40L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 12;
            return 89;
         }
         return -1;
      case 13:
         if ((active0 & 0x40000000L) != 0L || (active1 & 0xe0080003bd40L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 13;
            return 89;
         }
         if ((active1 & 0x44000L) != 0L)
            return 89;
         return -1;
      case 14:
         if ((active1 & 0x400000012140L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 14;
            return 89;
         }
         if ((active0 & 0x40000000L) != 0L || (active1 & 0xa00800029c00L) != 0L)
            return 89;
         return -1;
      case 15:
         if ((active1 & 0x400000002140L) != 0L)
            return 89;
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 15;
            return 89;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 38:
         return jjStopAtPos(0, 58);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 58:
         return jjStartNfaWithStates_0(0, 60, 89);
      case 59:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 63:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x4000000380000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x208L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe4L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x210000000000L, 0xa00004087fc00L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x220000500000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x407fe00000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x10000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x2800000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20100000000000L, 0x4004000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8400000000000L, 0x400000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1181001000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x382280000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8c00000000L, 0x8028000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1020000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 124:
         return jjStopAtPos(0, 59);
      case 126:
         return jjStopAtPos(0, 57);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 89);
         break;
      case 59:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 89);
         break;
      case 62:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 89);
         break;
      case 63:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 30);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0xe4L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20008000000000L, active1, 0x1180000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100407fe00000L, active1, 0x4800382000000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x40000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x7fc00L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x2800000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4900000000000L, active1, 0x2c014600000L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 89);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3281400000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x11000000000L, active1, 0x100000000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x10000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x4000000000L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x10L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x104L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3a2000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x10050000000L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 89);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x600000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x7fe00000L, active1, 0x4000000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x1080c00000000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000000000L, active1, 0x27fc00L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0x4480000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x2001008000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x840000800000L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 89);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x8000001000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x10L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x106L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000100000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2e0L);
      case 97:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000060000000L, active1, 0x200010000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0x2400000L);
      case 100:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x180100000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 89);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 89);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x8002040000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x812000000L, active1, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x808000000000L, active1, 0x44000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x110000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x400000007fc00L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x21000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x408028000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x800000000000L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 89);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000400000L, active1, 0xc01800000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x180000200L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0xe0L);
      case 69:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000100000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 84:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 89);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000200000L, active1, 0x1881008000000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8800000000000L, active1, 0x8000000000L);
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 89);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 89);
         return jjMoveStringLiteralDfa5_0(active0, 0x8006400000L, active1, 0x21000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0x100800100000L);
      case 108:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 89);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000818000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2004000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L);
      case 114:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 89);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4402004c00000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x200002000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x61800000L, active1, 0x10000000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x7fc00L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x200L);
      case 69:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 89);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 71:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 89);
         break;
      case 76:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 89);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1e0L);
      case 82:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 89);
         break;
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800008000000L, active1, 0x800800000L);
      case 99:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 89);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);
      case 100:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 89);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 89);
         break;
      case 101:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 89);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 89);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0x20000447fc00L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x801008000000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x442002000000L);
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 89);
         return jjMoveStringLiteralDfa6_0(active0, 0x60800000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x8003000000L, active1, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x1000001000000L);
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 89);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 89);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x30000000000L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 89);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x80000000000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x200000000000L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xe0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 69:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 32);
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 82:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 89);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1004100000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8001000000L, active1, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000007fc00L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 89);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 89);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 89);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 89);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0x804000000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x30000000000L);
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 89);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x40800000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x101000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 101, 89);
         return jjMoveStringLiteralDfa7_0(active0, 0x40200000L, active1, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 112, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0x80000107fc00L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L);
      case 69:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x60L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0x100L);
      case 84:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(7, 31);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0x200000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0x4000000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 89);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 89);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 89);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40880000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0x100100000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1004000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0x4000000000L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 89);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 89);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 89);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0x21000000000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000160L);
      case 69:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(8, 62);
         break;
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000020000L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 89);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0L);
      case 101:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 89);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 89);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000L, active1, 0x5000112000L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 89);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0x1000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xc00L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 89);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40084000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L);
      case 121:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 96, 89);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x140L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800001040000L);
      case 99:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 89);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L);
      case 101:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 95, 89);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800001000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x24000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x12000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x801000000L, active1, 0x1000000000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 89);
         break;
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 102, 89);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0x100800L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000L);
      case 121:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 106, 89);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x140L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 22, 89);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x600000000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8400L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 89);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 100, 89);
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0x800000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 35, 89);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1002000L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000L);
      case 120:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L);
      case 121:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 84, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x140L);
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20L);
      case 83:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(11, 73, 89);
         break;
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L, active1, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8400L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000000L);
      case 101:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 90, 89);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x3000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x600000020000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(12, 69, 89);
         break;
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x140L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x48000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L);
      case 104:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(12, 88, 89);
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active1, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000800L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x600000020000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x140L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800000023000L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800000400L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(13, 78, 89);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 82, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x140L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(14, 30, 89);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400000000000L);
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 109, 89);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 111, 89);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2000L);
      case 115:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(14, 74, 89);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(14, 75, 89);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(14, 76, 89);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(14, 79, 89);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(14, 81, 89);
         break;
      case 121:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(14, 99, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 83:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(15, 70, 89);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(15, 72, 89);
         break;
      case 101:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 110, 89);
         return jjMoveStringLiteralDfa16_0(active1, 0x10000L);
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(15, 77, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 115:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(16, 80, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 89;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 66:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 67:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 29:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 30;
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 47:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 89:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 30:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  break;
               case 27:
                  if (curChar == 42)
                     jjAddStates(6, 8);
                  break;
               case 0:
                  if ((0x77fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 33;
                  if ((0x77fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 27;
                  if ((0x7400fc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(15, 19);
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 52:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(4);
                  break;
               case 5:
               case 8:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 6:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 9:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 10:
               case 13:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 11);
                  break;
               case 11:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 14:
                  if (curChar == 39 && kind > 15)
                     kind = 15;
                  break;
               case 16:
                  if ((0x7400fc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 18:
                  if ((0x77fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 19:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 20:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 21:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 22:
                  if ((0x77fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 23:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 24:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 17);
                  break;
               case 26:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if ((0xe7fffc3affffd9ffL & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 31:
                  if ((0xe7fffc3affffd9ffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 32:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 34:
                  if ((0x7400fc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if (curChar == 42 && kind > 20)
                     kind = 20;
                  break;
               case 36:
                  if ((0x77fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 37:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 38:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 39:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 40:
                  if ((0x77fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 41:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 42:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if ((0x77fffc2affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 35);
                  break;
               case 44:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 54:
                  if ((0x7400fc2affffd9ffL & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 55:
                  if ((0x77fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(3, 5);
                  break;
               case 56:
                  if ((0x7400fc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(3, 5);
                  break;
               case 57:
                  if ((0xe7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if ((0x77fffc2affffd9ffL & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 59:
                  if ((0x77fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if ((0x7400fc3affffd9ffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 61:
                  if ((0xe7fffc3affffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if ((0x77fffc2affffd9ffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(62);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(15, 19);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(78);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar != 46)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(84);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(85, 86);
                  break;
               case 87:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(88);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 66:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 29:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  break;
               case 47:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 89:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  break;
               case 30:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 0:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((0xaffffffff7ffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 91)
                     jjAddStates(40, 42);
                  if (curChar == 84)
                     jjAddStates(43, 44);
                  else if (curChar == 70)
                     jjAddStates(45, 46);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 52:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((0xafffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  if ((0xafffffffdfffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 6:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 92)
                     jjCheckNAddStates(12, 14);
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 92)
                     jjCheckNAddStates(9, 11);
                  break;
               case 15:
                  if (curChar == 91)
                     jjAddStates(40, 42);
                  break;
               case 16:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if (curChar == 93 && kind > 16)
                     kind = 16;
                  break;
               case 18:
                  if ((0xaffffffff7ffffffL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 19:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 20:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 21:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 22:
               case 23:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 24:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 17);
                  break;
               case 28:
                  if ((0xafffffffffffffffL & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 31:
                  if ((0xafffffffffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 34:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0xaffffffff7ffffffL & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 37:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 38:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 39:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 40:
               case 41:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 42:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if ((0xafffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 35);
                  break;
               case 45:
                  if (curChar == 101 && kind > 42)
                     kind = 42;
                  break;
               case 46:
               case 75:
                  if (curChar == 117)
                     jjCheckNAdd(45);
                  break;
               case 48:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 101 && kind > 43)
                     kind = 43;
                  break;
               case 50:
               case 68:
                  if (curChar == 115)
                     jjCheckNAdd(49);
                  break;
               case 51:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 53:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0xafffffffffffffffL & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 55:
                  if ((0xaffffffff7ffffffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(3, 5);
                  break;
               case 56:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(3, 5);
                  break;
               case 57:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if ((0xafffffffdfffffffL & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 59:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 61:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if ((0xafffffffdfffffffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(62);
                  break;
               case 63:
                  if (curChar == 70)
                     jjAddStates(45, 46);
                  break;
               case 64:
                  if (curChar == 69 && kind > 43)
                     kind = 43;
                  break;
               case 65:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 69:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 84)
                     jjAddStates(43, 44);
                  break;
               case 72:
                  if (curChar == 69 && kind > 42)
                     kind = 42;
                  break;
               case 73:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 86:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 66:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  break;
               case 67:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  break;
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  break;
               case 89:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddStates(3, 5);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(57, 58);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(62);
                  }
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 16:
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 18:
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 22:
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(25, 17);
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 34:
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 36:
               case 37:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 40:
               case 41:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(43, 35);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(3, 5);
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(3, 5);
                  break;
               case 57:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 59:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(62);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 89 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 7;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  kind = 7;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   60, 61, 62, 56, 57, 58, 34, 36, 40, 11, 12, 14, 6, 7, 9, 78, 
   79, 80, 85, 86, 19, 20, 21, 17, 20, 21, 17, 23, 24, 25, 37, 38, 
   39, 35, 38, 39, 35, 41, 42, 43, 16, 18, 22, 74, 76, 67, 70, 3, 
   4, 83, 84, 87, 88, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\50", "\51", "\76\75", 
null, null, null, null, null, null, null, null, null, 
"\144\145\146\146\141\143\164\163", "\144\145\146\164\145\155\160\154\141\164\145", 
"\144\145\146\162\165\154\145", "\144\145\146\146\165\156\143\164\151\157\156", 
"\144\145\146\147\145\156\145\162\151\143", "\144\145\146\155\145\164\150\157\144", "\144\145\146\143\154\141\163\163", 
"\144\145\146\147\154\157\142\141\154", "\144\145\146\141\165\154\164", 
"\144\145\146\141\165\154\164\55\144\171\156\141\155\151\143", "\77\104\105\106\101\125\114\124", "\77\104\105\122\111\126\105", 
"\77\116\117\116\105", "\163\154\157\164", "\163\151\156\147\154\145\55\163\154\157\164", 
"\155\165\154\164\151\163\154\157\164", "\75\76", "\144\145\143\154\141\162\145", "\163\141\154\151\145\156\143\145", 
"\141\165\164\157\55\146\157\143\165\163", "\164\171\160\145", null, null, "\156\157\164", "\141\156\144", "\157\162", 
"\154\157\147\151\143\141\154", "\164\145\163\164", "\145\170\151\163\164\163", "\146\157\162\141\154\154", 
"\157\142\152\145\143\164", "\151\163\55\141", "\156\141\155\145", "\74\55", "\77", "\44\77", "\176", 
"\46", "\174", "\72", "\75", "\77\126\101\122\111\101\102\114\105", 
"\123\131\115\102\117\114", "\123\124\122\111\116\107", "\114\105\130\105\115\105", 
"\111\116\124\105\107\105\122", "\106\114\117\101\124", "\116\125\115\102\105\122", 
"\111\116\123\124\101\116\103\105\55\116\101\115\105", "\111\116\123\124\101\116\103\105\55\101\104\104\122\105\123\123", 
"\111\116\123\124\101\116\103\105", "\105\130\124\105\122\116\101\114\55\101\104\104\122\105\123\123", 
"\106\101\103\124\55\101\104\104\122\105\123\123", "\141\154\154\157\167\145\144\55\163\171\155\142\157\154\163", 
"\141\154\154\157\167\145\144\55\163\164\162\151\156\147\163", "\141\154\154\157\167\145\144\55\154\145\170\145\155\145\163", 
"\141\154\154\157\167\145\144\55\151\156\164\145\147\145\162\163", "\141\154\154\157\167\145\144\55\146\154\157\141\164\163", 
"\141\154\154\157\167\145\144\55\156\165\155\142\145\162\163", "\141\154\154\157\167\145\144\55\151\156\163\164\141\156\143\145\163", 
"\141\154\154\157\167\145\144\55\143\154\141\163\163\145\163", "\141\154\154\157\167\145\144\55\166\141\154\165\145\163", 
"\162\141\156\147\145", "\143\141\162\144\151\156\141\154\151\164\171", "\162\157\154\145", 
"\143\157\156\143\162\145\164\145", "\141\142\163\164\162\141\143\164", 
"\160\141\164\164\145\162\156\55\155\141\164\143\150", "\162\145\141\143\164\151\166\145", 
"\156\157\156\55\162\145\141\143\164\151\166\145", "\163\164\157\162\141\147\145", "\154\157\143\141\154", 
"\163\150\141\162\145\144", "\141\143\143\145\163\163", "\162\145\141\144\55\167\162\151\164\145", 
"\162\145\141\144\55\157\156\154\171", "\162\145\141\144", "\167\162\151\164\145", 
"\151\156\151\164\151\141\154\151\172\145\55\157\156\154\171", "\160\162\157\160\141\147\141\164\151\157\156", 
"\151\156\150\145\162\151\164", "\156\157\55\151\156\150\145\162\151\164", "\163\157\165\162\143\145", 
"\145\170\143\154\165\163\151\166\145", "\143\157\155\160\157\163\151\164\145", 
"\166\151\163\151\142\151\154\151\164\171", "\160\162\151\166\141\164\145", "\160\165\142\154\151\143", 
"\143\162\145\141\164\145\55\141\143\143\145\163\163\157\162", "\157\166\145\162\162\151\144\145\55\155\145\163\163\141\147\145", 
"\155\145\163\163\141\147\145\55\150\141\156\144\154\145\162", "\160\162\151\155\141\162\171", "\141\162\157\165\156\144", 
"\142\145\146\157\162\145", "\141\146\164\145\162", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffdbe01L, 0x1fffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x13eL, 0x0L, 
};
static final long[] jjtoMore = {
   0xc0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[89];
private final int[] jjstateSet = new int[178];
protected char curChar;
public COOLTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public COOLTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 89; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 6)
         {
            jjmatchedKind = 6;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

}
