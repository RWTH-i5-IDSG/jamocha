/* Generated By:JJTree: Do not edit this line. Node.java */

/** All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. 
   @author: jjTree
   @author: Ory Chowaw-Liebman*/

import java.lang.String;
import org.jamocha.parser.*;

/** The minimal interface any Abstract syntax tree node must implement.
	 Class SimpleNode provides implementations for most of these functions, 
	 see there for information on Syntax Trees
*/

public interface Node 
{

	/** This method is called after the node has been made the current
		node.  It indicates that child nodes can now be added to it. */
	public void jjtOpen();

	/** This method is called after all the child nodes have been
		added. */
	public void jjtClose();

	/** This pair of methods are used to inform the node of its
		parent. */
	public void jjtSetParent(Node n);
	public Node jjtGetParent();

	/** This method tells the node to add its argument to the node's
		list of children.  */
	public void jjtAddChild(Node n, int i);

	/** This method returns a child node.  The children are numbered
		from zero, left to right. */
	public Node jjtGetChild(int i);

  /** Return the number of children the node has. */
	public int jjtGetNumChildren();

	public void dump(String prefix);
	public boolean compareTree(Node n);
	public JamochaValue execute() throws EvaluationException;
	/** Bind the local varibles to function/method/etc parametres */
	public void bindLocals(DeffunctionParams locals[]);
	public String getName();
	public void setName(String n);
	public int getId();
}
