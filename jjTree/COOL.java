/* Generated By:JJTree&JavaCC: Do not edit this line. COOL.java */
/** Parser for CLIPS Object Oriented Language.<br>
 * Note: A main mehtod to test the parser on the prompt is implemented outside the parser in class "Main".
 *@author Ory Chowaw-Liebman
 *@author Ulrich Loup
 */
import java.util.Hashtable;

public class COOL/*@bgen(jjtree)*/implements COOLTreeConstants, COOLConstants {/*@bgen(jjtree)*/
  protected JJTCOOLState jjtree = new JJTCOOLState();/** Hashtable of global variables defined, by name
	 */
        protected Hashtable<String, CLIPSData> globals = new Hashtable<String, CLIPSData>();

        /** Hashtable of functions defined, by name
	 */
        protected Hashtable<String, CLIPSFunction> funcs = new Hashtable<String, CLIPSFunction>();

        /** Fill the hashtables and initialize the function objects.
	 */
        public void initFunctions()
        {
                funcs.put("exit", new CLIPSFuncExit());
                funcs.put("+", new CLIPSFuncPlus());
                funcs.put("*", new CLIPSFuncMul());
                funcs.put("-", new CLIPSFuncSub());
                funcs.put("/", new CLIPSFuncDiv());
                //System.out.println(funcs.toString());
        }

        /** Get the Value of a gobal Variable
	 *@param name name of the variable
	 *@return value of the variable
	 */
        public CLIPSData getGlobalVar(String name)
        { return globals.get(name); }

        /** Get a Function for calling from AST
	 *@param name name of the function (i.e. "exit", "+", "*", "-", "/")
	 *@return reference to the specified CLIPSFunction object
	 */
        public CLIPSFunction getFunction(String name)
        { return funcs.get(name); }

/* TODO (From Clips Manual):
Data Types:
<file-name> ::= A symbol or string which is a valid file name (including path information)
	for the operating system under which CLIPS is running
<slot-name> ::= A valid deftemplate_construct slot name
<...-name> ::= A <symbol> where the ellipsis indicate what the symbol represents.
	For example, <rule-name> is a symbol which represents the name of a rule.
*/

/**********************************************
 * Clips Grammar Specs.
 * Main grammar, contains Input function
 */

/* TODO (From Clips Manual):
Variables and Expressions
<...-expression> ::= An <expression> which returns the type indicated by the
	ellipsis. For example, <integer-expression> should return an integer.
*/

/* Constructs

Defmessage-handler Construct
<defmessage-handler-construct> 
	::= (defmessage-handler <class-name> <message-name> [<handler-type>] 
		[<comment>] (<parameter>* [<wildcard-parameter>]) <action>*)
<handler-type> ::= around | before | primary | after
<parameter> ::= <single-field-variable>
<wildcard-parameter> ::= <multifield-variable>

Definstances Construct
<definstances-construct> ::= (definstances <definstances-name> [active] [<comment>] <instance-template>*)
<instance-template> ::= (<instance-definition>)
<instance-definition> ::= <instance-name-expression> of <class-name-expression> <slot-override>*
<slot-override> ::= (<slot-name-expression> <expression>*)

Defmodule Construct
<defmodule-construct> ::= (defmodule <module-name> [<comment>] <port-specification>*)
<port-specification> ::= (export <port-item>) | (import <module-name> <port-item>)
<port-item> ::= ?ALL | ?NONE | <port-construct> ?ALL | 
	<port-construct> ?NONE | <port-construct> <construct-name>+
<port-construct> ::= deftemplate_construct | defclass | defglobal | deffunction | defgeneric
*/

/** Start rule is one construct at a time, Parser reads constructs into list.
	No need to create nodes for Start, Defcon and Funcon rule.*/
  final public COOLStart Start() throws ParseException {
                     /*@bgen(jjtree) Start */
  COOLStart jjtn000 = new COOLStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        Construct();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case INTEGER:
        case FLOAT:
        case STRING:
        case INSTANCE:
        case SINGLEVAR:
        case MULTIVAR:
        case GLOBALVAR:
        case SYMBOL:
          Expression();
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/*
<number> ::= <float> | <integer> 
<lexeme> ::= <symbol> | <string>
<constant> ::= <symbol> | <string> | <integer> | <float> | <instance-name>
*/
  final public void Float() throws ParseException {
                /*@bgen(jjtree) Float */
                 COOLFloat jjtn000 = new COOLFloat(this, JJTFLOAT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOAT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Integer() throws ParseException {
                  /*@bgen(jjtree) Integer */
                   COOLInteger jjtn000 = new COOLInteger(this, JJTINTEGER);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Number() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      Float();
      break;
    case INTEGER:
      Integer();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Symbol() throws ParseException {
                 /*@bgen(jjtree) Symbol */
                  COOLSymbol jjtn000 = new COOLSymbol(this, JJTSYMBOL);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void String() throws ParseException {
                 /*@bgen(jjtree) String */
                  COOLString jjtn000 = new COOLString(this, JJTSTRING);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Lexeme() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      String();
      break;
    case SYMBOL:
      Symbol();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Instance() throws ParseException {
                   /*@bgen(jjtree) Instance */
                    COOLInstance jjtn000 = new COOLInstance(this, JJTINSTANCE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INSTANCE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Constant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYMBOL:
      Symbol();
      break;
    case STRING:
      String();
      break;
    case INTEGER:
      Integer();
      break;
    case FLOAT:
      Float();
      break;
    case INSTANCE:
      Instance();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Comment() throws ParseException {
    String();
  }

/*
<function-name> ::= Any symbol which corresponds to a system or user defined function, a
	deffunction name, or a defgeneric name
	( Ory: I understand this to be a <SYMBOL> token )
<file-name> ::= A symbol or string which is a valid file name (including path information)
	for the operating system under which CLIPS is running

<variable> ::= <single-field-variable> | <multifield-variable> | <global-variable>
<function-call> ::= (<function-name> <expression>*)
<expression> ::= <constant> | <variable> | <function-call>
<action> ::= <expression>
*/

// This is used exactly then when only the variables value is needed
  final public void SingleVariable() throws ParseException {
                         /*@bgen(jjtree) SingleVariable */
                          COOLSingleVariable jjtn000 = new COOLSingleVariable(this, JJTSINGLEVARIABLE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SINGLEVAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// This is used exactly then when only the variables value is needed
  final public void GlobalVariable() throws ParseException {
                         /*@bgen(jjtree) GlobalVariable */
                          COOLGlobalVariable jjtn000 = new COOLGlobalVariable(this, JJTGLOBALVARIABLE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GLOBALVAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// This is used exactly then when only the variables contents are needed
  final public void MultiVariable() throws ParseException {
                        /*@bgen(jjtree) MultiVariable */
                         COOLMultiVariable jjtn000 = new COOLMultiVariable(this, JJTMULTIVARIABLE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MULTIVAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// This is used exactly then when only the variables value is needed
  final public void Variable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLEVAR:
      SingleVariable();
      break;
    case MULTIVAR:
      MultiVariable();
      break;
    case GLOBALVAR:
      GlobalVariable();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FunctionCall() throws ParseException {
                       /*@bgen(jjtree) FunctionCall */
                        COOLFunctionCall jjtn000 = new COOLFunctionCall(this, JJTFUNCTIONCALL);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(LBRACE);
      t = jj_consume_token(SYMBOL);
                  jjtn000.setName(t.image);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case INTEGER:
        case FLOAT:
        case STRING:
        case INSTANCE:
        case SINGLEVAR:
        case MULTIVAR:
        case GLOBALVAR:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
        Expression();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case STRING:
    case INSTANCE:
    case SYMBOL:
      Constant();
      break;
    case SINGLEVAR:
    case MULTIVAR:
    case GLOBALVAR:
      Variable();
      break;
    case LBRACE:
      FunctionCall();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** Dummy Defined in CLIPS programmers guide... */
  final public void Action() throws ParseException {
    Expression();
  }

/** Main Handler for Definition constructs.
	Note it contains the parantheses for the constructs
*/
  final public void Construct() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFFACTS:
      DefFactsConstruct();
      break;
    case DEFTEMPLATE:
      DefTemplateConstruct();
      break;
    case DEFGLOBAL:
      DefglobalConstruct();
      break;
    case DEFRULE:
      DefruleConstruct();
      break;
    case DEFFUNCTION:
      DeffunctionConstruct();
      break;
    case DEFGENERIC:
      DefgenericConstruct();
      break;
    case DEFMETHOD:
      DefmethodConstruct();
      break;
    case DEFCLASS:
      DefclassConstruct();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACE);
  }

/* Deffacts construct: <deffacts-construct> ::= (deffacts <deffacts-name> [<comment>] <RHS-pattern>*) */
  final public void DefFactsConstruct() throws ParseException {
                            /*@bgen(jjtree) DefFactsConstruct */
                             COOLDefFactsConstruct jjtn000 = new COOLDefFactsConstruct(this, JJTDEFFACTSCONSTRUCT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DEFFACTS);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                  jjtn000.setDocString(t.image);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_2;
        }
        RHSPattern();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* Deftemplate construct */

//<deftemplate-construct> ::= (deftemplate <deftemplate-name> [<comment>] <slot-definition>*)
  final public void DefTemplateConstruct() throws ParseException {
                               /*@bgen(jjtree) DefTemplateConstruct */
                                COOLDefTemplateConstruct jjtn000 = new COOLDefTemplateConstruct(this, JJTDEFTEMPLATECONSTRUCT);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DEFTEMPLATE);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                          jjtn000.setDocString(t.image);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_3;
        }
        SlotDefinition();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<slot-definition> ::= <single-slot-definition> | <multislot-definition>
  final public void SlotDefinition() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLOT:
      SingleSlotDefinition();
      break;
    case MULTISLOT:
      MultislotDefinition();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACE);
  }

//<single-slot-definition> ::= (slot <slot-name> <template-attribute>*)
  final public void SingleSlotDefinition() throws ParseException {
                               /*@bgen(jjtree) SingleSlotDefinition */
                                COOLSingleSlotDefinition jjtn000 = new COOLSingleSlotDefinition(this, JJTSINGLESLOTDEFINITION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(SLOT);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case DEFAULT_ATR:
        case DYNAMIC_ATR:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        TemplateAttribute();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<multislot-definition> ::= (multislot <slot-name> <template-attribute>*)
  final public void MultislotDefinition() throws ParseException {
                              /*@bgen(jjtree) MultislotDefinition */
                               COOLMultislotDefinition jjtn000 = new COOLMultislotDefinition(this, JJTMULTISLOTDEFINITION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(MULTISLOT);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case DEFAULT_ATR:
        case DYNAMIC_ATR:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        TemplateAttribute();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<template-attribute> ::= <default-attribute> | <constraint-attribute>
  final public void TemplateAttribute() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT_ATR:
      DefaultAttribute();
      break;
    case DYNAMIC_ATR:
      DynamicAttribute();
      break;
    case LBRACE:
      ConstraintAttribute();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//<default-attribute> ::= (default ?DERIVE | ?NONE | <expression>*) | (default-dynamic <expression>*)
/*
void DefaultAttribute() #void : {}
{
    <LBRACE> 
		(DefaultAttribute() | DynamicAttribute() ) 
     <RBRACE>
}
*/
  final public void DefaultAttribute() throws ParseException {
                           /*@bgen(jjtree) DefaultAttribute */
  COOLDefaultAttribute jjtn000 = new COOLDefaultAttribute(this, JJTDEFAULTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEFAULT_ATR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATR_DERIVE:
        jj_consume_token(ATR_DERIVE);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.setType(COOLDefaultAttribute.T_DERIVE);
        break;
      case ATR_NONE:
        jj_consume_token(ATR_NONE);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.setType(COOLDefaultAttribute.T_NONE);
        break;
      default:
        jj_la1[16] = jj_gen;
        label_6:
        while (true) {
          if (jj_2_2(2)) {
            ;
          } else {
            break label_6;
          }
          Expression();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DynamicAttribute() throws ParseException {
                           /*@bgen(jjtree) DynamicAttribute */
  COOLDynamicAttribute jjtn000 = new COOLDynamicAttribute(this, JJTDYNAMICATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DYNAMIC_ATR);
      label_7:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_7;
        }
        Expression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* Fact Specification */

//<RHS-pattern> ::= <ordered-RHS-pattern> | <template-RHS-pattern>
  final public void RHSPattern() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYMBOL:
      OrderedRHSPattern();
      break;
    case LBRACE:
      TemplateRHSPattern();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//<ordered-RHS-pattern> ::= (<symbol> <RHS-field>+)
  final public void OrderedRHSPattern() throws ParseException {
                            /*@bgen(jjtree) OrderedRHSPattern */
                             COOLOrderedRHSPattern jjtn000 = new COOLOrderedRHSPattern(this, JJTORDEREDRHSPATTERN);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
      jjtn000.setName(t.image);
      label_8:
      while (true) {
        Expression();
        if (jj_2_4(2)) {
          ;
        } else {
          break label_8;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<template-RHS-pattern> ::= (<deftemplate-name> <RHS-slot>*)
  final public void TemplateRHSPattern() throws ParseException {
                             /*@bgen(jjtree) TemplateRHSPattern */
                              COOLTemplateRHSPattern jjtn000 = new COOLTemplateRHSPattern(this, JJTTEMPLATERHSPATTERN);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(LBRACE);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        RHSSlot();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<RHS-slot> ::= <single-field-RHS-slot> | <multifield-RHS-slot>
  final public void RHSSlot() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      SingleFieldRHSSlot();
      break;
    case SYMBOL:
      MultifieldRHSSlot();
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//<single-field-RHS-slot> ::= (<slot-name> <RHS-field>)
  final public void SingleFieldRHSSlot() throws ParseException {
                             /*@bgen(jjtree) SingleFieldRHSSlot */
                              COOLSingleFieldRHSSlot jjtn000 = new COOLSingleFieldRHSSlot(this, JJTSINGLEFIELDRHSSLOT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<multifield-RHS-slot> ::= (<slot-name> <RHS-field>*)
  final public void MultifieldRHSSlot() throws ParseException {
                            /*@bgen(jjtree) MultifieldRHSSlot */
                             COOLMultifieldRHSSlot jjtn000 = new COOLMultifieldRHSSlot(this, JJTMULTIFIELDRHSSLOT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case INTEGER:
        case FLOAT:
        case STRING:
        case INSTANCE:
        case SINGLEVAR:
        case MULTIVAR:
        case GLOBALVAR:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        Expression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<RHS-field> ::= <variable> | <constant> | <function-call>
// Same as expression
/*void RHSField() #void : {}
{
    Variable() | Constant() | FunctionCall()
}*/

/* Defrule Construct */

//<defrule-construct> 
//	::= (defrule <rule-name> [<comment>] [<declaration>] <conditional-element>* => <action>*)
  final public void DefruleConstruct() throws ParseException {
                           /*@bgen(jjtree) DefruleConstruct */
                            COOLDefruleConstruct jjtn000 = new COOLDefruleConstruct(this, JJTDEFRULECONSTRUCT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DEFRULE);
      if (jj_2_5(2)) {
        t = jj_consume_token(SYMBOL);
                          jjtn000.setName(t.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYMBOL:
          t = jj_consume_token(SYMBOL);
                          jjtn000.setName(t.image);
          //name
                                  t = jj_consume_token(STRING);
                          jjtn000.setDocString(t.image);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_6(2)) {
        Declaration();
        CEList();
      } else {
        CEList();
      }
      jj_consume_token(ARROW);
      ActionList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// Create Dummy node to have fixed number of chlidren in Defrule
  final public void CEList() throws ParseException {
               /*@bgen(jjtree) CEList */
  COOLCEList jjtn000 = new COOLCEList(this, JJTCELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
        ConditionalElement();
      }
    } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte000;}
                     }
                     if (jjte000 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte000;}
                     }
                     {if (true) throw (Error)jjte000;}
    } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
    }
  }

// Create Dummy node to have fixed number of chlidren in Defrule
  final public void ActionList() throws ParseException {
                   /*@bgen(jjtree) ActionList */
  COOLActionList jjtn000 = new COOLActionList(this, JJTACTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case INTEGER:
        case FLOAT:
        case STRING:
        case INSTANCE:
        case SINGLEVAR:
        case MULTIVAR:
        case GLOBALVAR:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_12;
        }
        Expression();
      }
    } catch (Throwable jjte000) {
                         if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte000;}
                         }
                         if (jjte000 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte000;}
                         }
                         {if (true) throw (Error)jjte000;}
    } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

// Create Dummy node to have fixed number of chlidren later
  final public void CEList2() throws ParseException {
                /*@bgen(jjtree) CEList2 */
  COOLCEList2 jjtn000 = new COOLCEList2(this, JJTCELIST2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_13:
      while (true) {
        ConditionalElement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_13;
        }
      }
    } catch (Throwable jjte000) {
                      if (jjtc000) {
                        jjtree.clearNodeScope(jjtn000);
                        jjtc000 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte000 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte000;}
                      }
                      if (jjte000 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte000;}
                      }
                      {if (true) throw (Error)jjte000;}
    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
    }
  }

//<declaration> ::= (declare <rule-property>+)
  final public void Declaration() throws ParseException {
                      /*@bgen(jjtree) Declaration */
  COOLDeclaration jjtn000 = new COOLDeclaration(this, JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      jj_consume_token(DECLARE);
      label_14:
      while (true) {
        RuleProperty();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_14;
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<rule-property> ::= (salience <integer-expression>) | (auto-focus <boolean-symbol>)
  final public void RuleProperty() throws ParseException {
                       /*@bgen(jjtree) RuleProperty */
  COOLRuleProperty jjtn000 = new COOLRuleProperty(this, JJTRULEPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SALIENCE:
        jj_consume_token(SALIENCE);
        Expression();

        break;
      case AUTOFOCUS:
        jj_consume_token(AUTOFOCUS);
        BooleanSymbol();

        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<boolean-symbol> ::= TRUE | FALSE
  final public void BooleanSymbol() throws ParseException {
                        /*@bgen(jjtree) BooleanSymbol */
                         COOLBooleanSymbol jjtn000 = new COOLBooleanSymbol(this, JJTBOOLEANSYMBOL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.setName(t.image); jjtn000.setToTrue();
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.setName(t.image); jjtn000.setToFalse();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<conditional-element> ::= <pattern-CE> | <assigned-pattern-CE> | <not-CE> | <and-CE> | <or-CE> |
//                          <logical-CE> | <test-CE> | <exists-CE> | <forall-CE>
  final public void ConditionalElement() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT:
    case SYMBOL:
      PatternCE();
      break;
    case SINGLEVAR:
      AssignedPatternCE();
      break;
    case NOT:
    case AND:
    case OR:
      BooleanFunction();
      break;
    case LOGICAL:
      LogicalCE();
      break;
    case TEST:
      TestCE();
      break;
    case EXISTS:
      ExistsCE();
      break;
    case FORALL:
      ForallCE();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACE);
  }

  final public void BooleanFunction() throws ParseException {
                          /*@bgen(jjtree) BooleanFunction */
  COOLBooleanFunction jjtn000 = new COOLBooleanFunction(this, JJTBOOLEANFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
                                jjtn000.setType(COOLBooleanFunction.OP_NOT);
        ConditionalElement();
        break;
      case AND:
      case OR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.setType(COOLBooleanFunction.OP_AND);
          break;
        case OR:
          jj_consume_token(OR);
                               jjtn000.setType(COOLBooleanFunction.OP_OR);
          label_15:
          while (true) {
            ConditionalElement();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              ;
              break;
            default:
              jj_la1[29] = jj_gen;
              break label_15;
            }
          }
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

//<pattern-CE> ::= <ordered-pattern-CE> | <template-pattern-CE> | <object-pattern-CE>
  final public void PatternCE() throws ParseException {
    if (jj_2_7(2)) {
      OrderedPatternCE();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYMBOL:
        TemplatePatternCE();
        break;
      case OBJECT:
        ObjectPatternCE();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//<assigned-pattern-CE> ::= <single-field-variable> <- <pattern-CE>
  final public void AssignedPatternCE() throws ParseException {
                            /*@bgen(jjtree) AssignedPatternCE */
  COOLAssignedPatternCE jjtn000 = new COOLAssignedPatternCE(this, JJTASSIGNEDPATTERNCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SingleVariable();
      jj_consume_token(ASSIGN);
      PatternCE();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<logical-CE> ::= (logical <conditional-element>+)
  final public void LogicalCE() throws ParseException {
                    /*@bgen(jjtree) LogicalCE */
  COOLLogicalCE jjtn000 = new COOLLogicalCE(this, JJTLOGICALCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOGICAL);
      label_16:
      while (true) {
        ConditionalElement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_16;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<test-CE> ::= (test <function-call>)
  final public void TestCE() throws ParseException {
                 /*@bgen(jjtree) TestCE */
  COOLTestCE jjtn000 = new COOLTestCE(this, JJTTESTCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TEST);
      FunctionCall();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<exists-CE> ::= (exists <conditional-element>+)
  final public void ExistsCE() throws ParseException {
                   /*@bgen(jjtree) ExistsCE */
  COOLExistsCE jjtn000 = new COOLExistsCE(this, JJTEXISTSCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXISTS);
      label_17:
      while (true) {
        ConditionalElement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_17;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<forall-CE> ::= (forall <conditional-element> <conditional-element>+)
  final public void ForallCE() throws ParseException {
                   /*@bgen(jjtree) ForallCE */
  COOLForallCE jjtn000 = new COOLForallCE(this, JJTFORALLCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FORALL);
      ConditionalElement();
      CEList2();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<ordered-pattern-CE> ::= (<symbol> <constraint>*)
  final public void OrderedPatternCE() throws ParseException {
                           /*@bgen(jjtree) OrderedPatternCE */
                            COOLOrderedPatternCE jjtn000 = new COOLOrderedPatternCE(this, JJTORDEREDPATTERNCE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case FLOAT:
        case STRING:
        case INSTANCE:
        case SINGLEVAR:
        case MULTIVAR:
        case SFWILDCARD:
        case MFWILDCARD:
        case COLON:
        case EQUALS:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_18;
        }
        Constraint();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<template-pattern-CE> ::= (<deftemplate-name> <LHS-slot>*)
  final public void TemplatePatternCE() throws ParseException {
                            /*@bgen(jjtree) TemplatePatternCE */
                             COOLTemplatePatternCE jjtn000 = new COOLTemplatePatternCE(this, JJTTEMPLATEPATTERNCE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_19;
        }
        LHSSlot();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<object-pattern-CE> ::= (object <attribute-constraint>*)
  final public void ObjectPatternCE() throws ParseException {
                          /*@bgen(jjtree) ObjectPatternCE */
  COOLObjectPatternCE jjtn000 = new COOLObjectPatternCE(this, JJTOBJECTPATTERNCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OBJECT);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_20;
        }
        AttributeConstraint();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<attribute-constraint> ::= (is-a <constraint>) | (name <constraint>) | (<slot-name> <constraint>*)
  final public void AttributeConstraint() throws ParseException {
                              /*@bgen(jjtree) AttributeConstraint */
                               COOLAttributeConstraint jjtn000 = new COOLAttributeConstraint(this, JJTATTRIBUTECONSTRAINT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IS_A:
          jj_consume_token(IS_A);
                                 jjtn000.setType(COOLAttributeConstraint.T_ISA);
          break;
        case NAME:
          jj_consume_token(NAME);
                                 jjtn000.setType(COOLAttributeConstraint.T_NAME);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Constraint();
        break;
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
                         jjtn000.setType(COOLAttributeConstraint.T_SYMBOL); jjtn000.setName(t.image);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
          case FLOAT:
          case STRING:
          case INSTANCE:
          case SINGLEVAR:
          case MULTIVAR:
          case SFWILDCARD:
          case MFWILDCARD:
          case COLON:
          case EQUALS:
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[39] = jj_gen;
            break label_21;
          }
          Constraint();
        }
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// Functionally identical
//<single-field-LHS-slot> ::= (<slot-name> <constraint>)
//<multifield-LHS-slot> ::= (<slot-name> <constraint>*)
//<LHS-slot> ::= <single-field-LHS-slot> | <multifield-LHS-slot>
  final public void LHSSlot() throws ParseException {
                  /*@bgen(jjtree) LHSSlot */
                   COOLLHSSlot jjtn000 = new COOLLHSSlot(this, JJTLHSSLOT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(LBRACE);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case FLOAT:
        case STRING:
        case INSTANCE:
        case SINGLEVAR:
        case MULTIVAR:
        case SFWILDCARD:
        case MFWILDCARD:
        case COLON:
        case EQUALS:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_22;
        }
        Constraint();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//<constraint> ::= ? | $? | <connected-constraint>
  final public void Constraint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SFWILDCARD:
      SingleFieldWildcard();
      break;
    case MFWILDCARD:
      MultiFieldWildcard();
      break;
    case INTEGER:
    case FLOAT:
    case STRING:
    case INSTANCE:
    case SINGLEVAR:
    case MULTIVAR:
    case COLON:
    case EQUALS:
    case SYMBOL:
      ConnectedConstraint();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SingleFieldWildcard() throws ParseException {
                              /*@bgen(jjtree) SingleFieldWildcard */
  COOLSingleFieldWildcard jjtn000 = new COOLSingleFieldWildcard(this, JJTSINGLEFIELDWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SFWILDCARD);
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final public void MultiFieldWildcard() throws ParseException {
                             /*@bgen(jjtree) MultiFieldWildcard */
  COOLMultiFieldWildcard jjtn000 = new COOLMultiFieldWildcard(this, JJTMULTIFIELDWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MFWILDCARD);
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
  }

//<connected-constraint>::= <single-constraint> | <single-constraint> & <connected-constraint> |
//	<single-constraint> | <connected-constraint>
  final public void ConnectedConstraint() throws ParseException {
                              /*@bgen(jjtree) ConnectedConstraint */
  COOLConnectedConstraint jjtn000 = new COOLConnectedConstraint(this, JJTCONNECTEDCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Term();
                         jjtn000.setType(COOLConnectedConstraint.T_SINGLE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMPERSAND:
        label_23:
        while (true) {
          jj_consume_token(AMPERSAND);
          Term();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AMPERSAND:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_23;
          }
        }
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                     jjtn000.setType(COOLConnectedConstraint.T_AND);
        break;
      case LINE:
        label_24:
        while (true) {
          jj_consume_token(LINE);
          Term();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LINE:
            ;
            break;
          default:
            jj_la1[44] = jj_gen;
            break label_24;
          }
        }
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                                jjtn000.setType(COOLConnectedConstraint.T_OR);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//<term> ::= <constant> | <single-field-variable> | <multifield-variable> | 
//	:<function-call> | =<function-call>
  final public void Term() throws ParseException {
               /*@bgen(jjtree) Term */
  COOLTerm jjtn000 = new COOLTerm(this, JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(3)) {
        Constant();
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.setType(COOLTerm.T_CONST);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SINGLEVAR:
          SingleVariable();
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.setType(COOLTerm.T_SINGLE);
          break;
        case MULTIVAR:
          MultiVariable();
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.setType(COOLTerm.T_MULTI);
          break;
        case COLON:
          jj_consume_token(COLON);
          FunctionCall();
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    jjtn000.setType(COOLTerm.T_COLON);
          break;
        case EQUALS:
          jj_consume_token(EQUALS);
          FunctionCall();
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                     jjtn000.setType(COOLTerm.T_EQ);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Defglobal Construct */

//<defglobal-construct> ::= (defglobal [<defmodule-name>] <global-assignment>*)
  final public void DefglobalConstruct() throws ParseException {
                             /*@bgen(jjtree) DefglobalConstruct */
                              COOLDefglobalConstruct jjtn000 = new COOLDefglobalConstruct(this, JJTDEFGLOBALCONSTRUCT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DEFGLOBAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
              jjtn000.setName(t.image);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GLOBALVAR:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_25;
        }
        GlobalAssignment();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<global-assignment> ::= <global-variable> = <expression>
  final public void GlobalAssignment() throws ParseException {
                           /*@bgen(jjtree) GlobalAssignment */
                            COOLGlobalAssignment jjtn000 = new COOLGlobalAssignment(this, JJTGLOBALASSIGNMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GLOBALVAR);
          jjtn000.setName(t.image);
      jj_consume_token(EQUALS);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* Deffunction Construct */

//<deffunction-construct> 
//	::= (deffunction <name> [<comment>] (<regular-parameter>* [<wildcard-parameter>]) <action>*)
  final public void DeffunctionConstruct() throws ParseException {
                               /*@bgen(jjtree) DeffunctionConstruct */
                                COOLDeffunctionConstruct jjtn000 = new COOLDeffunctionConstruct(this, JJTDEFFUNCTIONCONSTRUCT);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DEFFUNCTION);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                          jjtn000.setDocString(t.image);
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      ParameterList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIVAR:
        MultiVariable();
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      ActionList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<regular-parameter> ::= <single-field-variable>
  final public void ParameterList() throws ParseException {
                        /*@bgen(jjtree) ParameterList */
  COOLParameterList jjtn000 = new COOLParameterList(this, JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SINGLEVAR:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_26;
        }
        SingleVariable();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Ignored, produces multifield variable directly
//<wildcard-parameter> ::= <multifield-variable>
void WildcardParameter()  #void : {}
{
    MultiVariable()
}
*/

/* Defgeneric Construct */

//<defgeneric-construct> ::= (defgeneric <name> [<comment>])
  final public void DefgenericConstruct() throws ParseException {
                              /*@bgen(jjtree) DefgenericConstruct */
                               COOLDefgenericConstruct jjtn000 = new COOLDefgenericConstruct(this, JJTDEFGENERICCONSTRUCT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DEFGENERIC);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                          jjtn000.setDocString(t.image);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* Defmethod Construct */

//<defmethod-construct> ::= (defmethod <name> [<index>] [<comment>] (<parameter-restriction>*
//	[<wildcard-parameter-restriction>]) <action>*)
  final public void DefmethodConstruct() throws ParseException {
                             /*@bgen(jjtree) DefmethodConstruct */
                              COOLDefmethodConstruct jjtn000 = new COOLDefmethodConstruct(this, JJTDEFMETHODCONSTRUCT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DEFMETHOD);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                  jjtn000.setIndex(t.image);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                  jjtn000.setDocString(t.image);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SINGLEVAR:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_27;
        }
        ParameterRestriction();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIVAR:
        WildcardParameterRestriction();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      ActionList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<parameter-restriction> ::= <single-field-variable> | (<single-field-variable> <type>* [<query>])
  final public void ParameterRestriction() throws ParseException {
                               /*@bgen(jjtree) ParameterRestriction */
  COOLParameterRestriction jjtn000 = new COOLParameterRestriction(this, JJTPARAMETERRESTRICTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2)) {
        SingleVariable();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SINGLEVAR:
          SingleVariable();
          jj_consume_token(LBRACE);
          SingleVariable();
          label_28:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SYMBOL:
              ;
              break;
            default:
              jj_la1[57] = jj_gen;
              break label_28;
            }
            Type();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case GLOBALVAR:
            Query();
            break;
          default:
            jj_la1[58] = jj_gen;
            ;
          }
          jj_consume_token(RBRACE);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<wildcard-parameter-restriction> ::= <multifield-variable> | (<multifield-variable> <type>* [<query>])
  final public void WildcardParameterRestriction() throws ParseException {
                                       /*@bgen(jjtree) WildcardParameterRestriction */
  COOLWildcardParameterRestriction jjtn000 = new COOLWildcardParameterRestriction(this, JJTWILDCARDPARAMETERRESTRICTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(2)) {
        MultiVariable();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIVAR:
          MultiVariable();
          jj_consume_token(LBRACE);
          MultiVariable();
          label_29:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SYMBOL:
              ;
              break;
            default:
              jj_la1[60] = jj_gen;
              break label_29;
            }
            Type();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case GLOBALVAR:
            Query();
            break;
          default:
            jj_la1[61] = jj_gen;
            ;
          }
          jj_consume_token(RBRACE);
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<type> ::= <class-name>
  final public void Type() throws ParseException {
               /*@bgen(jjtree) Type */
                COOLType jjtn000 = new COOLType(this, JJTTYPE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<query> ::= <global-variable> | <function-call>
  final public void Query() throws ParseException {
                /*@bgen(jjtree) Query */
                 COOLQuery jjtn000 = new COOLQuery(this, JJTQUERY);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GLOBALVAR:
        t = jj_consume_token(GLOBALVAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
        break;
      case LBRACE:
        FunctionCall();
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* Defclass Construct */

//<defclass-construct> ::= (defclass <name> [<comment>] (is-a <superclass-name>+)
//	[<role>] [<pattern-match-role>] <slot>* <handler-documentation>*)
  final public void DefclassConstruct() throws ParseException {
                            /*@bgen(jjtree) DefclassConstruct */
                             COOLDefclassConstruct jjtn000 = new COOLDefclassConstruct(this, JJTDEFCLASSCONSTRUCT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DEFCLASS);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                  jjtn000.setName(t.image);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      jj_consume_token(IS_A);
      label_30:
      while (true) {
        t = jj_consume_token(SYMBOL);
                          jjtn000.addClassname(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_30;
        }
      }
      jj_consume_token(RBRACE);
      if (jj_2_11(2)) {
        Role();
      } else {
        ;
      }
      if (jj_2_12(2)) {
        PatternMatchRole();
      } else {
        ;
      }
      label_31:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_31;
        }
        Slot();
      }
      label_32:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_32;
        }
        HandlerDocumentation();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<role> ::= (role concrete | abstract)
  final public void Role() throws ParseException {
               /*@bgen(jjtree) Role */
  COOLRole jjtn000 = new COOLRole(this, JJTROLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        jj_consume_token(ROLE);
        jj_consume_token(CONCRETE);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<pattern-match-role> ::= (pattern-match reactive | non-reactive)
  final public void PatternMatchRole() throws ParseException {
                           /*@bgen(jjtree) PatternMatchRole */
  COOLPatternMatchRole jjtn000 = new COOLPatternMatchRole(this, JJTPATTERNMATCHROLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        jj_consume_token(PATTERN_MATCH);
        jj_consume_token(REACTIVE);
        break;
      case NON_REACTIVE:
        jj_consume_token(NON_REACTIVE);
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<slot> ::= (slot <name> <facet>*) | (single-slot <name> <facet>*) | (multislot <name> <facet>*)
  final public void Slot() throws ParseException {
               /*@bgen(jjtree) Slot */
                COOLSlot jjtn000 = new COOLSlot(this, JJTSLOT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLOT:
        jj_consume_token(SLOT);
        break;
      case SINGLE_SLOT:
        jj_consume_token(SINGLE_SLOT);
        break;
      case MULTISLOT:
        jj_consume_token(MULTISLOT);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(SYMBOL);
                  jjtn000.setName(t.image);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_33;
        }
        Facet();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<facet> ::= <default-facet> | <storage-facet> | <access-facet> | <propagation-facet> | 
//	<source-facet> | <pattern-match-facet> | <visibility-facet> | 
//	<create-accessor-facet> <override-message-facet> | <constraint-attribute>
  final public void Facet() throws ParseException {
    jj_consume_token(LBRACE);
    DefaultFacet();
    jj_consume_token(RBRACE);
  }

//<default-facet> ::= (default ?DERIVE | ?NONE | <expression>*) | (default-dynamic <expression>*)
  final public void DefaultFacet() throws ParseException {
                       /*@bgen(jjtree) DefaultFacet */
  COOLDefaultFacet jjtn000 = new COOLDefaultFacet(this, JJTDEFAULTFACET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_ATR:
        jj_consume_token(DEFAULT_ATR);
        jj_consume_token(ATR_DERIVE);
        break;
      case ATR_NONE:
        jj_consume_token(ATR_NONE);
        break;
      default:
        jj_la1[71] = jj_gen;
        label_34:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
          case INTEGER:
          case FLOAT:
          case STRING:
          case INSTANCE:
          case SINGLEVAR:
          case MULTIVAR:
          case GLOBALVAR:
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[70] = jj_gen;
            break label_34;
          }
          Expression();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<storage-facet> ::= (storage local | shared)
  final public void StorageFacet() throws ParseException {
                       /*@bgen(jjtree) StorageFacet */
  COOLStorageFacet jjtn000 = new COOLStorageFacet(this, JJTSTORAGEFACET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STORAGE:
        jj_consume_token(STORAGE);
        jj_consume_token(LOCAL);
        break;
      case SHARED:
        jj_consume_token(SHARED);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<access-facet> ::= (access read-write | read-only | initialize-only)
  final public void AccessFacet() throws ParseException {
                      /*@bgen(jjtree) AccessFacet */
  COOLAccessFacet jjtn000 = new COOLAccessFacet(this, JJTACCESSFACET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACCESS:
        jj_consume_token(ACCESS);
        jj_consume_token(READ_WRITE);
        break;
      case READ_ONLY:
        jj_consume_token(READ_ONLY);
        break;
      case INITIALIZE_ONLY:
        jj_consume_token(INITIALIZE_ONLY);
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<propagation-facet> ::= (propagation inherit | no-inherit)
  final public void PropagationFacet() throws ParseException {
                           /*@bgen(jjtree) PropagationFacet */
  COOLPropagationFacet jjtn000 = new COOLPropagationFacet(this, JJTPROPAGATIONFACET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPAGATION:
        jj_consume_token(PROPAGATION);
        jj_consume_token(INHERIT);
        break;
      case NO_INHERIT:
        jj_consume_token(NO_INHERIT);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<source-facet> ::= (source exclusive | composite)
  final public void SourceFacet() throws ParseException {
                      /*@bgen(jjtree) SourceFacet */
  COOLSourceFacet jjtn000 = new COOLSourceFacet(this, JJTSOURCEFACET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOURCE:
        jj_consume_token(SOURCE);
        jj_consume_token(EXCLUSIVE);
        break;
      case COMPOSITE:
        jj_consume_token(COMPOSITE);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<pattern-match-facet> ::= (pattern-match reactive | non-reactive)
  final public void PatternMatchFacet() throws ParseException {
                            /*@bgen(jjtree) PatternMatchFacet */
  COOLPatternMatchFacet jjtn000 = new COOLPatternMatchFacet(this, JJTPATTERNMATCHFACET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PATTERN_MATCH:
        jj_consume_token(PATTERN_MATCH);
        jj_consume_token(REACTIVE);
        break;
      case NON_REACTIVE:
        jj_consume_token(NON_REACTIVE);
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<visibility-facet> ::= (visibility private | public)
  final public void VisibilityFacet() throws ParseException {
                          /*@bgen(jjtree) VisibilityFacet */
  COOLVisibilityFacet jjtn000 = new COOLVisibilityFacet(this, JJTVISIBILITYFACET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VISIBILITY:
        jj_consume_token(VISIBILITY);
        jj_consume_token(PRIVATE);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<create-accessor-facet> ::= (create-accessor ?NONE | read | write | read-write)
  final public void CreateAccessorFacet() throws ParseException {
                              /*@bgen(jjtree) CreateAccessorFacet */
  COOLCreateAccessorFacet jjtn000 = new COOLCreateAccessorFacet(this, JJTCREATEACCESSORFACET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE_ACCESSOR:
        jj_consume_token(CREATE_ACCESSOR);
        jj_consume_token(ATR_NONE);
        break;
      case READ:
        jj_consume_token(READ);
        break;
      case WRITE:
        jj_consume_token(WRITE);
        break;
      case READ_WRITE:
        jj_consume_token(READ_WRITE);
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<override-message-facet> ::= (override-message ?DEFAULT | <message-name>)
  final public void OverrideMessageFacet() throws ParseException {
                               /*@bgen(jjtree) OverrideMessageFacet */
                                COOLOverrideMessageFacet jjtn000 = new COOLOverrideMessageFacet(this, JJTOVERRIDEMESSAGEFACET);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OVERRIDE_MESSAGE:
        jj_consume_token(OVERRIDE_MESSAGE);
        jj_consume_token(ATR_DEFAULT);
        break;
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<handler-documentation> ::= (message-handler <name> [<handler-type>])
  final public void HandlerDocumentation() throws ParseException {
                               /*@bgen(jjtree) HandlerDocumentation */
                                COOLHandlerDocumentation jjtn000 = new COOLHandlerDocumentation(this, JJTHANDLERDOCUMENTATION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(MESSAGE_HANDLER);
      t = jj_consume_token(SYMBOL);
          jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIMARY:
      case AROUND:
      case BEFORE:
      case AFTER:
        HandlerType();
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<handler-type> ::= primary | around | before | after
  final public void HandlerType() throws ParseException {
                      /*@bgen(jjtree) HandlerType */
                       COOLHandlerType jjtn000 = new COOLHandlerType(this, JJTHANDLERTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIMARY:
        jj_consume_token(PRIMARY);
        break;
      case AROUND:
        jj_consume_token(AROUND);
        break;
      case BEFORE:
        jj_consume_token(BEFORE);
        break;
      case AFTER:
        jj_consume_token(AFTER);
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* constraint Attributes */

//<constraint-attribute> ::= <type-attribute> | <allowed-constant-attribute> | 
//	<range-attribute> | <cardinality-attribute>
  final public void ConstraintAttribute() throws ParseException {
                              /*@bgen(jjtree) ConstraintAttribute */
  COOLConstraintAttribute jjtn000 = new COOLConstraintAttribute(this, JJTCONSTRAINTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      if (jj_2_15(2)) {
        TypeAttribute();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALLOWED_SYMBOLS:
        case ALLOWED_STRINGS:
        case ALLOWED_LEXEMES:
        case ALLOWED_INTEGERS:
        case ALLOWED_FLOATS:
        case ALLOWED_NUMBERS:
        case ALLOWED_INSTANCES:
        case ALLOWED_CLASSES:
        case ALLOWED_VALUES:
          AllowedConstantAttribute();
          break;
        case RANGE:
          RangeAttribute();
          break;
        case CARDINALITY:
          CardinalityAttribute();
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<type-attribute> ::= (type <type-specification>)
  final public void TypeAttribute() throws ParseException {
                        /*@bgen(jjtree) TypeAttribute */
  COOLTypeAttribute jjtn000 = new COOLTypeAttribute(this, JJTTYPEATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TYPE);
      TypeSpecification();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<type-specification> ::= <allowed-type>+ | ?VARIABLE
  final public void TypeSpecification() throws ParseException {
                            /*@bgen(jjtree) TypeSpecification */
  COOLTypeSpecification jjtn000 = new COOLTypeSpecification(this, JJTTYPESPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYMBOL_TYPE:
      case STRING_TYPE:
      case LEXEME_TYPE:
      case INTEGER_TYPE:
      case FLOAT_TYPE:
      case NUMBER_TYPE:
      case INSTANCE_NAME_TYPE:
      case INSTANCE_ADDRESS_TYPE:
      case INSTANCE_TYPE:
      case EXTERNAL_ADDRESS_TYPE:
      case FACT_ADDRESS_TYPE:
        label_36:
        while (true) {
          AllowedType();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SYMBOL_TYPE:
          case STRING_TYPE:
          case LEXEME_TYPE:
          case INTEGER_TYPE:
          case FLOAT_TYPE:
          case NUMBER_TYPE:
          case INSTANCE_NAME_TYPE:
          case INSTANCE_ADDRESS_TYPE:
          case INSTANCE_TYPE:
          case EXTERNAL_ADDRESS_TYPE:
          case FACT_ADDRESS_TYPE:
            ;
            break;
          default:
            jj_la1[84] = jj_gen;
            break label_36;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

//<allowed-type> ::= SYMBOL | STRING | LEXEME | INTEGER | FLOAT | NUMBER |
//	INSTANCE-NAME | INSTANCE-ADDRESS | INSTANCE | EXTERNAL-ADDRESS | FACT-ADDRESS
  final public void AllowedType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYMBOL_TYPE:
      jj_consume_token(SYMBOL_TYPE);
      break;
    case STRING_TYPE:
      jj_consume_token(STRING_TYPE);
      break;
    case LEXEME_TYPE:
      jj_consume_token(LEXEME_TYPE);
      break;
    case INTEGER_TYPE:
      jj_consume_token(INTEGER_TYPE);
      break;
    case FLOAT_TYPE:
      jj_consume_token(FLOAT_TYPE);
      break;
    case NUMBER_TYPE:
      jj_consume_token(NUMBER_TYPE);
      break;
    case INSTANCE_NAME_TYPE:
      jj_consume_token(INSTANCE_NAME_TYPE);
      break;
    case INSTANCE_ADDRESS_TYPE:
      jj_consume_token(INSTANCE_ADDRESS_TYPE);
      break;
    case INSTANCE_TYPE:
      jj_consume_token(INSTANCE_TYPE);
      break;
    case EXTERNAL_ADDRESS_TYPE:
      jj_consume_token(EXTERNAL_ADDRESS_TYPE);
      break;
    case FACT_ADDRESS_TYPE:
      jj_consume_token(FACT_ADDRESS_TYPE);
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//<allowed-constant-attribute> ::= (allowed-symbols <symbol-list>) | (allowed-strings <string-list>) |
//	(allowed-lexemes <lexeme-list> | (allowed-integers <integer-list>) | (allowed-floats <float-list>) |
//	(allowed-numbers <number-list>) | (allowed-instance-names <instance-list>) |
//	(allowed-classes <class-name-list>) | (allowed-values <value-list>)
  final public void AllowedConstantAttribute() throws ParseException {
                                   /*@bgen(jjtree) AllowedConstantAttribute */
  COOLAllowedConstantAttribute jjtn000 = new COOLAllowedConstantAttribute(this, JJTALLOWEDCONSTANTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALLOWED_SYMBOLS:
        jj_consume_token(ALLOWED_SYMBOLS);
        SymbolList();
        break;
      case ALLOWED_STRINGS:
        jj_consume_token(ALLOWED_STRINGS);
        StringList();
        break;
      case ALLOWED_LEXEMES:
        jj_consume_token(ALLOWED_LEXEMES);
        LexemeList();
        break;
      case ALLOWED_INTEGERS:
        jj_consume_token(ALLOWED_INTEGERS);
        IntegerList();
        break;
      case ALLOWED_FLOATS:
        jj_consume_token(ALLOWED_FLOATS);
        FloatList();
        break;
      case ALLOWED_NUMBERS:
        jj_consume_token(ALLOWED_NUMBERS);
        NumberList();
        break;
      case ALLOWED_INSTANCES:
        jj_consume_token(ALLOWED_INSTANCES);
        InstanceList();
        break;
      case ALLOWED_CLASSES:
        jj_consume_token(ALLOWED_CLASSES);
        ClassNameList();
        break;
      case ALLOWED_VALUES:
        jj_consume_token(ALLOWED_VALUES);
        ValueList();
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<symbol-list> ::= <symbol>+ | ?VARIABLE
  final public void SymbolList() throws ParseException {
                     /*@bgen(jjtree) SymbolList */
  COOLSymbolList jjtn000 = new COOLSymbolList(this, JJTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYMBOL:
        label_37:
        while (true) {
          jj_consume_token(SYMBOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[88] = jj_gen;
            break label_37;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<string-list> ::= <string>+ | ?VARIABLE
  final public void StringList() throws ParseException {
                     /*@bgen(jjtree) StringList */
  COOLStringList jjtn000 = new COOLStringList(this, JJTSTRINGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        label_38:
        while (true) {
          jj_consume_token(STRING);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
            ;
            break;
          default:
            jj_la1[90] = jj_gen;
            break label_38;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<lexeme-list> ::= <lexeme>+ | ?VARIABLE
  final public void LexemeList() throws ParseException {
                     /*@bgen(jjtree) LexemeList */
  COOLLexemeList jjtn000 = new COOLLexemeList(this, JJTLEXEMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case SYMBOL:
        label_39:
        while (true) {
          Lexeme();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[92] = jj_gen;
            break label_39;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<integer-list> ::= <integer>+ | ?VARIABLE
  final public void IntegerList() throws ParseException {
                      /*@bgen(jjtree) IntegerList */
  COOLIntegerList jjtn000 = new COOLIntegerList(this, JJTINTEGERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        label_40:
        while (true) {
          jj_consume_token(INTEGER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            ;
            break;
          default:
            jj_la1[94] = jj_gen;
            break label_40;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<float-list> ::= <float>+ | ?VARIABLE
  final public void FloatList() throws ParseException {
                    /*@bgen(jjtree) FloatList */
  COOLFloatList jjtn000 = new COOLFloatList(this, JJTFLOATLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        label_41:
        while (true) {
          jj_consume_token(FLOAT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FLOAT:
            ;
            break;
          default:
            jj_la1[96] = jj_gen;
            break label_41;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<number-list> ::= <number>+ | ?VARIABLE
  final public void NumberList() throws ParseException {
                     /*@bgen(jjtree) NumberList */
  COOLNumberList jjtn000 = new COOLNumberList(this, JJTNUMBERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
        label_42:
        while (true) {
          Number();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
          case FLOAT:
            ;
            break;
          default:
            jj_la1[98] = jj_gen;
            break label_42;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<instance-name-list> ::= <instance-name>+ | ?VARIABLE
  final public void InstanceList() throws ParseException {
                       /*@bgen(jjtree) InstanceList */
  COOLInstanceList jjtn000 = new COOLInstanceList(this, JJTINSTANCELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCE:
        label_43:
        while (true) {
          jj_consume_token(INSTANCE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INSTANCE:
            ;
            break;
          default:
            jj_la1[100] = jj_gen;
            break label_43;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<class-name-list> ::= <class-name>+ | ?VARIABLE
  final public void ClassNameList() throws ParseException {
                        /*@bgen(jjtree) ClassNameList */
                         COOLClassNameList jjtn000 = new COOLClassNameList(this, JJTCLASSNAMELIST);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYMBOL:
        label_44:
        while (true) {
          t = jj_consume_token(SYMBOL);
                  jjtn000.addClassname(t.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[102] = jj_gen;
            break label_44;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<value-list> ::= <constant>+ | ?VARIABLE
  final public void ValueList() throws ParseException {
                    /*@bgen(jjtree) ValueList */
  COOLValueList jjtn000 = new COOLValueList(this, JJTVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case STRING:
      case INSTANCE:
      case SYMBOL:
        label_45:
        while (true) {
          Constant();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
          case FLOAT:
          case STRING:
          case INSTANCE:
          case SYMBOL:
            ;
            break;
          default:
            jj_la1[104] = jj_gen;
            break label_45;
          }
        }
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<range-attribute> ::= (range <range-specification> <range-specification>)
  final public void RangeAttribute() throws ParseException {
                         /*@bgen(jjtree) RangeAttribute */
  COOLRangeAttribute jjtn000 = new COOLRangeAttribute(this, JJTRANGEATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RANGE);
      RangeSpecification();
      RangeSpecification();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<range-specification> ::= <number> | ?VARIABLE
  final public void RangeSpecification() throws ParseException {
                             /*@bgen(jjtree) RangeSpecification */
  COOLRangeSpecification jjtn000 = new COOLRangeSpecification(this, JJTRANGESPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
        Number();
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<cardinality-attribute> ::= (cardinality <cardinality-specification> <cardinality-specification>)
  final public void CardinalityAttribute() throws ParseException {
                               /*@bgen(jjtree) CardinalityAttribute */
  COOLCardinalityAttribute jjtn000 = new COOLCardinalityAttribute(this, JJTCARDINALITYATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CARDINALITY);
      CardinalitySpecification();
      CardinalitySpecification();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//<cardinality-specification> ::= <integer> | ?VARIABLE
  final public void CardinalitySpecification() throws ParseException {
                                   /*@bgen(jjtree) CardinalitySpecification */
  COOLCardinalitySpecification jjtn000 = new COOLCardinalitySpecification(this, JJTCARDINALITYSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        Integer();
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_3R_72() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    if (jj_3R_103()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(INSTANCE)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(SYMBOL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(MESSAGE_HANDLER)) return true;
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(DEFMETHOD)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(DEFGENERIC)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(DEFFUNCTION)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(DEFTEMPLATE)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(NON_REACTIVE)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(DEFFACTS)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(DEFGLOBAL)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(ABSTRACT)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(DECLARE)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(MFWILDCARD)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(SFWILDCARD)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(PATTERN_MATCH)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(ROLE)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(MULTIVAR)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(DEFRULE)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(GLOBALVAR)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(DEFCLASS)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(SINGLEVAR)) return true;
    return false;
  }

  public COOLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[108];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1db200,0x3000,0x8000,0x1b000,0x1c0000,0x1db200,0x1db200,0x1fe00000,0x8000,0x200,0x8000,0x200,0x0,0x60000200,0x60000200,0x60000200,0x0,0x200,0x200,0x200,0x1db200,0x0,0x200,0x1db200,0x200,0x200,0x0,0x0,0x40000,0x200,0x0,0x0,0x0,0x200,0x200,0xdb000,0x200,0x200,0x0,0xdb000,0x200,0xdb000,0xdb000,0x0,0x0,0x0,0xc0000,0x0,0x100000,0x8000,0x80000,0x40000,0x8000,0x1000,0x8000,0x40000,0x80000,0x0,0x100200,0x40000,0x0,0x100200,0x80000,0x100200,0x8000,0x0,0x200,0x200,0x0,0x200,0x1db200,0x20000000,0x1db200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x8000,0x8000,0x1000,0x1000,0x2000,0x2000,0x3000,0x3000,0x10000,0x10000,0x0,0x0,0x1b000,0x1b000,0x3000,0x1000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0xc00,0xff000,0x0,0x6000,0x7000,0x80000,0x0,0x0,0x31800000,0x0,0x0,0x300000,0x31800000,0x0,0x31800000,0x31800000,0x4000000,0x8000000,0xc000000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0xc0000000,0x80000000,0x0,0x0,0x40000000,0x0,0x40000000,0x0,0x40000000,0x0,0x40000000,0x0,0x40000000,0x0,0x40000000,0x0,0x40000000,0x0,0x40000000,0x0,0x40000000,0x40000000,0x40000000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x28000000,0x40000000,0x0,0x0,0x5000000,0x0,0x80000000,0x0,0x0,0x0,0x1ffc00,0x3ff,0x3ff,0x3ff,0x7fc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x100000,0x0,0x100000,0x100000,0x0,0x100000,0x100000,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x100000,0x100000,0x0,0x100000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x100000,0x0,0x100000,0x100000,0x100000,0x100000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x100000,0x0,0x100000,0x0,0x9,0x50,0x280,0x0,0x1400,0x2006,0x104000,0xf0000,0xf0000,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x100000,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[15];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public COOL(java.io.InputStream stream) {
     this(stream, null);
  }
  public COOL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new COOLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public COOL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new COOLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public COOL(COOLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(COOLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 108; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[117];
    for (int i = 0; i < 117; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 108; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 117; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
